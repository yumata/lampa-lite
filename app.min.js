(function () {
  'use strict';

  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: function value(target, firstSource) {

        if (target === undefined || target === null) {
          throw new TypeError('Cannot convert first argument to object');
        }

        var to = Object(target);

        for (var i = 1; i < arguments.length; i++) {
          var nextSource = arguments[i];

          if (nextSource === undefined || nextSource === null) {
            continue;
          }

          var keysArray = Object.keys(Object(nextSource));

          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

            if (desc !== undefined && desc.enumerable) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }

        return to;
      }
    });
  }

  if (!('remove' in Element.prototype)) {
    Element.prototype.remove = function () {
      this.parentNode.removeChild(this);
    };
  }

  if (!Array.from) {
    Array.from = function () {
      var toStr = Object.prototype.toString;

      var isCallable = function isCallable(fn) {
        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
      };

      var toInteger = function toInteger(value) {
        var number = Number(value);

        if (isNaN(number)) {
          return 0;
        }

        if (number === 0 || !isFinite(number)) {
          return number;
        }

        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
      };

      var maxSafeInteger = Math.pow(2, 53) - 1;

      var toLength = function toLength(value) {
        var len = toInteger(value);
        return Math.min(Math.max(len, 0), maxSafeInteger);
      }; // Свойство length метода from равно 1.


      return function from(arrayLike
      /* , mapFn, thisArg */
      ) {
        // 1. Положим C равным значению this.
        var C = this; // 2. Положим items равным ToObject(arrayLike).

        var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).

        if (arrayLike == null) {
          throw new TypeError('Array.from requires an array-like object - not null or undefined');
        } // 4. Если mapfn равен undefined, положим mapping равным false.


        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
        var T;

        if (typeof mapFn !== 'undefined') {
          // 5. иначе
          // 5. a. Если вызов IsCallable(mapfn) равен false, выкидываем
          // исключение TypeError.
          if (!isCallable(mapFn)) {
            throw new TypeError('Array.from: when provided, the second argument must be a function');
          } // 5. b. Если thisArg присутствует, положим T равным thisArg;
          // иначе положим T равным undefined.


          if (arguments.length > 2) {
            T = arguments[2];
          }
        } // 10. Положим lenValue равным Get(items, "length").
        // 11. Положим len равным ToLength(lenValue).


        var len = toLength(items.length); // 13. Если IsConstructor(C) равен true, то
        // 13. a. Положим A равным результату вызова внутреннего метода
        // [[Construct]]
        // объекта C со списком аргументов, содержащим единственный элемент
        // len.
        // 14. a. Иначе, положим A равным ArrayCreate(len).

        var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Положим k равным 0.

        var k = 0; // 17. Пока k < len, будем повторять... (шаги с a по h)

        var kValue;

        while (k < len) {
          kValue = items[k];

          if (mapFn) {
            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
          } else {
            A[k] = kValue;
          }

          k += 1;
        } // 18. Положим putStatus равным Put(A, "length", len, true).


        A.length = len; // 20. Вернём A.

        return A;
      };
    }();
  } // https://tc39.github.io/ecma262/#sec-array.prototype.find


  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      value: function value(predicate) {
        // 1. Let O be ? ToObject(this value).
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        }

        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError
        // exception.

        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        } // 4. If thisArg was supplied, let T be thisArg; else let T be
        // undefined.


        var thisArg = arguments[1]; // 5. Let k be 0.

        var k = 0; // 6. Repeat, while k < len

        while (k < len) {
          // a. Let Pk be ! ToString(k).
          // b. Let kValue be ? Get(O, Pk).
          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue,
          // k, O »)).
          // d. If testResult is true, return kValue.
          var kValue = o[k];

          if (predicate.call(thisArg, kValue, k, o)) {
            return kValue;
          } // e. Increase k by 1.


          k++;
        } // 7. Return undefined.


        return undefined;
      },
      configurable: true,
      writable: true
    });
  } // https://tc39.github.io/ecma262/#sec-array.prototype.includes


  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      value: function value(searchElement, fromIndex) {
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        } // 1. Let O be ? ToObject(this value).


        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // 3. If len is 0, return false.

        if (len === 0) {
          return false;
        } // 4. Let n be ? ToInteger(fromIndex).
        // (If fromIndex is undefined, this step produces the value 0.)


        var n = fromIndex | 0; // 5. If n ≥ 0, then
        // a. Let k be n.
        // 6. Else n < 0,
        // a. Let k be len + n.
        // b. If k < 0, let k be 0.

        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

        function sameValueZero(x, y) {
          return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
        } // 7. Repeat, while k < len


        while (k < len) {
          // a. Let elementK be the result of ? Get(O, ! ToString(k)).
          // b. If SameValueZero(searchElement, elementK) is true, return
          // true.
          if (sameValueZero(o[k], searchElement)) {
            return true;
          } // c. Increase k by 1.


          k++;
        } // 8. Return false


        return false;
      }
    });
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {

      if (search instanceof RegExp) {
        throw TypeError('first argument must not be a RegExp');
      }

      if (start === undefined) {
        start = 0;
      }

      return this.indexOf(search, start) !== -1;
    };
  }

  if (!Object.entries) {
    Object.entries = function (obj) {
      var ownProps = Object.keys(obj),
          i = ownProps.length,
          resArray = new Array(i); // preallocate the Array

      while (i--) {
        resArray[i] = [ownProps[i], obj[ownProps[i]]];
      }

      return resArray;
    };
  }

  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // ближайший аналог внутренней функции
        // IsCallable в ECMAScript 5
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function fNOP() {},
          fBound = function fBound() {
        return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();
      return fBound;
    };
  }

  (function () {

    var _slice = Array.prototype.slice;

    try {
      // Не может использоваться с элементами DOM в IE < 9
      _slice.call(document.documentElement);
    } catch (e) {
      // В IE < 9 кидается исключение
      // Функция будет работать для истинных массивов, массивоподобных объектов,
      // NamedNodeMap (атрибуты, сущности, примечания),
      // NodeList (например, getElementsByTagName), HTMLCollection (например, childNodes)
      // и не будет падать на других объектах DOM (как это происходит на элементах DOM в IE < 9)
      Array.prototype.slice = function (begin, end) {
        // IE < 9 будет недоволен аргументом end, равным undefined
        end = typeof end !== 'undefined' ? end : this.length; // Для родных объектов Array мы используем родную функцию slice

        if (Object.prototype.toString.call(this) === '[object Array]') {
          return _slice.call(this, begin, end);
        } // Массивоподобные объекты мы обрабатываем самостоятельно


        var i,
            cloned = [],
            size,
            len = this.length; // Обрабатываем отрицательное значение begin

        var start = begin || 0;
        start = start >= 0 ? start : len + start; // Обрабатываем отрицательное значение end

        var upTo = end ? end : len;

        if (end < 0) {
          upTo = len + end;
        } // Фактически ожидаемый размер среза


        size = upTo - start;

        if (size > 0) {
          cloned = new Array(size);

          if (this.charAt) {
            for (i = 0; i < size; i++) {
              cloned[i] = this.charAt(start + i);
            }
          } else {
            for (i = 0; i < size; i++) {
              cloned[i] = this[start + i];
            }
          }
        }

        return cloned;
      };
    }
  })();

  function subscribe() {
    this.add = function (type, listener) {
      if (this._listeners === undefined) this._listeners = {};
      var listeners = this._listeners;

      if (listeners[type] === undefined) {
        listeners[type] = [];
      }

      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    };

    this.follow = function (type, listener) {
      var _this = this;

      type.split(',').forEach(function (name) {
        _this.add(name, listener);
      });
    };

    this.has = function (type, listener) {
      if (this._listeners === undefined) return false;
      var listeners = this._listeners;
      return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
    };

    this.remove = function (type, listener) {
      if (this._listeners === undefined) return;
      var listeners = this._listeners;
      var listenerArray = listeners[type];

      if (listenerArray !== undefined) {
        var index = listenerArray.indexOf(listener);

        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    };

    this.send = function (type) {
      var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this._listeners === undefined) return;
      var listeners = this._listeners;
      var listenerArray = listeners[type];

      if (listenerArray !== undefined) {
        event.target = this;
        var array = listenerArray.slice(0);

        for (var i = 0, l = array.length; i < l; i++) {
          array[i].call(this, event);
        }
      }
    };

    this.destroy = function () {
      this._listeners = null;
    };
  }

  function start$3() {
    return new subscribe();
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function toObject(a) {
    if (Object.prototype.toString.call(a) === '[object Object]') return a;else {
      a = {};
      return a;
    }
  }

  function toArray(a) {
    if (Object.prototype.toString.call(a) === '[object Object]') {
      var b = [];

      for (var i in a) {
        b.push(a[i]);
      }

      return b;
    } else if (typeof a == 'string' || a == null || typeof a == 'number' || typeof a == 'undefined') return [];else return a;
  }

  function decodeJson(string, empty) {
    var json = empty || {};

    if (string) {
      try {
        json = JSON.parse(string);
      } catch (e) {}
    }

    return json;
  }

  function isObject(a) {
    return Object.prototype.toString.call(a) === '[object Object]';
  }

  function isArray(a) {
    return Object.prototype.toString.call(a) === '[object Array]';
  }

  function extend(a, b, replase) {
    for (var i in b) {
      if (_typeof(b[i]) == 'object') {
        if (a[i] == undefined) a[i] = Object.prototype.toString.call(b[i]) == '[object Array]' ? [] : {};
        this.extend(a[i], b[i], replase);
      } else if (a[i] == undefined || replase) a[i] = b[i];
    }
  }

  function empty$1(a, b) {
    for (var i in b) {
      if (!a[i]) a[i] = b[i];
    }
  }

  function getKeys(a, add) {
    var k = add || [];

    for (var i in a) {
      k.push(i);
    }

    return k;
  }

  function getValues(a, add) {
    var k = add || [];

    for (var i in a) {
      k.push(a[i]);
    }

    return k;
  }

  function remove$2(from, need) {
    var inx = from.indexOf(need);
    if (inx >= 0) from.splice(inx, 1);
  }

  function clone(a) {
    return JSON.parse(JSON.stringify(a));
  }

  function insert(where, index, item) {
    where.splice(index, 0, item);
  }

  function destroy$7(arr) {
    var call_function = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'destroy';
    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var where = toArray(arr);

    for (var i = where.length - 1; i >= 0; i--) {
      if (where[i] && where[i][call_function]) where[i][call_function](value);
    }
  }

  function groupBy(xs, key) {
    return xs.reduce(function (rv, x) {
      (rv[x[key]] = rv[x[key]] || []).push(x);
      return rv;
    }, {});
  }

  function removeNoIncludes(where, items) {
    for (var i = where.length - 1; i >= 0; i--) {
      if (items.indexOf(where[i]) === -1) remove$2(where, where[i]);
    }

    return where;
  }

  var Arrays = {
    toObject: toObject,
    toArray: toArray,
    decodeJson: decodeJson,
    isObject: isObject,
    isArray: isArray,
    extend: extend,
    getKeys: getKeys,
    getValues: getValues,
    insert: insert,
    clone: clone,
    remove: remove$2,
    destroy: destroy$7,
    empty: empty$1,
    groupBy: groupBy,
    removeNoIncludes: removeNoIncludes
  };

  var html$Z = "<div class=\"wrap layer--height\">\n    <div class=\"wrap__left layer--height\"></div>\n    <div class=\"wrap__content layer--height\"></div>\n</div>";

  var html$Y = "<div class=\"menu\">\n\n    <img class=\"menu__logo\" src=\"./img/logo.svg\" />\n    \n    <div class=\"menu__case\">\n        <ul class=\"menu__list\">\n            <li class=\"menu__item selector\" data-action=\"search\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/browse.svg\" /></div>\n                <div class=\"menu__text\">\u041D\u0430\u0439\u0442\u0438</div>\n            </li>\n\n            <li class=\"menu__item selector\" data-action=\"movie\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/movie.svg\" /></div>\n                <div class=\"menu__text\">\u0424\u0438\u043B\u044C\u043C\u044B</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"tv\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/tv.svg\" /></div>\n                <div class=\"menu__text\">\u0421\u0435\u0440\u0438\u0430\u043B\u044B</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"catalog\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/catalog.svg\" /></div>\n                <div class=\"menu__text\">\u041A\u0430\u0442\u0430\u043B\u043E\u0433</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"relise\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/relise.svg\" /></div>\n                <div class=\"menu__text\">\u0420\u0435\u043B\u0438\u0437\u044B</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"anime\">\n                <div class=\"menu__ico\">\n                    <svg height=\"173\" viewBox=\"0 0 180 173\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M126 3C126 18.464 109.435 31 89 31C68.5655 31 52 18.464 52 3C52 2.4505 52.0209 1.90466 52.0622 1.36298C21.3146 15.6761 0 46.8489 0 83C0 132.706 40.2944 173 90 173C139.706 173 180 132.706 180 83C180 46.0344 157.714 14.2739 125.845 0.421326C125.948 1.27051 126 2.13062 126 3ZM88.5 169C125.779 169 156 141.466 156 107.5C156 84.6425 142.314 64.6974 122 54.0966C116.6 51.2787 110.733 55.1047 104.529 59.1496C99.3914 62.4998 94.0231 66 88.5 66C82.9769 66 77.6086 62.4998 72.4707 59.1496C66.2673 55.1047 60.3995 51.2787 55 54.0966C34.6864 64.6974 21 84.6425 21 107.5C21 141.466 51.2208 169 88.5 169Z\" fill=\"white\"/>\n                    <path d=\"M133 121.5C133 143.315 114.196 161 91 161C67.804 161 49 143.315 49 121.5C49 99.6848 67.804 116.5 91 116.5C114.196 116.5 133 99.6848 133 121.5Z\" fill=\"white\"/>\n                    <path d=\"M72 81C72 89.8366 66.1797 97 59 97C51.8203 97 46 89.8366 46 81C46 72.1634 51.8203 65 59 65C66.1797 65 72 72.1634 72 81Z\" fill=\"white\"/>\n                    <path d=\"M131 81C131 89.8366 125.18 97 118 97C110.82 97 105 89.8366 105 81C105 72.1634 110.82 65 118 65C125.18 65 131 72.1634 131 81Z\" fill=\"white\"/>\n                    </svg>\n                </div>\n                <div class=\"menu__text\">\u0410\u043D\u0438\u043C\u0435</div>\n            </li>\n        </ul>\n    </div>\n\n    <div class=\"menu__split\"></div>\n\n    <div class=\"menu__case\">\n        <ul class=\"menu__list\">\n            <li class=\"menu__item selector\" data-action=\"favorite\" data-type=\"book\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/bookmark.svg\" /></div>\n                <div class=\"menu__text\">\u0417\u0430\u043A\u043B\u0430\u0434\u043A\u0438</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"favorite\" data-type=\"like\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/like.svg\" /></div>\n                <div class=\"menu__text\">\u041D\u0440\u0430\u0432\u0438\u0442\u0441\u044F</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"favorite\" data-type=\"wath\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/time.svg\" /></div>\n                <div class=\"menu__text\">\u041F\u043E\u0437\u0436\u0435</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"favorite\" data-type=\"history\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/history.svg\" /></div>\n                <div class=\"menu__text\">\u0418\u0441\u0442\u043E\u0440\u0438\u044F</div>\n            </li>\n\n        </ul>\n    </div>\n\n    <div class=\"menu__split\"></div>\n\n    <div class=\"menu__case\">\n        <ul class=\"menu__list\">\n            <li class=\"menu__item selector\" data-action=\"settings\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/settings.svg\" /></div>\n                <div class=\"menu__text\">\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438</div>\n            </li>\n\n            <li class=\"menu__item selector\" data-action=\"about\">\n                <div class=\"menu__ico\"><img src=\"./img/icons/menu/info.svg\" /></div>\n                <div class=\"menu__text\">\u041E \u043B\u0430\u043C\u043F\u0435</div>\n            </li>\n        </ul>\n    </div>\n</div>";

  var html$X = "<div class=\"activitys layer--width\">\n    <div class=\"activitys__slides layer--height layer--width\"></div>\n</div>";

  var html$W = "<div class=\"activity layer--width\">\n    <div class=\"activity__body\"></div>\n    <div class=\"activity__loader\"></div>\n</div>";

  var html$V = "<div class=\"scroll\">\n    <div class=\"scroll__content\">\n        <div class=\"scroll__body\">\n            \n        </div>\n    </div>\n</div>";

  var html$U = "<div class=\"settings\">\n    <div class=\"settings__layer\"></div>\n    <div class=\"settings__content layer--height\">\n        <div class=\"settings__head\">\n            <div class=\"settings__title\">\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438</div>\n        </div>\n        <div class=\"settings__body\"></div>\n    </div>\n</div>";

  var html$T = "<div>\n    <div class=\"settings-folder selector\" data-component=\"account\">\n        <div class=\"settings-folder__icon\">\n            <svg height=\"169\" viewBox=\"0 0 172 169\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"85.765\" cy=\"47.5683\" r=\"15.5683\" stroke=\"white\" stroke-width=\"12\"/>\n                <path d=\"M121.53 112C121.53 92.2474 105.518 76.2349 85.7651 76.2349C66.0126 76.2349 50 92.2474 50 112\" stroke=\"white\" stroke-width=\"12\"/>\n                <rect x=\"44\" y=\"125\" width=\"84\" height=\"16\" rx=\"8\" fill=\"white\"/>\n                <rect x=\"6\" y=\"6\" width=\"160\" height=\"157\" rx=\"21\" stroke=\"white\" stroke-width=\"12\"/>\n            </svg>\n        </div>\n        <div class=\"settings-folder__name\">\u0410\u043A\u043A\u0430\u0443\u043D\u0442</div>\n    </div>\n    <div class=\"settings-folder selector\" data-component=\"interface\">\n        <div class=\"settings-folder__icon\">\n            <img src=\"./img/icons/settings/panel.svg\" />\n        </div>\n        <div class=\"settings-folder__name\">\u0418\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441</div>\n    </div>\n    <div class=\"settings-folder selector\" data-component=\"player\">\n        <div class=\"settings-folder__icon\">\n            <img src=\"./img/icons/settings/player.svg\" />\n        </div>\n        <div class=\"settings-folder__name\">\u041F\u043B\u0435\u0435\u0440</div>\n    </div>\n    <div class=\"settings-folder selector\" data-component=\"server\">\n        <div class=\"settings-folder__icon\">\n            <img src=\"./img/icons/settings/server.svg\" />\n        </div>\n        <div class=\"settings-folder__name\">TorrServer</div>\n    </div>\n    <div class=\"settings-folder selector\" data-component=\"plugins\">\n        <div class=\"settings-folder__icon\">\n            <svg height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"21\" height=\"21\" rx=\"2\" fill=\"white\"/>\n            <mask id=\"path-2-inside-1_154:24\" fill=\"white\">\n            <rect x=\"2\" y=\"27\" width=\"17\" height=\"17\" rx=\"2\"/>\n            </mask>\n            <rect x=\"2\" y=\"27\" width=\"17\" height=\"17\" rx=\"2\" stroke=\"white\" stroke-width=\"6\" mask=\"url(#path-2-inside-1_154:24)\"/>\n            <rect x=\"27\" y=\"2\" width=\"17\" height=\"17\" rx=\"2\" fill=\"white\"/>\n            <rect x=\"27\" y=\"34\" width=\"17\" height=\"3\" fill=\"white\"/>\n            <rect x=\"34\" y=\"44\" width=\"17\" height=\"3\" transform=\"rotate(-90 34 44)\" fill=\"white\"/>\n            </svg>\n        </div>\n        <div class=\"settings-folder__name\">\u041F\u043B\u0430\u0433\u0438\u043D\u044B</div>\n    </div>\n    <div class=\"settings-folder selector\" data-component=\"more\">\n        <div class=\"settings-folder__icon\">\n            <img src=\"./img/icons/settings/more.svg\" />\n        </div>\n        <div class=\"settings-folder__name\">\u041E\u0441\u0442\u0430\u043B\u044C\u043D\u043E\u0435</div>\n    </div>\n    \n</div>";

  var html$S = "<div>\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"scroll_type\">\n        <div class=\"settings-param__name\">\u0422\u0438\u043F \u0441\u043A\u0440\u043E\u043B\u0438\u043D\u0433\u0430</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"card_views_type\">\n        <div class=\"settings-param__name\">\u0422\u0438\u043F \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u041F\u043E \u043C\u0435\u0440\u0435 \u0441\u043A\u0440\u043E\u043B\u043B\u0438\u043D\u0433\u0430 \u043B\u0435\u043D\u0442\u044B, \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 \u0431\u0443\u0434\u0443\u0442 \u043F\u043E\u0434\u0433\u0440\u0443\u0436\u0430\u0442\u044C\u0441\u044F \u043F\u043E\u0441\u0442\u0435\u043F\u0435\u043D\u043D\u043E \u0438\u043B\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044C\u0441\u044F \u0432\u0441\u0435</div>\n    </div>\n</div>";

  var html$R = "<div>\n    <div class=\"settings-param selector is--player\" data-type=\"toggle\" data-name=\"player\">\n        <div class=\"settings-param__name\">\u0422\u0438\u043F \u043F\u043B\u0435\u0435\u0440\u0430</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u041A\u0430\u043A\u0438\u043C \u043F\u043B\u0435\u0435\u0440\u043E\u043C \u0432\u043E\u0441\u043F\u0440\u043E\u0438\u0437\u0432\u043E\u0434\u0438\u0442\u044C</div>\n    </div>\n    \n    <div class=\"settings-param selector is--android\" data-type=\"button\" data-name=\"reset_player\" data-static=\"true\">\n        <div class=\"settings-param__name\">\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u043F\u043B\u0435\u0435\u0440 \u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0421\u0431\u0440\u0430\u0441\u044B\u0432\u0430\u0435\u0442 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0439 Android \u043F\u043B\u0435\u0435\u0440 \u0432 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0438</div>\n    </div>\n    \n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"playlist_next\">\n        <div class=\"settings-param__name\">\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F \u0441\u0435\u0440\u0438\u044F</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u043F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0430\u0442\u044C \u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E \u0441\u0435\u0440\u0438\u044E \u043F\u0440\u0438 \u043E\u043A\u043E\u043D\u0447\u0430\u043D\u0438\u0435 \u0442\u0435\u043A\u0443\u0449\u0435\u0439</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"player_timecode\">\n        <div class=\"settings-param__name\">\u0422\u0430\u0439\u043C\u043A\u043E\u0434</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C \u0441 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0435\u0433\u043E \u043C\u0435\u0441\u0442\u0430 \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"player_scale_method\">\n        <div class=\"settings-param__name\">\u041C\u0435\u0442\u043E\u0434 \u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u041A\u0430\u043A\u0438\u043C \u043E\u0431\u0440\u0430\u0437\u043E\u043C \u043F\u0440\u043E\u0438\u0437\u0432\u043E\u0434\u0438\u0442\u044C \u0432\u044B\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u044F \u0434\u043B\u044F \u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u0438\u0434\u0435\u043E</div>\n    </div>\n    \n    <div class=\"is--has_subs\">\n        <div class=\"settings-param-title\"><span>\u0421\u0443\u0431\u0442\u0438\u0442\u0440\u044B</span></div>\n        \n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"subtitles_size\">\n            <div class=\"settings-param__name\">\u0420\u0430\u0437\u043C\u0435\u0440</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\"></div>\n        </div>\n        \n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"subtitles_stroke\">\n            <div class=\"settings-param__name\">\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u043E\u043A\u0430\u043D\u0442\u043E\u0432\u043A\u0443</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">\u0421\u0443\u0431\u0442\u0438\u0442\u0440\u044B \u0431\u0443\u0434\u0443\u0442 \u043E\u0431\u0432\u0435\u0434\u0435\u043D\u044B \u0447\u0435\u0440\u043D\u044B\u043C \u0446\u0432\u0435\u0442\u043E\u043C \u0434\u043B\u044F \u0443\u043B\u0443\u0447\u0448\u0435\u043D\u0438\u044F \u0447\u0438\u0442\u0430\u0435\u043C\u043E\u0441\u0442\u0438</div>\n        </div>\n        \n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"subtitles_backdrop\">\n            <div class=\"settings-param__name\">\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u043F\u043E\u0434\u043B\u043E\u0436\u043A\u0443</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">\u0421\u0443\u0431\u0442\u0438\u0442\u0440\u044B \u0431\u0443\u0434\u0443\u0442 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0442\u044C\u0441\u044F \u043D\u0430 \u043F\u043E\u043B\u0443\u043F\u0440\u043E\u0437\u0440\u0430\u0447\u043D\u043E\u0439 \u043F\u043E\u0434\u043B\u043E\u0436\u043A\u0435 \u0434\u043B\u044F \u0443\u043B\u0443\u0447\u0448\u0435\u043D\u0438\u044F \u0447\u0438\u0442\u0430\u0435\u043C\u043E\u0441\u0442\u0438</div>\n        </div>\n    </div>  \n</div>";

  var html$Q = "<div>\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"source\">\n        <div class=\"settings-param__name\">\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0439 \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u041E\u0442\u043A\u0443\u0434\u0430 \u0431\u0440\u0430\u0442\u044C \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E \u043E \u0444\u0438\u043B\u044C\u043C\u0430\u0445.</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"tmdb_lang\">\n        <div class=\"settings-param__name\">TMDB</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u041D\u0430 \u043A\u0430\u043A\u043E\u043C \u044F\u0437\u044B\u043A\u0435 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0442\u044C \u0434\u0430\u043D\u043D\u044B\u0435 \u0441 TMDB</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"pages_save_total\">\n        <div class=\"settings-param__name\">\u0421\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u0442\u0440\u0430\u043D\u0438\u0446 \u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0432 \u043F\u0430\u043C\u044F\u0442\u0438</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0425\u0440\u0430\u043D\u0438\u0442 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B \u0432 \u0442\u043E\u043C \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435, \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\u043C \u0432\u044B \u0435\u0451 \u043F\u043E\u043A\u0438\u043D\u0443\u043B\u0438</div>\n    </div>\n\n    <div class=\"settings-param-title\"><span>\u0421\u043A\u0440\u0438\u043D\u0441\u0435\u0439\u0432\u0435\u0440</span></div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"screensaver\">\n        <div class=\"settings-param__name\">\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0437\u0430\u0441\u0442\u0430\u0432\u043A\u0443 \u043F\u0440\u0438 \u0431\u0435\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n    \n    <div class=\"settings-param-title\"><span>\u0415\u0449\u0435</span></div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"navigation_type\">\n        <div class=\"settings-param__name\">\u0422\u0438\u043F \u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"input\" data-name=\"device_name\" placeholder=\"\u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440: \u041C\u043E\u044F \u041B\u0430\u043C\u043F\u0430\">\n        <div class=\"settings-param__name\">\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n</div>";

  var html$P = "<div>\n    <div class=\"settings-param selector\" data-name=\"plugins\" data-static=\"true\" data-notice=\"\u0414\u043B\u044F \u0440\u0430\u0431\u043E\u0442\u044B \u043F\u043B\u0430\u0433\u0438\u043D\u0430, \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E \u043F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435.\">\n        <div class=\"settings-param__name\">\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043F\u043B\u0430\u0433\u0438\u043D</div>\n        <div class=\"settings-param__descr\">\u0414\u043B\u044F \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u044F \u043F\u043B\u0430\u0433\u0438\u043D\u0430 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u043A\u043D\u043E\u043F\u043A\u0443 OK</div>\n    </div>\n</div>";

  var html$O = "<div>\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"cloud_use\">\n        <div class=\"settings-param__name\">\u0421\u0438\u043D\u0445\u0440\u043E\u043D\u0438\u0437\u0430\u0446\u0438\u044F</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0421\u0438\u043D\u0445\u0440\u043E\u043D\u0438\u0437\u0430\u0446\u0438\u044F \u0434\u0430\u0451\u0442 \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u044C \u0441\u0438\u043D\u0445\u0440\u043E\u043D\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0432\u0430\u0448\u0438 \u0437\u0430\u043A\u043B\u0430\u0434\u043A\u0438, \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432, \u043C\u0435\u0442\u043A\u0438 \u0438 \u0442\u0430\u0439\u043C-\u043A\u043E\u0434\u044B. \u0418\u043D\u0441\u0442\u0440\u0443\u043A\u0446\u0438\u044F \u043F\u043E \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044E https://github.com/yumata/lampa/wiki</div>\n    </div>\n\n    <div class=\"settings-param-title\"><span>\u0410\u0432\u0442\u043E\u0440\u0438\u0437\u0430\u0446\u0438\u044F</span></div>\n\n    <div class=\"settings-param selector\" data-type=\"input\" data-name=\"cloud_token\" placeholder=\"\u041D\u0435 \u0443\u043A\u0430\u0437\u0430\u043D\">\n        <div class=\"settings-param__name\">Token</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param-title\"><span>\u0421\u0442\u0430\u0442\u0443\u0441</span></div>\n\n    <div class=\"settings-param selector settings--cloud-status\" data-static=\"true\">\n        <div class=\"settings-param__name\"></div>\n        <div class=\"settings-param__descr\"></div>\n    </div>\n</div>";

  var html$N = "<div>\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"account_use\">\n        <div class=\"settings-param__name\">\u0421\u0438\u043D\u0445\u0440\u043E\u043D\u0438\u0437\u0430\u0446\u0438\u044F</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0421\u0438\u043D\u0445\u0440\u043E\u043D\u0438\u0437\u0430\u0446\u0438\u044F \u0441 \u0441\u0435\u0440\u0432\u0438\u0441\u043E\u043C CUB, \u0441\u0438\u043D\u0445\u0440\u043E\u043D\u0438\u0437\u0430\u0446\u0438\u044F \u0432\u0430\u0448\u0438\u0445 \u0437\u0430\u043A\u043B\u0430\u0434\u043E\u043A, \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432, \u043C\u0435\u0442\u043A\u0438 \u0438 \u0442\u0430\u0439\u043C-\u043A\u043E\u0434\u044B. \u0421\u0430\u0439\u0442: https://cub.watch</div>\n    </div>\n\n    <div class=\"settings-param-title settings--account-user hide\"><span>\u0410\u043A\u043A\u0430\u0443\u043D\u0442</span></div>\n\n    <div class=\"settings-param selector settings--account-user settings--account-user-info hide\" data-static=\"true\">\n        <div class=\"settings-param__name\">\u0412\u043E\u0448\u043B\u0438 \u043A\u0430\u043A</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector settings--account-user settings--account-user-profile hide\" data-static=\"true\">\n        <div class=\"settings-param__name\">\u041F\u0440\u043E\u0444\u0438\u043B\u044C</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector settings--account-user settings--account-user-out hide\" data-static=\"true\">\n        <div class=\"settings-param__name\">\u0412\u044B\u0439\u0442\u0438 \u0438\u0437 \u0430\u043A\u043A\u0430\u0443\u043D\u0442\u0430</div>\n    </div>\n\n    <div class=\"settings-param-title settings--account-signin\"><span>\u0410\u0432\u0442\u043E\u0440\u0438\u0437\u0430\u0446\u0438\u044F</span></div>\n\n    <div class=\"settings-param selector settings--account-signin\" data-type=\"input\" data-name=\"account_email\" placeholder=\"\u041D\u0435 \u0443\u043A\u0430\u0437\u0430\u043D\">\n        <div class=\"settings-param__name\">Email</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector settings--account-signin\" data-type=\"input\" data-string=\"true\" data-name=\"account_password\" placeholder=\"\u041D\u0435 \u0443\u043A\u0430\u0437\u0430\u043D\">\n        <div class=\"settings-param__name\">\u041F\u0430\u0440\u043E\u043B\u044C</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param-title\"><span>\u0421\u0442\u0430\u0442\u0443\u0441</span></div>\n\n    <div class=\"settings-param selector settings--account-status\" data-static=\"true\">\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\"></div>\n    </div>\n</div>";

  var html$M = "<div>\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"torrserver_use_link\">\n        <div class=\"settings-param__name\">\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param-title\"><span>\u0421\u0441\u044B\u043B\u043A\u0438</span></div>\n\n    <div class=\"settings-param selector\" data-type=\"input\" data-name=\"torrserver_url\" placeholder=\"\u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440: 192.168.\u0445\">\n        <div class=\"settings-param__name\">\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F \u0441\u0441\u044B\u043B\u043A\u0430</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u043E\u0441\u043D\u043E\u0432\u043D\u0443\u044E \u0441\u0441\u044B\u043B\u043A\u0443 \u043D\u0430 \u0441\u043A\u0440\u0438\u043F\u0442 TorrServer</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"input\" data-name=\"torrserver_url_two\" placeholder=\"\u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440: 192.168.\u0445\">\n        <div class=\"settings-param__name\">\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u0430\u044F \u0441\u0441\u044B\u043B\u043A\u0430</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u0443\u044E \u0441\u0441\u044B\u043B\u043A\u0443 \u043D\u0430 \u0441\u043A\u0440\u0438\u043F\u0442 TorrServer</div>\n    </div>\n    \n    <div class=\"settings-param-title\"><span>\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E</span></div>\n\n    <div class=\"settings-param selector is--android\" data-type=\"toggle\" data-name=\"internal_torrclient\">\n        <div class=\"settings-param__name\">\u0412\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0439 \u043A\u043B\u0438\u0435\u043D\u0442</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0439 JS \u043A\u043B\u0438\u0435\u043D\u0442 TorrServe, \u0438\u043D\u0430\u0447\u0435 \u0437\u0430\u043F\u0443\u0441\u043A\u0430\u0435\u0442\u0441\u044F \u0441\u0438\u0441\u0442\u0435\u043C\u043D\u044B\u0439</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"torrserver_savedb\">\n        <div class=\"settings-param__name\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0432 \u0431\u0430\u0437\u0443</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0422\u043E\u0440\u0440\u0435\u043D\u0442 \u0431\u0443\u0434\u0435\u0442 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D \u0432 \u0431\u0430\u0437\u0443 TorrServer</div>\n    </div>\n    \n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"torrserver_preload\">\n        <div class=\"settings-param__name\">\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0431\u0443\u0444\u0435\u0440 \u043F\u0440\u0435\u0434.\u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">\u0414\u043E\u0436\u0438\u0434\u0430\u0442\u044C\u0441\u044F \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0431\u0443\u0444\u0435\u0440\u0430 \u043F\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 TorrServer \u043F\u0435\u0440\u0435\u0434 \u043F\u0440\u043E\u0438\u0433\u0440\u044B\u0432\u0430\u043D\u0438\u0435\u043C</div>\n    </div>\n\n    <div class=\"settings-param-title\"><span>\u0410\u0432\u0442\u043E\u0440\u0438\u0437\u0430\u0446\u0438\u044F</span></div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"torrserver_auth\">\n        <div class=\"settings-param__name\">\u0412\u0445\u043E\u0434 \u043F\u043E \u043F\u0430\u0440\u043E\u043B\u044E</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"input\" data-name=\"torrserver_login\" placeholder=\"\u041D\u0435 \u0443\u043A\u0430\u0437\u0430\u043D\">\n        <div class=\"settings-param__name\">\u041B\u043E\u0433\u0438\u043D</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"input\" data-name=\"torrserver_password\" data-string=\"true\" placeholder=\"\u041D\u0435 \u0443\u043A\u0430\u0437\u0430\u043D\">\n        <div class=\"settings-param__name\">\u041F\u0430\u0440\u043E\u043B\u044C</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n</div>";

  var html$L = "<div class=\"items-line\">\n    <div class=\"items-line__head\">\n        <div class=\"items-line__title\">{title}</div>\n    </div>\n    <div class=\"items-line__body\"></div>\n</div>";

  var html$K = "<div class=\"card selector\">\n    <div class=\"card__icons\">\n        <div class=\"card__icons-inner\"></div>\n    </div>\n    <div class=\"card__view\">\n        <img src=\"./img/img_load.svg\" class=\"card__img\" />\n    </div>\n    <div class=\"card__title\"><span>{title}</span></div>\n</div>";

  var html$J = "<div class=\"player\">\n    \n</div>";

  var html$I = "<div class=\"player-panel\">\n\n    <div class=\"player-panel__body\">\n        <div class=\"player-panel__timeline selector\">\n            <div class=\"player-panel__peding\"></div>\n            <div class=\"player-panel__position\"><div></div></div>\n            <div class=\"player-panel__time hide\"></div>\n        </div>\n\n        <div class=\"player-panel__line\">\n            <div class=\"player-panel__timenow\"></div>\n            <div class=\"player-panel__timeend\"></div>\n        </div>\n\n        <div class=\"player-panel__line\">\n            <div class=\"player-panel__left\">\n                <div class=\"player-panel__prev button selector\"></div>\n                <div class=\"player-panel__next button selector\"></div>\n            </div>\n            <div class=\"player-panel__center\">\n                <div class=\"player-panel__tstart button selector\">\n                    <svg width=\"35\" height=\"24\" viewBox=\"0 0 35 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M14.75 10.2302C13.4167 11 13.4167 12.9245 14.75 13.6943L32 23.6536C33.3333 24.4234 35 23.4612 35 21.9216L35 2.00298C35 0.463381 33.3333 -0.498867 32 0.270933L14.75 10.2302Z\" fill=\"currentColor\"/>\n                    <path d=\"M1.75 10.2302C0.416665 11 0.416667 12.9245 1.75 13.6943L19 23.6536C20.3333 24.4234 22 23.4612 22 21.9216L22 2.00298C22 0.463381 20.3333 -0.498867 19 0.270933L1.75 10.2302Z\" fill=\"currentColor\"/>\n                    <rect width=\"6\" height=\"24\" rx=\"2\" transform=\"matrix(-1 0 0 1 6 0)\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n                <div class=\"player-panel__rprev button selector\">\n                    <svg width=\"35\" height=\"25\" viewBox=\"0 0 35 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M14 10.7679C12.6667 11.5377 12.6667 13.4622 14 14.232L31.25 24.1913C32.5833 24.9611 34.25 23.9989 34.25 22.4593L34.25 2.5407C34.25 1.0011 32.5833 0.0388526 31.25 0.808653L14 10.7679Z\" fill=\"currentColor\"/>\n                    <path d=\"M0.999998 10.7679C-0.333335 11.5377 -0.333333 13.4622 1 14.232L18.25 24.1913C19.5833 24.9611 21.25 23.9989 21.25 22.4593L21.25 2.5407C21.25 1.0011 19.5833 0.0388526 18.25 0.808653L0.999998 10.7679Z\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n                <div class=\"player-panel__playpause button selector\"></div>\n                <div class=\"player-panel__rnext button selector\">\n                    <svg width=\"35\" height=\"25\" viewBox=\"0 0 35 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M20.25 10.7679C21.5833 11.5377 21.5833 13.4622 20.25 14.232L3 24.1913C1.66666 24.9611 -6.72981e-08 23.9989 0 22.4593L8.70669e-07 2.5407C9.37967e-07 1.0011 1.66667 0.0388526 3 0.808653L20.25 10.7679Z\" fill=\"currentColor\"/>\n                    <path d=\"M33.25 10.7679C34.5833 11.5377 34.5833 13.4622 33.25 14.232L16 24.1913C14.6667 24.9611 13 23.9989 13 22.4593L13 2.5407C13 1.0011 14.6667 0.0388526 16 0.808653L33.25 10.7679Z\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n                <div class=\"player-panel__tend button selector\">\n                    <svg width=\"35\" height=\"24\" viewBox=\"0 0 35 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M20.25 10.2302C21.5833 11 21.5833 12.9245 20.25 13.6943L3 23.6536C1.66666 24.4234 -6.72981e-08 23.4612 0 21.9216L8.70669e-07 2.00298C9.37967e-07 0.463381 1.66667 -0.498867 3 0.270933L20.25 10.2302Z\" fill=\"currentColor\"/>\n                    <path d=\"M33.25 10.2302C34.5833 11 34.5833 12.9245 33.25 13.6943L16 23.6536C14.6667 24.4234 13 23.4612 13 21.9216L13 2.00298C13 0.463381 14.6667 -0.498867 16 0.270933L33.25 10.2302Z\" fill=\"currentColor\"/>\n                    <rect x=\"29\" width=\"6\" height=\"24\" rx=\"2\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n            </div>\n            <div class=\"player-panel__right\">\n                <div class=\"player-panel__quality button selector\">auto</div>\n                <div class=\"player-panel__playlist button selector\"></div>\n                <div class=\"player-panel__subs button selector hide\"></div>\n                <div class=\"player-panel__tracks button selector hide\">\n                    <svg width=\"24\" height=\"31\" viewBox=\"0 0 24 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect x=\"5\" width=\"14\" height=\"23\" rx=\"7\" fill=\"currentColor\"/>\n                    <path d=\"M3.39272 18.4429C3.08504 17.6737 2.21209 17.2996 1.44291 17.6073C0.673739 17.915 0.299615 18.7879 0.607285 19.5571L3.39272 18.4429ZM23.3927 19.5571C23.7004 18.7879 23.3263 17.915 22.5571 17.6073C21.7879 17.2996 20.915 17.6737 20.6073 18.4429L23.3927 19.5571ZM0.607285 19.5571C2.85606 25.179 7.44515 27.5 12 27.5V24.5C8.55485 24.5 5.14394 22.821 3.39272 18.4429L0.607285 19.5571ZM12 27.5C16.5549 27.5 21.1439 25.179 23.3927 19.5571L20.6073 18.4429C18.8561 22.821 15.4451 24.5 12 24.5V27.5Z\" fill=\"currentColor\"/>\n                    <rect x=\"10\" y=\"25\" width=\"4\" height=\"6\" rx=\"2\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n                <div class=\"player-panel__size button selector\"></div>\n            </div>\n        </div>\n    </div>\n</div>";

  var html$H = "<div class=\"player-video\">\n    <div class=\"player-video__display\"></div>\n    <div class=\"player-video__loader\"></div>\n    <div class=\"player-video__paused hide\">\n        <svg width=\"19\" height=\"25\" viewBox=\"0 0 19 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"6\" height=\"25\" rx=\"2\" fill=\"white\"/>\n            <rect x=\"13\" width=\"6\" height=\"25\" rx=\"2\" fill=\"white\"/>\n        </svg>\n    </div>\n    <div class=\"player-video__subtitles hide\">\n        <div class=\"player-video__subtitles-text\"></div>\n    </div>\n</div>";

  var html$G = "<div class=\"player-info\">\n    <div class=\"player-info__body\">\n        <div class=\"player-info__line\">\n            <div class=\"player-info__name\"></div>\n            <div class=\"player-info__time\"><span class=\"time--clock\"></span></div>\n        </div>\n\n        <div class=\"player-info__values\">\n            <div class=\"value--size\">\n                <span>\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...</span>\n            </div>\n            <div class=\"value--stat\">\n                <span></span>\n            </div>\n            <div class=\"value--speed\">\n                <span></span>\n            </div>\n        </div>\n\n        <div class=\"player-info__error hide\"></div>\n    </div>\n</div>";

  var html$F = "<div class=\"selectbox\">\n    <div class=\"selectbox__layer\"></div>\n    <div class=\"selectbox__content layer--height\">\n        <div class=\"selectbox__head\">\n            <div class=\"selectbox__title\"></div>\n        </div>\n        <div class=\"selectbox__body\"></div>\n    </div>\n</div>";

  var html$E = "<div class=\"selectbox-item selector\">\n    <div class=\"selectbox-item__title\">{title}</div>\n    <div class=\"selectbox-item__subtitle\">{subtitle}</div>\n</div>";

  var html$D = "<div class=\"info layer--width\">\n    <div class=\"info__title\"></div>\n    <div class=\"info__title-original\"></div>\n</div>";

  var html$C = "<div>\n    <div class=\"simple-button selector filter--search\">\n            <svg version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 512 512\" style=\"enable-background:new 0 0 512 512;\" xml:space=\"preserve\">\n        <g>\n            <path fill=\"currentColor\" d=\"M225.474,0C101.151,0,0,101.151,0,225.474c0,124.33,101.151,225.474,225.474,225.474\n                c124.33,0,225.474-101.144,225.474-225.474C450.948,101.151,349.804,0,225.474,0z M225.474,409.323\n                c-101.373,0-183.848-82.475-183.848-183.848S124.101,41.626,225.474,41.626s183.848,82.475,183.848,183.848\n                S326.847,409.323,225.474,409.323z\"/>\n        </g>\n        <g>\n            <path fill=\"currentColor\" d=\"M505.902,476.472L386.574,357.144c-8.131-8.131-21.299-8.131-29.43,0c-8.131,8.124-8.131,21.306,0,29.43l119.328,119.328\n                c4.065,4.065,9.387,6.098,14.715,6.098c5.321,0,10.649-2.033,14.715-6.098C514.033,497.778,514.033,484.596,505.902,476.472z\"/>\n        </g>\n\n        </svg>\n\n        <span>\u0423\u0442\u043E\u0447\u043D\u0438\u0442\u044C</span>\n    </div>\n    <div class=\"simple-button simple-button--filter selector filter--sort\">\n        <span>\u0421\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C</span><div class=\"hide\"></div>\n    </div>\n\n    <div class=\"simple-button simple-button--filter selector filter--filter\">\n        <span>\u0424\u0438\u043B\u044C\u0442\u0440</span><div class=\"hide\"></div>\n    </div>\n</div>";

  var html$B = "<div class=\"card-more selector\">\n    <div class=\"card-more__inner\">\n        <div class=\"card-more__title\">\n            \u0415\u0449\u0435\n        </div>\n    </div>\n</div>";

  var html$A = "<div class=\"search\">\n    <div class=\"search__left\">\n        <div class=\"search__title\">\u041F\u043E\u0438\u0441\u043A</div>\n        <div class=\"search__input\">\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043A\u0441\u0442...</div>\n        <div class=\"search__keypad\"><div class=\"simple-keyboard\"></div></div>\n        <div class=\"search__history\"></div>\n    </div>\n    <div class=\"search__results\"></div>\n</div>";

  var html$z = "<div class=\"settings-input\">\n    <div class=\"settings-input__content\">\n        <div class=\"settings-input__input\"></div>\n\n        <div class=\"simple-keyboard\"></div>\n\n        <div class=\"settings-input__links\">\u0418\u0437\u0431\u0440\u0430\u043D\u043D\u043E\u0435</div>\n    </div>\n</div>";

  var html$y = "<div class=\"modal\">\n    <div class=\"modal__content\">\n        <div class=\"modal__head\">\n            <div class=\"modal__title\">{title}</div>\n        </div>\n        <div class=\"modal__body\">\n            \n        </div>\n    </div>\n</div>";

  var html$x = "<div class=\"modal-loading\">\n    \n</div>";

  var html$w = "<div class=\"modal-pending\">\n    <div class=\"modal-pending__loading\"></div>\n    <div class=\"modal-pending__text\">{text}</div>\n</div>";

  var html$v = "<div class=\"empty\">\n    <div class=\"empty__img selector\"></div>\n    <div class=\"empty__title\">{title}</div>\n    <div class=\"empty__descr\">{descr}</div>\n</div>";

  var html$u = "<div class=\"about\">\n    <div>\u041F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u043F\u043E\u043B\u043D\u043E\u0441\u0442\u044C\u044E \u0431\u0435\u0441\u043F\u043B\u0430\u0442\u043D\u043E\u0435 \u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442 \u043F\u0443\u0431\u043B\u0438\u0447\u043D\u044B\u0435 \u0441\u0441\u044B\u043B\u043A\u0438 \u0434\u043B\u044F \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0438 \u043E \u0444\u0438\u043B\u044C\u043C\u0430\u0445, \u043D\u043E\u0432\u0438\u043D\u043A\u0430\u0445, \u043F\u043E\u043F\u0443\u043B\u044F\u0440\u043D\u044B\u0445 \u0444\u0438\u043B\u044C\u043C\u043E\u0432 \u0438 \u0442.\u0434. \u0412\u0441\u044F \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u0430\u044F \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0438\u0441\u043A\u043B\u044E\u0447\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0432 \u043F\u043E\u0437\u043D\u0430\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0446\u0435\u043B\u044F\u0445, \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442 \u0441\u0432\u043E\u0438 \u0441\u043E\u0431\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044B \u0434\u043B\u044F \u0440\u0430\u0441\u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0435\u043D\u0438\u044F \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0438.</div>\n\n\n    <div class=\"about__contacts\">\n        <div>\n            <small>\u041D\u0430\u0448 \u043A\u0430\u043D\u0430\u043B</small><br>\n            @lampa_channel\n        </div>\n\n        <div>\n            <small>\u0413\u0440\u0443\u043F\u043F\u0430</small><br>\n            @lampa_group\n        </div>\n\n        <div>\n            <small>\u0412\u0435\u0440\u0441\u0438\u044F</small><br>\n            1.0.4\n        </div>\n    </div>\n\n    <div class=\"about__contacts\">\n        <div>\n            <small>\u0414\u043E\u043D\u0430\u0442</small><br>\n            www.boosty.to/lampatv\n        </div>\n    </div>\n</div>";

  var html$t = "<div class=\"error\">\n    <div class=\"error__ico\"></div>\n    <div class=\"error__body\">\n        <div class=\"error__title\">{title}</div>\n        <div class=\"error__text\">{text}</div>\n    </div>\n</div>";

  var html$s = "<div class=\"search-box search\">\n    <div class=\"search-box__input search__input\"></div>\n    <div class=\"search-box__keypad search__keypad\"><div class=\"simple-keyboard\"></div></div>\n</div>";

  var html$r = "<div class=\"console\">\n    \n</div>";

  var html$q = "\n<svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M6.54893 0.927035C6.84828 0.00572455 8.15169 0.00572705 8.45104 0.927038L9.40835 3.87334C9.54223 4.28537 9.92618 4.56433 10.3594 4.56433H13.4573C14.4261 4.56433 14.8288 5.80394 14.0451 6.37334L11.5388 8.19426C11.1884 8.4489 11.0417 8.90027 11.1756 9.31229L12.1329 12.2586C12.4322 13.1799 11.3778 13.946 10.594 13.3766L8.08777 11.5557C7.73728 11.3011 7.26268 11.3011 6.9122 11.5557L4.40592 13.3766C3.6222 13.946 2.56773 13.1799 2.86708 12.2586L3.82439 9.31229C3.95827 8.90027 3.81161 8.4489 3.46112 8.19426L0.954841 6.37334C0.171128 5.80394 0.573906 4.56433 1.54263 4.56433H4.64056C5.07378 4.56433 5.45774 4.28536 5.59161 3.87334L6.54893 0.927035Z\" fill=\"currentColor\"/>\n</svg>\n";

  var html$p = "<div class=\"time-line\" data-hash=\"{hash}\">\n    <div style=\"width: {percent}%\"></div>\n</div>";

  var html$o = "<div class=\"empty empty--list\">\n    <div class=\"empty__title\">\u041F\u0443\u0441\u0442\u043E</div>\n    <div class=\"empty__descr\">\u041F\u043E \u0432\u0430\u0448\u0435\u043C\u0443 \u0444\u0438\u043B\u044C\u0442\u0440\u0443 \u043D\u0438\u0447\u0435\u0433\u043E \u043D\u0435 \u043D\u0430\u0448\u043B\u043E\u0441\u044C, \u0443\u0442\u043E\u0447\u043D\u0438\u0442\u0435 \u0444\u0438\u043B\u044C\u0442\u0440.</div>\n</div>";

  var html$n = "<div class=\"screensaver\">\n    <div class=\"screensaver__slides\">\n        <img class=\"screensaver__slides-one\" />\n        <img class=\"screensaver__slides-two\" />\n    </div>\n    <div class=\"screensaver__gradient\"></div>\n    <div class=\"screensaver__title\">\n        <div class=\"screensaver__title-name\"></div>\n        <div class=\"screensaver__title-tagline\"></div>\n    </div>\n    <div class=\"screensaver__datetime\">\n        <div class=\"screensaver__datetime-time\"><span class=\"time--clock\"></span></div>\n        <div class=\"screensaver__datetime-date\"><span class=\"time--full\"></span></div>\n    </div>\n</div>";

  var html$m = "<div class=\"view\">\n    <div class=\"view__body\">\n        <div class=\"view__title\">{title}</div>\n        <div class=\"view__details\">\n            <span>{year}</span>\n            <span>{time}</span>\n            <span>{genres}</span>\n        </div>\n        <div class=\"view__descr\">{descr}</div>\n\n        <div class=\"view__favorite\">\n            <div data-name=\"book\" class=\"selector\"></div>\n            <div data-name=\"like\" class=\"selector\"></div>\n            <div data-name=\"wath\" class=\"selector\"></div>\n        </div>\n    </div>\n\n    <div class=\"view__right\">\n        <div class=\"card__view\">\n            <img class=\"card__img\" src=\"{img}\" />\n\n            <div class=\"card__vote\">{vote}</div>\n        </div>\n    </div>\n</div>";

  var html$l = "<div class=\"events__body\">\n    <div class=\"events__title selector\">\u0421\u043E\u0431\u044B\u0442\u0438\u044F</div>\n    <div class=\"events__descr\">\u042D\u0442\u043E API \u0430\u0434\u0440\u0435\u0441\u0430 \u043D\u0430 \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u0431\u0443\u0434\u0443\u0442 \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u044B \u0434\u0430\u043D\u043D\u044B\u0435 \u043E \u0444\u0438\u043B\u044C\u043C\u0435, \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0444\u0438\u043B\u044C\u043C\u0430, \u0433\u043E\u0434 \u0432\u044B\u043F\u0443\u0441\u043A\u0430 \u0438 ID \u0444\u0438\u043B\u044C\u043C\u0430. \u0412 \u043E\u0442\u0432\u0435\u0442\u0435 \u0444\u043E\u0440\u043C\u0438\u0440\u0443\u0435\u0442\u0441\u044F HTML \u0441\u0442\u0440\u0430\u043D\u0438\u0447\u043A\u0430 \u0438 \u0432\u044B\u0432\u043E\u0434\u0438\u0442\u0441\u044F \u0432 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B. \u0420\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u0438 \u0430\u0434\u0440\u0435\u0441\u043E\u0432 \u043C\u043E\u0433\u0443\u0442 \u0432\u044B\u0432\u043E\u0434\u0438\u0442\u044C \u043B\u044E\u0431\u043E\u0439 \u043A\u043E\u043D\u0442\u0435\u043D\u0442, \u0430\u043A\u0442\u0435\u0440\u044B \u0444\u0438\u043B\u044C\u043C\u0430, \u043F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0435 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0444\u0438\u043B\u044C\u043C\u0430, \u0442\u0440\u0435\u0439\u043B\u0435\u0440\u044B \u0438 \u043F\u043E\u0434\u043E\u0431\u043D\u043E\u0435.</div>\n\n    <div class=\"events__items\">\n        <div class=\"events__item events__item--add selector\">\n            <div class=\"events__item-box\"></div>\n            <div class=\"events__item-overlay\">\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0441\u043E\u0431\u044B\u0442\u0438\u0435</div>\n        </div>\n    </div>\n</div>";

  var html$k = "<div class=\"events__item selector\">\n    <div class=\"events__item-box\"></div>\n    <div class=\"events__item-inner\">\n        <div class=\"events__item-name\"></div>\n        <div class=\"events__item-label\">\u0421\u0441\u044B\u043B\u043A\u0430</div>\n        <div class=\"events__item-url\"></div>\n    </div>\n</div>";

  var html$j = "<div class=\"torrent-item selector\">\n    <div class=\"torrent-item__title\">{title}</div>\n    <div class=\"torrent-item__details\">\n        <div class=\"torrent-item__date\">{date}</div>\n        <div class=\"torrent-item__tracker\">{tracker}</div>\n\n        <div class=\"torrent-item__bitrate bitrate\">\u0411\u0438\u0442\u0440\u0435\u0439\u0442: <span>{bitrate} \u041C\u0431/\u0441</span></div>\n        <div class=\"torrent-item__seeds\">\u0420\u0430\u0437\u0434\u0430\u044E\u0442: <span>{seeds}</span></div>\n        <div class=\"torrent-item__grabs\">\u041A\u0430\u0447\u0430\u044E\u0442: <span>{grabs}</span></div>\n        \n        <div class=\"torrent-item__size\">{size}</div>\n    </div>\n</div>";

  var html$i = "<div class=\"torrent-file selector\">\n    <div class=\"torrent-file__title\">{title}</div>\n    <div class=\"torrent-file__size\">{size}</div>\n</div>";

  var html$h = "<div class=\"error\">\n    <div class=\"error__ico\"></div>\n    <div class=\"error__body\">\n        <div class=\"error__title\">{title}</div>\n        <div class=\"error__text\">{text}</div>\n    </div>\n</div>\n\n<div class=\"torrent-error noconnect\">\n    <div>\n        <div>\u041F\u0440\u0438\u0447\u0438\u043D\u044B</div>\n        <ul>\n            <li>\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0430\u0434\u0440\u0435\u0441: <code>{ip}</code></li>\n            <li class=\"nocorect\">\u0422\u0435\u043A\u0443\u0449\u0438\u0439 \u0430\u0434\u0440\u0435\u0441 <code>{ip}</code> \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043D\u0435\u0432\u0435\u0440\u043D\u044B\u043C!</li>\n            <li>\u0422\u0435\u043A\u0443\u0449\u0438\u0439 \u043E\u0442\u0432\u0435\u0442: <code>{echo}</code></li>\n        </ul>\n    </div>\n\n    <div>\n        <div>\u041A\u0430\u043A \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E?</div>\n        <ul>\n            <li>\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u0430\u0434\u0440\u0435\u0441: <code>192.168.0.\u0445\u0445\u0445:8090</code></li>\n            <li>\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u0432\u0435\u0440\u0441\u0438\u044E Matrix</li>\n        </ul>\n    </div>\n\n    <div>\n        <div>\u041A\u0430\u043A \u043F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C?</div>\n        <ul>\n            <li>\u041D\u0430 \u044D\u0442\u043E\u043C \u0436\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0435, \u043E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u0437\u0430\u0439\u0434\u0438\u0442\u0435 \u043F\u043E \u0430\u0434\u0440\u0435\u0441\u0443 <code>{ip}/echo</code></li>\n            <li>\u0415\u0441\u043B\u0438 \u0436\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043D\u0435 \u043E\u0442\u0432\u0435\u0442\u0438\u0442, \u043F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u0437\u0430\u043F\u0443\u0449\u0435\u043D \u043B\u0438 TorrServe, \u0438\u043B\u0438 \u043F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0435\u0433\u043E.</li>\n            <li>\u0415\u0441\u043B\u0438 \u0436\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043E\u0442\u0432\u0435\u0442\u0438\u043B, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C \u0447\u0442\u043E \u0432 \u043E\u0442\u0432\u0435\u0442\u0435 \u0435\u0441\u0442\u044C \u0441\u0442\u0440\u043E\u043A\u0430 <code>MatriX</code></li>\n        </ul>\n    </div>\n</div>";

  var html$g = "<div class=\"error\">\n    <div class=\"error__ico\"></div>\n    <div class=\"error__body\">\n        <div class=\"error__title\">{title}</div>\n        <div class=\"error__text\">{text}</div>\n    </div>\n</div>\n\n<div class=\"torrent-error noconnect\">\n    <div>\n        <div>\u041F\u0440\u0438\u0447\u0438\u043D\u044B</div>\n        <ul>\n            <li>\u0417\u0430\u043F\u0440\u043E\u0441 \u043D\u0430 \u043F\u0438\u043D\u0433 \u0432\u0435\u0440\u043D\u0443\u043B \u043D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442</li>\n            <li>\u041E\u0442\u0432\u0435\u0442 \u043E\u0442 TorServer: <code>{echo}</code></li>\n        </ul>\n    </div>\n\n    <div>\n        <div>\u0427\u0442\u043E \u0434\u0435\u043B\u0430\u0442\u044C?</div>\n        <ul>\n            <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C \u0447\u0442\u043E \u0443 \u0432\u0430\u0441 \u0441\u0442\u043E\u0438\u0442 \u0432\u0435\u0440\u0441\u0438\u044F Matrix</li>\n        </ul>\n    </div>\n\n    <div>\n        <div>\u041A\u0430\u043A \u043F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C?</div>\n        <ul>\n            <li>\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u0437\u0430\u0439\u0434\u0438\u0442\u0435 \u043F\u043E \u0430\u0434\u0440\u0435\u0441\u0443 <code>{ip}/echo</code></li>\n            <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C \u0447\u0442\u043E \u0432 \u043E\u0442\u0432\u0435\u0442\u0435 \u0435\u0441\u0442\u044C \u043D\u0430\u043B\u0438\u0447\u0438\u0435 \u043A\u043E\u0434\u0430 <code>MatriX</code></li>\n        </ul>\n    </div>\n</div>";

  var html$f = "<div class=\"error\">\n    <div class=\"error__ico\"></div>\n    <div class=\"error__body\">\n        <div class=\"error__title\">{title}</div>\n        <div class=\"error__text\">{text}</div>\n    </div>\n</div>\n\n<div class=\"torrent-error noconnect\">\n    <div>\n        <div>\u041F\u0440\u0438\u0447\u0438\u043D\u044B</div>\n        <ul>\n            <li>TorServer \u043D\u0435 \u0441\u043C\u043E\u0433 \u0441\u043A\u0430\u0447\u0430\u0442\u044C \u0442\u043E\u0440\u0440\u0435\u043D\u0442 \u0444\u0430\u0439\u043B</li>\n            <li>\u041E\u0442\u0432\u0435\u0442 \u043E\u0442 TorServer: {echo}</li>\n            <li>\u0421\u0441\u044B\u043B\u043A\u0430: <code>{url}</code></li>\n        </ul>\n    </div>\n\n    <div class=\"is--jackett\">\n        <div>\u0427\u0442\u043E \u0434\u0435\u043B\u0430\u0442\u044C?</div>\n        <ul>\n            <li>\u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E \u043B\u0438 \u0432\u044B \u043D\u0430\u0441\u0442\u0440\u043E\u0438\u043B\u0438 Jackett</li>\n            <li>\u041F\u0440\u0438\u0432\u0430\u0442\u043D\u044B\u0435 \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0438 \u043C\u043E\u0433\u0443\u0442 \u043D\u0435 \u0432\u044B\u0434\u0430\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443 \u043D\u0430 \u0444\u0430\u0439\u043B</li>\n            <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C \u0447\u0442\u043E Jackett \u0442\u043E\u0436\u0435 \u043C\u043E\u0436\u0435\u0442 \u0441\u043A\u0430\u0447\u0430\u0442\u044C \u0444\u0430\u0439\u043B</li>\n        </ul>\n    </div>\n\n    <div class=\"is--torlook\">\n        <div>\u0427\u0442\u043E \u0434\u0435\u043B\u0430\u0442\u044C?</div>\n        <ul>\n            <li>\u041D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0432 \u043D\u0430\u0448\u0443 \u0442\u0435\u043B\u0435\u0433\u0440\u0430\u043C \u0433\u0440\u0443\u043F\u043F\u0443: @lampa_group</li>\n            <li>\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u043A\u0430\u043A\u043E\u0439 \u0444\u0438\u043B\u044C\u043C, \u043A\u0430\u043A\u0430\u044F \u0440\u0430\u0437\u0434\u0430\u0447\u0430 \u0438 \u043F\u043E \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u0438 \u0444\u043E\u0442\u043E \u044D\u0442\u043E\u0439 \u0440\u0430\u0437\u0430\u0434\u0430\u0447\u0438</li>\n        </ul>\n    </div>\n</div>";

  var html$e = "<div class=\"torrent-serial selector\">\n    <img src=\"{img}\" class=\"torrent-serial__img\" />\n    <div class=\"torrent-serial__content\">\n        <div class=\"torrent-serial__body\">\n            <div class=\"torrent-serial__title\">{fname}</div>\n            <div class=\"torrent-serial__line\">\u0421\u0435\u0440\u0438\u044F - <b>{episode}</b> &nbsp;\u2022&nbsp; \u0421\u0435\u0437\u043E\u043D - <b>{season}</b> &nbsp;\u2022&nbsp; \u0412\u044B\u0445\u043E\u0434 - {air_date}</div>\n        </div>\n        <div class=\"torrent-serial__detail\">\n            <div class=\"torrent-serial__size\">{size}</div>\n            <div class=\"torrent-serial__exe\">.{exe}</div>\n        </div>\n    </div>\n    <div class=\"torrent-serial__episode\">{episode}</div>\n</div>";

  var templates = {
    wrap: html$Z,
    menu: html$Y,
    activitys: html$X,
    activity: html$W,
    settings: html$U,
    settings_main: html$T,
    settings_interface: html$S,
    settings_player: html$R,
    settings_more: html$Q,
    settings_plugins: html$P,
    settings_cloud: html$O,
    settings_account: html$N,
    settings_server: html$M,
    scroll: html$V,
    items_line: html$L,
    card: html$K,
    player: html$J,
    player_panel: html$I,
    player_video: html$H,
    player_info: html$G,
    selectbox: html$F,
    selectbox_item: html$E,
    info: html$D,
    more: html$B,
    search: html$A,
    settings_input: html$z,
    modal: html$y,
    modal_loading: html$x,
    modal_pending: html$w,
    empty: html$v,
    about: html$u,
    error: html$t,
    filter: html$C,
    search_box: html$s,
    console: html$r,
    icon_star: html$q,
    timeline: html$p,
    list_empty: html$o,
    screensaver: html$n,
    view: html$m,
    events: html$l,
    events_item: html$k,
    torrent: html$j,
    torrent_file: html$i,
    torrent_noconnect: html$h,
    torrent_file_serial: html$e,
    torrent_nocheck: html$g,
    torrent_nohash: html$f
  };

  function get$7(name) {
    var vars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var like_static = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var tpl = templates[name];
    if (!tpl) throw 'Шаблон: ' + name + ' не найден!';

    for (var n in vars) {
      tpl = tpl.replace(new RegExp('{' + n + '}', 'g'), vars[n]);
    }

    tpl = tpl.replace(/{\@([a-z_-]+)}/g, function (e, s) {
      return templates[s] || '';
    });
    return like_static ? tpl : $(tpl);
  }

  function add$8(name, html) {
    templates[name] = html;
  }

  function all() {
    return templates;
  }

  var Template = {
    get: get$7,
    add: add$8,
    all: all
  };

  var Base64 = {
    // private property
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    // public method for encoding
    encode: function encode(input) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;
      input = Base64._utf8_encode(input);

      while (i < input.length) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
          enc4 = 64;
        }

        output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
      }

      return output;
    },
    // public method for decoding
    decode: function decode(input) {
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

      while (i < input.length) {
        enc1 = this._keyStr.indexOf(input.charAt(i++));
        enc2 = this._keyStr.indexOf(input.charAt(i++));
        enc3 = this._keyStr.indexOf(input.charAt(i++));
        enc4 = this._keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
          output = output + String.fromCharCode(chr2);
        }

        if (enc4 != 64) {
          output = output + String.fromCharCode(chr3);
        }
      }

      output = Base64._utf8_decode(output);
      return output;
    },
    // private method for UTF-8 encoding
    _utf8_encode: function _utf8_encode(string) {
      string = string.replace(/\r\n/g, "\n");
      var utftext = "";

      for (var n = 0; n < string.length; n++) {
        var c = string.charCodeAt(n);

        if (c < 128) {
          utftext += String.fromCharCode(c);
        } else if (c > 127 && c < 2048) {
          utftext += String.fromCharCode(c >> 6 | 192);
          utftext += String.fromCharCode(c & 63 | 128);
        } else {
          utftext += String.fromCharCode(c >> 12 | 224);
          utftext += String.fromCharCode(c >> 6 & 63 | 128);
          utftext += String.fromCharCode(c & 63 | 128);
        }
      }

      return utftext;
    },
    // private method for UTF-8 decoding
    _utf8_decode: function _utf8_decode(utftext) {
      var string = "";
      var i = 0;
      var c = c1 = c2 = 0;

      while (i < utftext.length) {
        c = utftext.charCodeAt(i);

        if (c < 128) {
          string += String.fromCharCode(c);
          i++;
        } else if (c > 191 && c < 224) {
          c2 = utftext.charCodeAt(i + 1);
          string += String.fromCharCode((c & 31) << 6 | c2 & 63);
          i += 2;
        } else {
          c2 = utftext.charCodeAt(i + 1);
          c3 = utftext.charCodeAt(i + 2);
          string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
          i += 3;
        }
      }

      return string;
    }
  };

  var html$d = $('<div class="noty"><div class="noty__body"><div class="noty__text"></div></div></div>'),
      body$4 = html$d.find('.noty__text'),
      time$2;

  function show$4(text) {
    clearTimeout(time$2);
    time$2 = setTimeout(function () {
      html$d.removeClass('noty--visible');
    }, 3000);
    body$4.html(text);
    html$d.addClass('noty--visible');
  }

  function render$b() {
    return html$d;
  }

  var Noty = {
    show: show$4,
    render: render$b
  };

  var reqCallback = {};

  function exit$1() {
    if (checkVersion(1)) AndroidJS.exit();else $('<a href="lampa://exit"></a>')[0].click();
  }

  function playHash(SERVER) {
    var magnet = "magnet:?xt=urn:btih:" + SERVER.hash;

    if (checkVersion(10)) {
      var intentExtra = "";

      if (SERVER.movie) {
        intentExtra = {
          title: "[LAMPA] " + SERVER.movie.title,
          poster: SERVER.movie.img,
          data: {
            lampa: true,
            movie: SERVER.movie
          }
        };
      }

      AndroidJS.openTorrentLink(magnet, JSON.stringify(intentExtra));
    } else {
      $('<a href="' + magnet + '"/>')[0].click();
    }
  }

  function openTorrent(SERVER) {
    if (checkVersion(10)) {
      var intentExtra = {
        title: "[LAMPA] " + SERVER.object.title,
        poster: SERVER.object.poster,
        data: {
          lampa: true,
          movie: SERVER.movie
        }
      };
      AndroidJS.openTorrentLink(SERVER.object.MagnetUri || SERVER.object.Link, JSON.stringify(intentExtra));
    } else {
      $('<a href="' + (SERVER.object.MagnetUri || SERVER.object.Link) + '"/>')[0].click();
    }
  }

  function openPlayer(link, data) {
    if (checkVersion(10)) AndroidJS.openPlayer(link, JSON.stringify(data));else $('<a href="' + link + '"><a/>')[0].click();
  }

  function openYoutube(link) {
    if (checkVersion(15)) AndroidJS.openYoutube(link);else $('<a href="' + link + '"><a/>')[0].click();
  }

  function resetDefaultPlayer() {
    if (checkVersion(15)) AndroidJS.clearDefaultPlayer();
  }

  function httpReq(data, call) {
    var index = Math.floor(Math.random() * 5000);
    reqCallback[index] = call;
    if (checkVersion(16)) AndroidJS.httpReq(JSON.stringify(data), index);else call.error({
      responseText: "No Native request"
    });
  }

  function httpCall(index, callback) {
    var req = reqCallback[index];

    if (req[callback]) {
      var resp = AndroidJS.getResp(index);

      try {
        var json = JSON.parse(resp);
        req[callback](json);
      } catch (_unused) {
        req[callback](resp);
      } finally {
        delete reqCallback[index];
      }
    }
  }

  function voiceStart() {
    if (checkVersion(25)) AndroidJS.voiceStart();else Lampa.Noty.show("Работает только на Android TV");
  }

  function showInput(inputText) {
    if (checkVersion(27)) AndroidJS.showInput(inputText);
  }

  function updateChannel(where) {
    if (checkVersion(28)) AndroidJS.updateChannel(where);
  }

  function checkVersion(needVersion) {
    if (typeof AndroidJS !== 'undefined') {
      try {
        var current = AndroidJS.appVersion().split('-');
        var versionCode = current.pop();

        if (parseInt(versionCode, 10) >= needVersion) {
          return true;
        } else {
          Lampa.Noty.show("Обновите приложение.<br>Требуется версия: " + needVersion + "<br>Текущая версия: " + versionCode);
          return false;
        }
      } catch (e) {
        Lampa.Noty.show("Обновите приложение.<br>Требуется версия: " + needVersion);
        return false;
      }
    } else return false;
  }

  var Android = {
    exit: exit$1,
    openTorrent: openTorrent,
    openPlayer: openPlayer,
    playHash: playHash,
    openYoutube: openYoutube,
    resetDefaultPlayer: resetDefaultPlayer,
    httpReq: httpReq,
    voiceStart: voiceStart,
    httpCall: httpCall,
    showInput: showInput,
    updateChannel: updateChannel
  };

  function create$n() {
    var listener = start$3();
    var _calls = [];

    var _last;

    var last_reguest;
    var need = {
      timeout: 1000 * 60
    };

    this.timeout = function (time) {
      need.timeout = time;
    };
    /**
     * Видимый запрос
     * @param {String} url адрес
     * @param {Function} complite успешно
     * @param {Function} error ошибка
     * @param {Object} post_data данные для пост запроса
     */


    this.get = function (url, _complite, _error, post_data) {
      clear();
      go({
        url: url,
        post_data: post_data,
        start: function start() {
          listener.send('start');
        },
        before_complite: function before_complite() {
          listener.send('before_complite');
        },
        complite: function complite(data) {
          if (_complite) _complite(data);
        },
        after_complite: function after_complite() {
          listener.send('after_complite');
        },
        before_error: function before_error() {
          listener.send('before_error');
        },
        error: function error(data) {
          if (_error) _error(data);
        },
        after_error: function after_error() {
          listener.send('after_error');
        },
        end: function end() {
          listener.send('end');
        }
      });
    };
    /**
     * Тихий запрос, отработает в любом случае
     * @param {String} url адрес
     * @param {Function} complite успешно
     * @param {Function} error ошибка
     * @param {Object} post_data данные для пост запроса
     * @param {Object} params дополнительные параметры
     */


    this.quiet = function (url, _complite2, _error2, post_data, params) {
      var add_params = {};

      if (params) {
        add_params = params;
      }

      var data = {
        url: url,
        post_data: post_data,
        complite: function complite(data) {
          if (_complite2) _complite2(data);
        },
        error: function error(data) {
          if (_error2) _error2(data);
        }
      };
      Arrays.extend(data, add_params, true);
      go(data);
    };
    /**
     * Бесшумный запрос, сработает прерывание при новом запросе
     * @param {String} url адрес
     * @param {Function} complite успешно
     * @param {Function} error ошибка
     * @param {Object} post_data данные для пост запроса
     * @param {Object} params дополнительные параметры
     */


    this.silent = function (url, complite, error, post_data, params) {
      var add_params = {};

      if (params) {
        add_params = params;
      }

      var reguest = {
        url: url,
        complite: complite,
        error: error
      };

      _calls.push(reguest);

      var data = {
        url: url,
        post_data: post_data,
        complite: function complite(data) {
          if (_calls.indexOf(reguest) !== -1 && reguest.complite) reguest.complite(data);
        },
        error: function error(data) {
          if (_calls.indexOf(reguest) !== -1 && reguest.error) reguest.error(data);
        },
        end: function end() {
          listener.send('end');
        }
      };
      Arrays.extend(data, add_params, true);
      go(data);
    };
    /**
     * Отработать только последний запрос в стеке
     * @param {String} url адрес
     * @param {Function} complite успешно
     * @param {Function} error ошибка
     * @param {Object} post_data данные для пост запроса
     */


    this.last = function (url, complite, error, post_data) {
      var reguest = {
        url: url,
        complite: complite,
        error: error
      };
      _last = reguest;
      go({
        url: url,
        post_data: post_data,
        complite: function complite(data) {
          if (_last && _last.complite) _last.complite(data);
        },
        error: function error(data) {
          if (_last && _last.error) _last.error(data);
        },
        end: function end() {
          dispatchEvent({
            type: 'load:end'
          });
        }
      });
    };

    this["native"] = function (url, complite, error, post_data, params) {
      var add_params = {};

      if (params) {
        add_params = params;
      }

      var reguest = {
        url: url,
        complite: complite,
        error: error
      };

      _calls.push(reguest);

      var data = {
        url: url,
        post_data: post_data,
        complite: function complite(data) {
          if (_calls.indexOf(reguest) !== -1 && reguest.complite) reguest.complite(data);
        },
        error: function error(data) {
          if (_calls.indexOf(reguest) !== -1 && reguest.error) reguest.error(data);
        },
        end: function end() {
          listener.send('end');
        }
      };
      Arrays.extend(data, add_params, true);

      _native(data);
    };
    /**
     * Очистить все запросы
     */


    this.clear = function () {
      _calls = [];
    };
    /**
     * Повторить запрос
     * @param {Object} custom 
     */


    this.again = function (custom) {
      if (custom || last_reguest) {
        go(custom || last_reguest);
      }
    };
    /**
     * Вернуть обьект последненго запроса
     * @returns Object
     */


    this.latest = function () {
      return last_reguest;
    };
    /**
     * Декодировать ошибку в запросе
     * @param {Object} jqXHR 
     * @param {String} exception 
     * @returns String
     */


    this.errorDecode = function (jqXHR, exception) {
      return errorDecode(jqXHR, exception);
    };

    function errorDecode(jqXHR, exception) {
      var msg = '';

      if (jqXHR.status === 0 && exception !== 'timeout') {
        msg = 'Нет подключения к сети.';
      } else if (jqXHR.status == 404) {
        msg = 'Запрошенная страница не найдена. [404]';
      } else if (jqXHR.status == 401) {
        msg = 'Авторизация не удалась';
      } else if (jqXHR.status == 500) {
        msg = 'Внутренняя ошибка сервера. [500]';
      } else if (exception === 'parsererror') {
        msg = 'Запрошенный синтаксический анализ JSON завершился неудачно.';
      } else if (exception === 'timeout') {
        msg = 'Время запроса истекло.';
      } else if (exception === 'abort') {
        msg = 'Запрос был прерван.';
      } else if (exception === 'custom') {
        msg = jqXHR.responseText;
      } else {
        msg = 'Неизвестная ошибка: ' + jqXHR.responseText;
      }

      return msg;
    }
    /**
     * Сделать запрос
     * @param {Object} params 
     */


    function go(params) {
      listener.send('go');
      last_reguest = params;
      if (params.start) params.start();

      var secuses = function secuses(data) {
        if (params.before_complite) params.before_complite(data);

        if (params.complite) {
          try {
            params.complite(data);
          } catch (e) {
            console.error('Reguest', 'complite error:', e.message + "\n\n" + e.stack);
            Noty.show('Error: ' + (e.error || e).message + '<br><br>' + (e.error && e.error.stack ? e.error.stack : e.stack || '').split("\n").join('<br>'));
          }
        }

        if (params.after_complite) params.after_complite(data);
        if (params.end) params.end();
      };

      var data = {
        dataType: params.dataType || 'json',
        url: params.url,
        timeout: need.timeout,
        crossDomain: true,
        success: function success(data) {
          //console.log('Reguest','result of '+params.url+' :',data)
          secuses(data);
        },
        error: function error(jqXHR, exception) {
          console.log('Reguest', 'error of ' + params.url + ' :', errorDecode(jqXHR, exception));
          if (params.before_error) params.before_error(jqXHR, exception);
          if (params.error) params.error(jqXHR, exception);
          if (params.after_error) params.after_error(jqXHR, exception);
          if (params.end) params.end();
        },
        beforeSend: function beforeSend(xhr) {
          var use = Storage.field('torrserver_auth');
          var srv = Storage.get(Storage.field('torrserver_use_link') == 'two' ? 'torrserver_url_two' : 'torrserver_url');
          if (use && params.url.indexOf(srv) > -1) xhr.setRequestHeader("Authorization", "Basic " + Base64.encode(Storage.get('torrserver_login') + ':' + Storage.get('torrserver_password')));

          if (params.beforeSend) {
            xhr.setRequestHeader(params.beforeSend.name, params.beforeSend.value);
          }
        }
      };

      if (params.post_data) {
        data.type = 'POST';
        data.data = params.post_data;
      }

      if (params.type) data.type = params.type;

      if (params.headers) {
        data.headers = params.headers;
      }

      $.ajax(data);
      need.timeout = 1000 * 60;
    }

    function _native(params) {
      listener.send('go');
      last_reguest = params;
      if (params.start) params.start();
      var platform = Storage.get('platform', '');
      if (platform == 'webos') go(params);else if (platform == 'tizen') go(params);else if (platform == 'android') Android.httpReq(params, {
        complite: params.complite,
        error: params.error
      });else go(params);
      need.timeout = 1000 * 60;
    }
  }

  function secondsToTime(sec, _short) {
    var sec_num = parseInt(sec, 10);
    var hours = Math.floor(sec_num / 3600);
    var minutes = Math.floor((sec_num - hours * 3600) / 60);
    var seconds = sec_num - hours * 3600 - minutes * 60;

    if (hours < 10) {
      hours = "0" + hours;
    }

    if (minutes < 10) {
      minutes = "0" + minutes;
    }

    if (seconds < 10) {
      seconds = "0" + seconds;
    }

    if (_short) return hours + ':' + minutes;
    return hours + ':' + minutes + ':' + seconds;
  }

  function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  function substr(txt, len) {
    txt = txt || '';
    return txt.length > len ? txt.substr(0, len) + '...' : txt;
  }

  function numberWithSpaces(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
  }

  function bytesToSize(bytes, speed) {
    if (bytes == 0) {
      return '0 Байт';
    }

    var unitMultiple = 1024;
    var unitNames = ['Байт', 'КБ', 'МБ', 'ГБ', 'ТБ', 'ПБ'];

    if (speed) {
      unitNames = ['б', 'Кб', 'Мб', 'Гб', 'Тб', 'Пб'];
    }

    var unitChanges = Math.floor(Math.log(bytes) / Math.log(unitMultiple));
    return parseFloat((bytes / Math.pow(unitMultiple, unitChanges)).toFixed(2)) + ' ' + unitNames[unitChanges];
  }

  function sizeToBytes(str) {
    var gsize = str.match(/([0-9\\.,]+)\s+(Mb|МБ|GB|ГБ|TB|ТБ)/i);

    if (gsize) {
      var size = parseFloat(gsize[1].replace(',', '.'));
      if (/gb|гб/.test(gsize[2].toLowerCase())) size *= 1024;
      if (/tb|тб/.test(gsize[2].toLowerCase())) size *= 1048576;
      return size * 1048576;
    }

    return 0;
  }

  function calcBitrate(byteSize, minutes) {
    if (!minutes) return 0;
    var sec = minutes * 60;
    var bitSize = byteSize * 8;
    return (bitSize / Math.pow(1024, 2) / sec).toFixed(2);
  }

  function time$1(html) {
    var create = function create() {
      var months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Ма', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
      var days = ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"];

      this.moth = function (m) {
        var n = months[m];
        var d = n.slice(-1);
        if (d == 'ь') return n.slice(0, n.length - 1) + 'я';else if (n == 'Ма') return n + 'я';else return n + 'а';
      };

      this.tik = function () {
        var date = new Date(),
            time = date.getTime(),
            ofst = parseInt((localStorage.getItem('time_offset') == null ? 'n0' : localStorage.getItem('time_offset')).replace('n', ''));
        date = new Date(time + ofst * 1000 * 60 * 60);
        time = [date.getHours(), date.getMinutes(), date.getSeconds(), date.getFullYear()];

        if (time[0] < 10) {
          time[0] = "0" + time[0];
        }

        if (time[1] < 10) {
          time[1] = "0" + time[1];
        }

        if (time[2] < 10) {
          time[2] = "0" + time[2];
        }

        var current_time = [time[0], time[1]].join(':'),
            current_week = date.getDay(),
            current_day = date.getDate();
        $('.time--clock', html).text(current_time);
        $('.time--week', html).text(days[current_week]);
        $('.time--day', html).text(current_day);
        $('.time--moth', html).text(months[date.getMonth()]);
        $('.time--full', html).text(current_day + ' ' + this.moth(date.getMonth()) + ' ' + time[3]);
      };

      setInterval(this.tik.bind(this), 1000);
      this.tik();
    };

    return new create();
  }

  function parseTime(str) {
    var months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Ма', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
    var days = ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"];

    var mouth = function mouth(m) {
      var n = months[m];
      var d = n.slice(-1);
      if (d == 'ь') return n.slice(0, n.length - 1) + 'я';else if (n == 'Ма') return n + 'я';else return n + 'а';
    };

    var date = new Date(str),
        time = [date.getHours(), date.getMinutes(), date.getSeconds(), date.getFullYear()];

    if (time[0] < 10) {
      time[0] = "0" + time[0];
    }

    if (time[1] < 10) {
      time[1] = "0" + time[1];
    }

    if (time[2] < 10) {
      time[2] = "0" + time[2];
    }

    var current_time = [time[0], time[1]].join(':'),
        current_week = date.getDay(),
        current_day = date.getDate();
    return {
      time: current_time,
      week: days[current_week],
      day: current_day,
      mouth: months[date.getMonth()],
      full: current_day + ' ' + mouth(date.getMonth()) + ' ' + time[3]
    };
  }

  function strToTime(str) {
    var date = new Date(str);
    return date.getTime();
  }

  function checkHttp(url) {
    url = url.replace(/https:\/\//, '');
    url = url.replace(/http:\/\//, '');
    url = protocol() + url;
    return url;
  }

  function shortText(fullStr, strLen, separator) {
    if (fullStr.length <= strLen) return fullStr;
    separator = separator || '...';
    var sepLen = separator.length,
        charsToShow = strLen - sepLen,
        frontChars = Math.ceil(charsToShow / 2),
        backChars = Math.floor(charsToShow / 2);
    return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);
  }

  function protocol() {
    return window.location.protocol == 'https:' ? 'https://' : 'http://';
  }

  function addUrlComponent(url, params) {
    return url + (/\?/.test(url) ? '&' : '?') + params;
  }

  function putScript(items, complite, error) {
    var p = 0;

    function next() {
      if (p >= items.length) return complite();
      var u = items[p];

      if (!u) {
        p++;
        return next();
      }

      console.log('Script', 'create:', u);
      var s = document.createElement('script');

      s.onload = function () {
        console.log('Script', 'include:', u);
        next();
      };

      s.onerror = function () {
        console.log('Script', 'error:', u);
        if (error) error(u);
        next();
      };

      s.setAttribute('src', u);
      document.body.appendChild(s);
      p++;
    }

    next();
  }

  function putStyle(items, complite, error) {
    var p = 0;

    function next() {
      if (p >= items.length) return complite();
      var u = items[p];
      $.get(u, function (css) {
        css = css.replace(/\.\.\//g, './');
        var style = document.createElement('style');
        style.type = 'text/css';

        if (style.styleSheet) {
          // This is required for IE8 and below.
          style.styleSheet.cssText = css;
        } else {
          style.appendChild(document.createTextNode(css));
        }

        document.body.appendChild(style);
        next();
      }, function () {
        if (error) error(u);
        next();
      }, 'TEXT');
      p++;
    }

    next(items[0]);
  }

  function clearTitle(title) {
    return title.replace(/[^a-zа-я0-9\s]/gi, '');
  }

  function cardImgBackground(card_data) {
    if (Storage.field('background')) {
      return Storage.get('background_type', 'complex') == 'poster' && card_data.backdrop_path ? Api.img(card_data.backdrop_path, 'original') : card_data.poster_path ? Api.img(card_data.poster_path) : card_data.poster || card_data.img || '';
    }

    return '';
  }

  function stringToHslColor(str, s, l) {
    var hash = 0;

    for (var i = 0; i < str.length; i++) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }

    var h = hash % 360;
    return 'hsl(' + h + ', ' + s + '%, ' + l + '%)';
  }

  function pathToNormalTitle(path) {
    var add_exe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var name = path.split('.');
    var exe = name.pop();
    name = name.join('.');
    return (name + '').replace(/_|\./g, ' ') + (add_exe ? ' <span class="exe">.' + exe + '</span>' : '');
  }

  function hash$2(input) {
    var str = (input || '') + '';
    var hash = 0;
    if (str.length == 0) return hash;

    for (var i = 0; i < str.length; i++) {
      var _char = str.charCodeAt(i);

      hash = (hash << 5) - hash + _char;
      hash = hash & hash; // Convert to 32bit integer
    }

    return Math.abs(hash) + '';
  }

  function uid$1(len) {
    var ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var ID_LENGTH = len || 8;
    var id = '';

    for (var i = 0; i < ID_LENGTH; i++) {
      id += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));
    }

    return id;
  }

  var Utils = {
    secondsToTime: secondsToTime,
    capitalizeFirstLetter: capitalizeFirstLetter,
    substr: substr,
    numberWithSpaces: numberWithSpaces,
    time: time$1,
    bytesToSize: bytesToSize,
    calcBitrate: calcBitrate,
    parseTime: parseTime,
    checkHttp: checkHttp,
    shortText: shortText,
    protocol: protocol,
    addUrlComponent: addUrlComponent,
    sizeToBytes: sizeToBytes,
    putScript: putScript,
    putStyle: putStyle,
    clearTitle: clearTitle,
    cardImgBackground: cardImgBackground,
    strToTime: strToTime,
    stringToHslColor: stringToHslColor,
    pathToNormalTitle: pathToNormalTitle,
    hash: hash$2,
    uid: uid$1
  };

  function create$m() {
    var _this = this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var html = Template.get('scroll');
    var body = html.find('.scroll__body');
    var content = html.find('.scroll__content');
    html.toggleClass('scroll--horizontal', params.horizontal ? true : false);
    html.toggleClass('scroll--mask', params.mask ? true : false);
    html.toggleClass('scroll--over', params.over ? true : false);
    html.toggleClass('scroll--nopadding', params.nopadding ? true : false);
    body.data('scroll', 0);
    var scroll_time = 0,
        scroll_step = params.step || 150;
    html.on('mousewheel', function (e) {
      var parent = $(e.target).parents('.scroll');

      if (Storage.get('navigation_type') == 'mouse' && Date.now() - scroll_time > 100 && html.is(parent[0])) {
        scroll_time = Date.now();

        if (e.originalEvent.wheelDelta / 120 > 0) {
          _this.wheel(-scroll_step);
        } else {
          _this.wheel(scroll_step);
        }
      }
    });

    this.wheel = function (size) {
      html.toggleClass('scroll--wheel', true);
      var direct = params.horizontal ? 'left' : 'top';
      var scrl = body.data('scroll'),
          scrl_offset = html.offset()[direct],
          scrl_padding = parseInt(content.css('padding-' + direct));

      if (params.scroll_by_item) {
        var pos = body.data('scroll-position');
        pos = pos || 0;
        var items = $('>*', body);
        pos += size > 0 ? 1 : -1;
        pos = Math.max(0, Math.min(items.length - 1, pos));
        body.data('scroll-position', pos);
        var item = items.eq(pos),
            ofst = item.offset()[direct];
        size = ofst - scrl_offset - scrl_padding;
      }

      var max = params.horizontal ? 10000 : body.height();
      max -= params.horizontal ? html.width() : html.height();
      max += scrl_padding * 2;
      scrl -= size;
      scrl = Math.min(0, Math.max(-max, scrl));
      this.reset();

      if (Storage.field('scroll_type') == 'css') {
        body.css('transform', 'translate3d(' + (params.horizontal ? scrl : 0) + 'px, ' + (params.horizontal ? 0 : scrl) + 'px, 0px)');
      } else {
        body.css('margin-left', (params.horizontal ? scrl : 0) + 'px');
        body.css('margin-top', (params.horizontal ? 0 : scrl) + 'px');
      }

      body.data('scroll', scrl);
    };

    this.update = function (elem, tocenter) {
      if (elem.data('ismouse')) return;
      html.toggleClass('scroll--wheel', false);
      var dir = params.horizontal ? 'left' : 'top',
          siz = params.horizontal ? 'width' : 'height';
      var ofs_elm = elem.offset()[dir],
          ofs_box = body.offset()[dir],
          center = ofs_box + (tocenter ? content[siz]() / 2 - elem[siz]() / 2 : 0),
          scrl = Math.min(0, center - ofs_elm);
      this.reset();

      if (Storage.field('scroll_type') == 'css') {
        body.css('transform', 'translate3d(' + (params.horizontal ? scrl : 0) + 'px, ' + (params.horizontal ? 0 : scrl) + 'px, 0px)');
      } else {
        body.css('margin-left', (params.horizontal ? scrl : 0) + 'px');
        body.css('margin-top', (params.horizontal ? 0 : scrl) + 'px');
      }

      body.data('scroll', scrl);
    };

    this.append = function (object) {
      body.append(object);
    };

    this.minus = function (minus) {
      html.addClass('layer--wheight');
      if (minus) html.data('mheight', minus);
    };

    this.body = function () {
      return body;
    };

    this.render = function (object) {
      if (object) body.append(object);
      return html;
    };

    this.clear = function () {
      body.empty();
    };

    this.reset = function () {
      body.css('transform', 'translate3d(0px, 0px, 0px)');
      body.css('margin', '0px');
    };

    this.destroy = function () {
      html.remove();
      body = null;
      content = null;
      html = null;
    };
  }

  function component$7(name) {
    var scrl = new create$m({
      mask: true,
      over: true
    });
    var comp = Template.get('settings_' + name);
    var last;

    if (Storage.get('native')) {
      comp.find('.is--torllok').remove();
    }

    if (!Platform.is('android')) {
      comp.find('.is--android').remove();
    }

    if (!Platform.any()) {
      comp.find('.is--player').remove();
    }

    if (!Platform.is('tizen')) {
      comp.find('.is--has_subs').remove();
    }

    scrl.render().find('.scroll__content').addClass('layer--wheight').data('mheight', $('.settings__head'));
    Params.bind(comp.find('.selector'));

    function updateScroll() {
      comp.find('.selector').unbind('hover:focus').on('hover:focus', function (e) {
        last = e.target;
        scrl.update($(e.target), true);
      });
    }

    Params.listener.follow('update_scroll', updateScroll);
    updateScroll();
    Controller.add('settings_component', {
      toggle: function toggle() {
        Controller.collectionSet(comp);
        Controller.collectionFocus(last, comp);
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      back: function back() {
        scrl.destroy();
        comp.remove();
        Params.listener.remove('update_scroll', updateScroll);
        Controller.toggle('settings');
      }
    });

    this.destroy = function () {
      scrl.destroy();
      comp.remove();
      comp = null;
      Params.listener.remove('update_scroll', updateScroll);
    };

    this.render = function () {
      return scrl.render(comp);
    };
  }

  function main$3() {
    var _this = this;

    var comp;
    var scrl = new create$m({
      mask: true,
      over: true
    });
    var last;

    this.create = function () {
      comp = Template.get('settings_main');
      comp.find('.selector').on('hover:focus', function (event) {
        last = event.target;
        scrl.update($(event.target), true);
      }).on('hover:enter', function (event) {
        _this.render().detach();

        _this.onCreate($(event.target).data('component'));
      });
    };

    this.active = function () {
      Controller.collectionSet(comp);
      Controller.collectionFocus(last, comp);
    };

    this.render = function () {
      return scrl.render(comp);
    };
  }

  var html$c = Template.get('settings');
  var body$3 = html$c.find('.settings__body');
  var listener$b = start$3();
  var last$3 = '';
  html$c.find('.settings__layer').on('click', function () {
    window.history.back();
  });

  function create$l(name) {
    var comp = new component$7(name);
    body$3.empty().append(comp.render());
    listener$b.send('open', {
      name: name,
      body: comp.render()
    });
    last$3 = name;
    Controller.toggle('settings_component');
  }

  function init$d() {
    var main = new main$3();
    main.onCreate = create$l;
    main.create();
    Controller.add('settings', {
      toggle: function toggle() {
        listener$b.send('open', {
          name: 'main',
          body: main.render()
        });
        body$3.empty().append(main.render());
        main.active();
        $('body').toggleClass('settings--open', true);
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      left: function left() {
        main.render().detach();
        Controller.toggle('content');
      },
      gone: function gone(to) {
        if (to !== 'settings_component') $('body').toggleClass('settings--open', false);
      },
      back: function back() {
        main.render().detach();
        Controller.toggle('menu');
      }
    });
  }

  function update$7() {
    create$l(last$3);
  }

  function render$a() {
    return html$c;
  }

  var Settings = {
    listener: listener$b,
    init: init$d,
    render: render$a,
    update: update$7
  };

  var html$b = Template.get('selectbox');
  var scroll$3 = new create$m({
    mask: true,
    over: true
  });
  var active$4;
  html$b.find('.selectbox__body').append(scroll$3.render());
  html$b.find('.selectbox__layer').on('click', function () {
    window.history.back();
  });
  $('body').append(html$b);

  function bind$3() {
    scroll$3.clear();
    html$b.find('.selectbox__title').text(active$4.title);
    active$4.items.forEach(function (element) {
      if (element.hide) return;
      element.title = Utils.capitalizeFirstLetter(element.title || '');
      var item = Template.get(element.template || 'selectbox_item', element);
      if (!element.subtitle) item.find('.selectbox-item__subtitle').remove();

      if (element.checkbox) {
        item.addClass('selectbox-item--checkbox');
        item.append('<div class="selectbox-item__checkbox"></div>');
        if (element.checked) item.addClass('selectbox-item--checked');
      }

      if (!element.noenter) {
        var goclose = function goclose() {
          if (!active$4.nohide) hide$1();
          if (active$4.onSelect) active$4.onSelect(element);
        };

        item.on('hover:enter', function () {
          if (element.checkbox) {
            element.checked = !element.checked;
            item.toggleClass('selectbox-item--checked', element.checked);
            if (active$4.onCheck) active$4.onCheck(element);
          } else if (active$4.onBeforeClose) {
            if (active$4.onBeforeClose()) goclose();
          } else goclose();
        }).on('hover:focus', function (e) {
          scroll$3.update($(e.target), true);
          if (active$4.onFocus) active$4.onFocus(element, e.target);
        }).on('hover:long', function (e) {
          if (active$4.onLong) active$4.onLong(element, e.target);
        });
      }

      if (element.selected) item.addClass('selected');
      scroll$3.append(item);
    });
  }

  function show$3(object) {
    active$4 = object;
    bind$3();
    $('body').toggleClass('selectbox--open', true);
    html$b.find('.selectbox__body').addClass('layer--wheight').data('mheight', html$b.find('.selectbox__head'));
    toggle$8();
  }

  function toggle$8() {
    Controller.add('select', {
      toggle: function toggle() {
        var selected = scroll$3.render().find('.selected');
        Controller.collectionSet(html$b);
        Controller.collectionFocus(selected.length ? selected[0] : false, html$b);
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      back: close$2
    });
    Controller.toggle('select');
  }

  function hide$1() {
    $('body').toggleClass('selectbox--open', false);
  }

  function close$2() {
    hide$1();
    if (active$4.onBack) active$4.onBack();
  }

  function render$9() {
    return html$b;
  }

  var Select = {
    show: show$3,
    hide: hide$1,
    close: close$2,
    render: render$9
  };

  var body$2;
  var network$7 = new create$n();
  var api = Utils.protocol() + 'cub.watch/api/';
  var notice_load = {
    time: 0,
    data: []
  };
  var bookmarks = [];
  /**
   * Запуск
   */

  function init$c() {
    Settings.listener.follow('open', function (e) {
      body$2 = null;

      if (e.name == 'account') {
        body$2 = e.body;
        renderPanel$1();
        check$1();
      }
    });
    Storage.listener.follow('change', function (e) {
      if (e.name == 'account_email' || e.name == 'account_password') {
        signin();
        if (e.name == 'account_password') Storage.set('account_password', '', true);
      }
    });
    Favorite.listener.follow('add,added', function (e) {
      save$3('add', e.where, e.card);
    });
    Favorite.listener.follow('remove', function (e) {
      save$3('remove', e.where, e.card);
    });
    updateBookmarks(Storage.get('account_bookmarks', '[]'));
    update$6();
  }

  function save$3(method, type, card) {
    var account = Storage.get('account', '{}');

    if (account.token && Storage.field('account_use')) {
      var list = Storage.get('account_bookmarks', '[]');
      var find = list.find(function (elem) {
        return elem.card_id == card.id && elem.type == type;
      });
      network$7.clear();
      network$7.silent(api + 'bookmarks/' + method, update$6, false, {
        type: type,
        data: JSON.stringify(card),
        card_id: card.id,
        id: find ? find.id : 0
      }, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });

      if (method == 'remove') {
        if (find) Arrays.remove(list, find);
      } else {
        list.push({
          id: 0,
          card_id: card.id,
          type: type,
          data: JSON.stringify(card),
          profile: account.profile.id
        });
      }

      updateBookmarks(list);
    }
  }

  function update$6() {
    var account = Storage.get('account', '{}');

    if (account.token) {
      network$7.silent(api + 'bookmarks/all?full=1', function (result) {
        if (result.secuses) {
          updateBookmarks(result.bookmarks);
        }
      }, false, false, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    } else {
      updateBookmarks([]);
    }
  }

  function plugins(call) {
    var account = Storage.get('account', '{}');

    if (account.token) {
      network$7.silent(api + 'plugins/all', function (result) {
        if (result.secuses) {
          call(result.plugins);
        } else {
          call([]);
        }
      }, function () {
        call([]);
      }, false, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    } else {
      call([]);
    }
  }
  /**
   * Статус
   */


  function renderStatus$1(name) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    if (body$2) {
      body$2.find('.settings--account-status .settings-param__value').text(name);
      body$2.find('.settings--account-status .settings-param__descr').text(value);
    }
  }

  function renderPanel$1() {
    if (body$2) {
      var account = Storage.get('account', '{}');
      var signed = account.token ? true : false;
      body$2.find('.settings--account-signin').toggleClass('hide', signed);
      body$2.find('.settings--account-user').toggleClass('hide', !signed);

      if (account.token) {
        body$2.find('.settings--account-user-info .settings-param__value').text(account.email);
        body$2.find('.settings--account-user-profile .settings-param__value').text(account.profile.name);
        body$2.find('.settings--account-user-out').on('hover:enter', function () {
          Storage.set('account', {});
          Settings.update();
          update$6();
        });
        profile();
      } else check$1();
    }
  }

  function profile() {
    var account = Storage.get('account', '{}');
    body$2.find('.settings--account-user-profile .settings-param__value').text(account.profile.name);
    body$2.find('.settings--account-user-profile').on('hover:enter', function () {
      network$7.clear();
      network$7.silent(api + 'profiles/all', function (result) {
        if (result.secuses) {
          Select.show({
            title: 'Профили',
            items: result.profiles.map(function (elem) {
              elem.title = elem.name;
              return elem;
            }),
            onSelect: function onSelect(a) {
              account.profile = a;
              Storage.set('account', account);
              body$2.find('.settings--account-user-profile .settings-param__value').text(a.name);
              Controller.toggle('settings_component');
              update$6();
            },
            onBack: function onBack() {
              Controller.toggle('settings_component');
            }
          });
        } else {
          Noty.show(result.text);
        }
      }, function () {
        Noty.show('Не удалось получить список профилей');
      }, false, {
        headers: {
          token: account.token
        }
      });
    });
  }

  function check$1() {
    var account = Storage.get('account', '{}');

    if (account.token) {
      renderStatus$1('Авторизованы', 'Вы вошли под аккаунтом ' + account.email);
    } else {
      renderStatus$1('Вход не выполнен', 'Ожидаем входа в аккаунт');
    }
  }

  function working() {
    return Storage.get('account', '{}').token && Storage.field('account_use');
  }

  function get$6(params) {
    return bookmarks.filter(function (elem) {
      return elem.type == params.type;
    }).map(function (elem) {
      return elem.data;
    });
  }

  function updateBookmarks(rows) {
    Storage.set('account_bookmarks', rows);
    bookmarks = rows.reverse().map(function (elem) {
      elem.data = JSON.parse(elem.data);
      return elem;
    });
  }
  /**
   * Проверка авторизации
   */


  function signin() {
    var email = Storage.get('account_email', '');
    var password = Storage.get('account_password', '');

    if (email && password) {
      network$7.clear();
      network$7.silent(api + 'users/signin', function (result) {
        if (result.secuses) {
          Storage.set('account', {
            email: email,
            token: result.user.token,
            id: result.user.id,
            profile: {
              name: 'Общий',
              id: 0
            }
          });
          Settings.update();
          update$6();
        } else {
          renderStatus$1('Ошибка', result.text);
        }
      }, function () {
        renderStatus$1('Ошибка', 'Нет подключения к сети');
      }, {
        email: email,
        password: password
      });
    }
  }

  function notice(call) {
    var account = Storage.get('account', '{}');

    if (account.token) {
      if (notice_load.time + 1000 * 60 * 10 < Date.now()) {
        network$7.timeout(1000);
        network$7.silent(api + 'notice/all', function (result) {
          if (result.secuses) {
            notice_load.time = Date.now();
            notice_load.data = result.notice;
            call(result.notice);
          } else call([]);
        }, function () {
          call([]);
        }, false, {
          headers: {
            token: account.token
          }
        });
      } else call(notice_load.data);
    } else call([]);
  }

  var Account = {
    init: init$c,
    working: working,
    get: get$6,
    plugins: plugins,
    notice: notice
  };

  var data = {};
  var listener$a = start$3();

  function save$2() {
    Storage.set('favorite', data);
  }
  /**
   * Добавить
   * @param {String} where 
   * @param {Object} card 
   */


  function add$7(where, card, limit) {
    read$1();

    if (data[where].indexOf(card.id) < 0) {
      Arrays.insert(data[where], 0, card.id);
      listener$a.send('add', {
        where: where,
        card: card
      });
      if (!search$3(card.id)) data.card.push(card);

      if (limit) {
        var excess = data[where].slice(limit);

        for (var i = excess.length - 1; i >= 0; i--) {
          remove$1(where, {
            id: excess[i]
          });
        }
      }

      save$2();
    } else {
      listener$a.send('added', {
        where: where,
        card: card
      });
    }
  }
  /**
   * Удалить
   * @param {String} where 
   * @param {Object} card 
   */


  function remove$1(where, card) {
    read$1();
    Arrays.remove(data[where], card.id);
    listener$a.send('remove', {
      where: where,
      card: card
    });

    for (var i = data.card.length - 1; i >= 0; i--) {
      var element = data.card[i];

      if (!check(element).any) {
        Arrays.remove(data.card, element);
        listener$a.send('remove', {
          where: where,
          card: element
        });
      }
    }

    save$2();
  }
  /**
   * Найти
   * @param {Int} id 
   * @returns Object
   */


  function search$3(id) {
    var found;

    for (var index = 0; index < data.card.length; index++) {
      var element = data.card[index];

      if (element.id == id) {
        found = element;
        break;
      }
    }

    return found;
  }
  /**
   * Переключить
   * @param {String} where 
   * @param {Object} card 
   */


  function toggle$7(where, card) {
    read$1();
    var find = cloud(card);
    if (find[where]) remove$1(where, card);else add$7(where, card);
    return find[where] ? false : true;
  }
  /**
   * Проверить
   * @param {Object} card 
   * @returns Object
   */


  function check(card) {
    var result = {
      like: data.like.indexOf(card.id) > -1,
      wath: data.wath.indexOf(card.id) > -1,
      book: data.book.indexOf(card.id) > -1,
      history: data.history.indexOf(card.id) > -1,
      any: true
    };
    if (!result.like && !result.wath && !result.book && !result.history) result.any = false;
    return result;
  }

  function cloud(card) {
    if (Account.working()) {
      var list = {
        like: Account.get({
          type: 'like'
        }),
        wath: Account.get({
          type: 'wath'
        }),
        book: Account.get({
          type: 'book'
        }),
        history: Account.get({
          type: 'history'
        })
      };
      var result = {
        like: list.like.find(function (elem) {
          return elem.id == card.id;
        }) ? true : false,
        wath: list.wath.find(function (elem) {
          return elem.id == card.id;
        }) ? true : false,
        book: list.book.find(function (elem) {
          return elem.id == card.id;
        }) ? true : false,
        history: list.history.find(function (elem) {
          return elem.id == card.id;
        }) ? true : false,
        any: true
      };
      if (!result.like && !result.wath && !result.book && !result.history) result.any = false;
      return result;
    } else return check(card);
  }
  /**
   * Получить списаок по типу
   * @param {String} params.type - тип 
   * @returns Object
   */


  function get$5(params) {
    if (Account.working()) {
      return Account.get(params);
    } else {
      read$1();
      var result = [];
      var ids = data[params.type];
      ids.forEach(function (id) {
        for (var i = 0; i < data.card.length; i++) {
          var card = data.card[i];
          if (card.id == id) result.push(card);
        }
      });
      return result;
    }
  }
  /**
   * Очистить
   * @param {String} where 
   * @param {Object} card 
   */


  function clear$5(where, card) {
    read$1();
    if (card) remove$1(where, card);else {
      for (var i = data[where].length - 1; i >= 0; i--) {
        var _card = search$3(data[where][i]);

        if (_card) remove$1(where, _card);
      }
    }
  }
  /**
   * Считать последние данные
   */


  function read$1() {
    data = Storage.get('favorite', '{}');
    Arrays.extend(data, {
      like: [],
      wath: [],
      book: [],
      card: [],
      history: []
    });
  }
  /**
   * Запуск
   */


  function init$b() {
    read$1();
  }

  var Favorite = {
    listener: listener$a,
    check: cloud,
    add: add$7,
    remove: remove$1,
    toggle: toggle$7,
    get: get$5,
    init: init$b,
    clear: clear$5
  };

  function status$1(need) {
    this.data = {};
    this.work = 0;

    this.check = function () {
      if (this.work >= need) this.onComplite(this.data);
    };

    this.append = function (name, json) {
      this.work++;
      this.data[name] = json;
      this.check();
    };

    this.error = function () {
      this.work++;
      this.check();
    };
  }

  var baseurl$1 = Utils.protocol() + 'apitmdb.cub.watch/3/';
  var baseimg = Utils.protocol() + 'imagetmdb.com/t/p/w200/';
  var network$6 = new create$n();
  var key = '4ef0d7355d9ffb5151e987764708ce96';
  var menu_list = [];

  function url$4(u) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    u = add$6(u, 'api_key=' + key);
    u = add$6(u, 'language=' + Storage.field('tmdb_lang'));
    if (params.genres) u = add$6(u, 'with_genres=' + params.genres);
    if (params.page) u = add$6(u, 'page=' + params.page);
    if (params.query) u = add$6(u, 'query=' + params.query);

    if (params.filter) {
      for (var i in params.filter) {
        u = add$6(u, i + '=' + params.filter[i]);
      }
    }

    return baseurl$1 + u;
  }

  function add$6(u, params) {
    return u + (/\?/.test(u) ? '&' : '?') + params;
  }

  function img$1(src, size) {
    var path = baseimg;
    if (size) path = path.replace(/w300/g, size);
    return src ? path + src : '';
  }

  function find(find) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var finded;

    var filtred = function filtred(items) {
      for (var i = 0; i < items.length; i++) {
        var item = items[i];

        if (params.original_title == item.original_title || params.title == item.title) {
          finded = item;
          break;
        }
      }
    };

    if (find.movie && find.movie.results.length) filtred(find.movie.results);
    if (find.tv && find.tv.results.length && !finded) filtred(find.tv.results);
    return finded;
  }

  function main$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var status = new status$1(8);

    status.onComplite = function () {
      var fulldata = [];
      if (status.data.wath) fulldata.push(status.data.wath);
      if (status.data.trend_day) fulldata.push(status.data.trend_day);
      if (status.data.trend_week) fulldata.push(status.data.trend_week);
      if (status.data.upcoming) fulldata.push(status.data.upcoming);
      if (status.data.popular) fulldata.push(status.data.popular);
      if (status.data.popular_tv) fulldata.push(status.data.popular_tv);
      if (status.data.top) fulldata.push(status.data.top);
      if (status.data.top_tv) fulldata.push(status.data.top_tv);
      if (fulldata.length) oncomplite(fulldata);else onerror();
    };

    var append = function append(title, name, json) {
      json.title = title;
      status.append(name, json);
    };

    get$4('movie/now_playing', params, function (json) {
      append('Сейчас смотрят', 'wath', json);
    }, status.error.bind(status));
    get$4('trending/moviews/day', params, function (json) {
      append('Сегодня в тренде', 'trend_day', json);
    }, status.error.bind(status));
    get$4('trending/moviews/week', params, function (json) {
      append('В тренде за неделю', 'trend_week', json);
    }, status.error.bind(status));
    get$4('movie/upcoming', params, function (json) {
      append('Смотрите в кинозалах', 'upcoming', json);
    }, status.error.bind(status));
    get$4('movie/popular', params, function (json) {
      append('Популярные фильмы', 'popular', json);
    }, status.error.bind(status));
    get$4('tv/popular', params, function (json) {
      append('Популярные сериалы', 'popular_tv', json);
    }, status.error.bind(status));
    get$4('movie/top_rated', params, function (json) {
      append('Топ фильмы', 'top', json);
    }, status.error.bind(status));
    get$4('tv/top_rated', params, function (json) {
      append('Топ сериалы', 'top_tv', json);
    }, status.error.bind(status));
  }

  function category$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var status = new status$1(6);

    status.onComplite = function () {
      var fulldata = [];
      if (status.data.wath && status.data.wath.results.length) fulldata.push(status.data.wath);
      if (status.data.popular && status.data.popular.results.length) fulldata.push(status.data.popular);
      if (status.data["new"] && status.data["new"].results.length) fulldata.push(status.data["new"]);
      if (status.data.tv_today && status.data.tv_today.results.length) fulldata.push(status.data.tv_today);
      if (status.data.tv_air && status.data.tv_air.results.length) fulldata.push(status.data.tv_air);
      if (status.data.top && status.data.top.results.length) fulldata.push(status.data.top);
      if (fulldata.length) oncomplite(fulldata);else onerror();
    };

    var append = function append(title, name, json) {
      json.title = title;
      status.append(name, json);
    };

    get$4(params.url + '/now_playing', params, function (json) {
      append('Сейчас смотрят', 'wath', json);
    }, status.error.bind(status));
    get$4(params.url + '/popular', params, function (json) {
      append('Популярное', 'popular', json);
    }, status.error.bind(status));
    var date = new Date();
    var nparams = Arrays.clone(params);
    nparams.filter = {
      sort_by: 'release_date.desc',
      year: date.getFullYear(),
      first_air_date_year: date.getFullYear(),
      'vote_average.gte': 7
    };
    get$4('discover/' + params.url, nparams, function (json) {
      json.filter = nparams.filter;
      append('Новинки', 'new', json);
    }, status.error.bind(status));
    get$4(params.url + '/airing_today', params, function (json) {
      append('Сегодня в эфире', 'tv_today', json);
    }, status.error.bind(status));
    get$4(params.url + '/on_the_air', params, function (json) {
      append('На этой неделе', 'tv_air', json);
    }, status.error.bind(status));
    get$4(params.url + '/top_rated', params, function (json) {
      append('В топе', 'top', json);
    }, status.error.bind(status));
  }

  function menuCategory$2(params, oncomplite) {
    var menu = [];

    if (params.action !== 'tv') {
      menu.push({
        title: 'Сейчас смотрят',
        url: params.action + '/now_playing'
      });
    }

    menu.push({
      title: 'Популярное',
      url: params.action + '/popular'
    });
    var date = new Date();
    var query = [];
    query.push('sort_by=release_date.desc');
    query.push('year=' + date.getFullYear());
    query.push('first_air_date_year=' + date.getFullYear());
    query.push('vote_average.gte=7');
    menu.push({
      title: 'Новинки',
      url: 'discover/' + params.action + '?' + query.join('&')
    });

    if (params.action == 'tv') {
      menu.push({
        title: 'Сегодня в эфире',
        url: params.action + '/airing_today'
      });
      menu.push({
        title: 'На этой неделе',
        url: params.action + '/on_the_air'
      });
    }

    menu.push({
      title: 'В топе',
      url: params.action + '/top_rated'
    });
    oncomplite(menu);
  }

  function full$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var status = new status$1(1);
    status.onComplite = oncomplite;
    get$4(params.method + '/' + params.id, params, function (json) {
      json.source = 'tmdb';
      status.append('movie', json);
    }, status.error.bind(status));
  }

  function list$3() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var u = url$4(params.url, params);
    network$6.silent(u, oncomplite, onerror);
  }

  function get$4(method) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var oncomplite = arguments.length > 2 ? arguments[2] : undefined;
    var onerror = arguments.length > 3 ? arguments[3] : undefined;
    var u = url$4(method, params);
    network$6.silent(u, function (json) {
      json.url = method;
      oncomplite(json);
    }, onerror);
  }

  function search$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var status = new status$1(2);
    status.onComplite = oncomplite;
    get$4('search/movie', params, function (json) {
      json.title = 'Фильмы';
      status.append('movie', json);
    }, status.error.bind(status));
    get$4('search/tv', params, function (json) {
      json.title = 'Сериалы';
      status.append('tv', json);
    }, status.error.bind(status));
  }

  function person$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;

    var sortCredits = function sortCredits(credits) {
      return credits.map(function (a) {
        a.year = parseInt(((a.release_date || a.first_air_date || '0000') + '').slice(0, 4));
        return a;
      }).sort(function (a, b) {
        return b.vote_average - a.vote_average && b.vote_count - a.vote_count;
      }); //сортируем по оценке и кол-ву голосов (чтобы отсечь мусор с 1-2 оценками)
    };

    var convert = function convert(credits, person) {
      credits.crew.forEach(function (a) {
        a.department = a.department == 'Production' ? 'Производство' : a.department == 'Directing' ? 'Режиссура' : a.department;
      });
      var cast = sortCredits(credits.cast),
          crew = sortCredits(credits.crew),
          tv = sortCredits(cast.filter(function (media) {
        return media.media_type === 'tv';
      })),
          movie = sortCredits(cast.filter(function (media) {
        return media.media_type === 'movie';
      })),
          knownFor; //Наиболее известные работы человека
      //1. Группируем все работы по департаментам (Актер, Режиссер, Сценарист и т.д.)

      knownFor = Arrays.groupBy(crew, 'department');
      var actorGender = person.gender === 1 ? 'Актриса' : 'Актер';
      if (movie.length > 0) knownFor["".concat(actorGender, " - \u0424\u0438\u043B\u044C\u043C\u044B")] = movie;
      if (tv.length > 0) knownFor["".concat(actorGender, " - \u0421\u0435\u0440\u0438\u0430\u043B\u044B")] = tv; //2. Для каждого департамента суммируем кол-ва голосов (вроде бы сам TMDB таким образом определяет knownFor для людей)

      knownFor = Object.entries(knownFor).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            depIdx = _ref2[0],
            dep = _ref2[1];

        //убираем дубликаты (человек может быть указан в одном департаменте несколько раз на разных должностях (job))
        var set = {},
            credits = dep.filter(function (credit) {
          return set.hasOwnProperty(credit.original_title || credit.original_name) ? false : credit.original_title ? set[credit.original_title] = true : set[credit.original_name] = true;
        });
        return {
          name: depIdx,
          credits: credits,
          vote_count: dep.reduce(function (a, b) {
            return a + b.vote_count;
          }, 0)
        }; //3. Сортируем департаменты по кол-ву голосов
      }).sort(function (a, b) {
        return b.vote_count - a.vote_count;
      });
      return {
        raw: credits,
        cast: cast,
        crew: crew,
        tv: tv,
        movie: movie,
        knownFor: knownFor
      };
    };

    var status = new status$1(2);

    status.onComplite = function () {
      var fulldata = {};
      if (status.data.person) fulldata.person = status.data.person;
      if (status.data.credits) fulldata.credits = convert(status.data.credits, status.data.person);
      oncomplite(fulldata);
    };

    get$4('person/' + params.id, params, function (json) {
      status.append('person', json);
    }, status.error.bind(status));
    get$4('person/' + params.id + '/combined_credits', params, function (json) {
      status.append('credits', json);
    }, status.error.bind(status));
  }

  function menu$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    if (menu_list.length) oncomplite(menu_list);else {
      var u = url$4('genre/movie/list', params);
      network$6.silent(u, function (j) {
        j.genres.forEach(function (g) {
          menu_list.push({
            title: g.name,
            id: g.id
          });
        });
        oncomplite(menu_list);
      });
    }
  }

  function external_ids() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    get$4('tv/' + params.id + '/external_ids', oncomplite, onerror);
  }

  function company$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var u = url$4('company/' + params.id, params);
    network$6.silent(u, oncomplite, onerror);
  }

  function seasons$2(tv, from, oncomplite) {
    var status = new status$1(from.length);
    status.onComplite = oncomplite;
    from.forEach(function (season) {
      get$4('tv/' + tv.id + '/season/' + season, {}, function (json) {
        status.append('' + season, json);
      }, status.error.bind(status));
    });
  }

  function screensavers(oncomplite, onerror) {
    get$4('trending/all/week', {
      page: Math.round(Math.random() * 30)
    }, function (json) {
      oncomplite(json.results.filter(function (entry) {
        return entry.backdrop_path && !entry.adult;
      }));
    }, onerror);
  }

  function clear$4() {
    network$6.clear();
  }

  var TMDB = {
    main: main$2,
    menu: menu$2,
    menuCategory: menuCategory$2,
    img: img$1,
    full: full$2,
    list: list$3,
    category: category$2,
    search: search$2,
    clear: clear$4,
    company: company$1,
    person: person$2,
    seasons: seasons$2,
    find: find,
    screensavers: screensavers,
    external_ids: external_ids,
    get: get$4
  };

  var baseurl = Utils.protocol() + 'tmdb.cub.watch/';
  var network$5 = new create$n();

  function url$3(u) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (params.genres) u = add$5(u, 'genre=' + params.genres);
    if (params.page) u = add$5(u, 'page=' + params.page);
    if (params.query) u = add$5(u, 'query=' + params.query);

    if (params.filter) {
      for (var i in params.filter) {
        u = add$5(u, i + '=' + params.filter[i]);
      }
    }

    return baseurl + u;
  }

  function add$5(u, params) {
    return u + (/\?/.test(u) ? '&' : '?') + params;
  }

  function get$3(method) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var oncomplite = arguments.length > 2 ? arguments[2] : undefined;
    var onerror = arguments.length > 3 ? arguments[3] : undefined;
    var u = url$3(method, params);
    network$5.silent(u, function (json) {
      json.url = method;
      oncomplite(json);
    }, onerror);
  }

  function list$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var u = url$3(params.url, params);
    network$5.silent(u, oncomplite, onerror);
  }

  function main$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var status = new status$1(11);

    status.onComplite = function () {
      var fulldata = [];
      var data = status.data;

      for (var i = 1; i <= 11; i++) {
        var ipx = 's' + i;
        if (data[ipx] && data[ipx].results.length) fulldata.push(data[ipx]);
      }

      if (fulldata.length) oncomplite(fulldata);else onerror();
    };

    var append = function append(title, name, json) {
      json.title = title;
      status.append(name, json);
    };

    get$3('?sort=now_playing ', params, function (json) {
      append('Сейчас смотрят', 's1', json);
    }, status.error.bind(status));
    get$3('?sort=latest', params, function (json) {
      append('Последнее добавление', 's2', json);
    }, status.error.bind(status));
    get$3('movie/now', params, function (json) {
      append('Фильмы', 's3', json);
    }, status.error.bind(status));
    get$3('?sort=now&genre=16', params, function (json) {
      append('Мультфильмы', 's4', json);
    }, status.error.bind(status));
    get$3('tv/now', params, function (json) {
      append('Сериалы', 's5', json);
    }, status.error.bind(status));
    get$3('?sort=now&genre=12', params, function (json) {
      append('Приключения', 's6', json);
    }, status.error.bind(status));
    get$3('?sort=now&genre=35', params, function (json) {
      append('Комедии', 's7', json);
    }, status.error.bind(status));
    get$3('?sort=now&genre=10751', params, function (json) {
      append('Семейное', 's8', json);
    }, status.error.bind(status));
    get$3('?sort=now&genre=27', params, function (json) {
      append('Ужасы', 's9', json);
    }, status.error.bind(status));
    get$3('?sort=now&genre=878', params, function (json) {
      append('Фантастика', 's10', json);
    }, status.error.bind(status));
    get$3('?sort=now&genre=53', params, function (json) {
      append('Триллер', 's11', json);
    }, status.error.bind(status));
  }

  function category$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var total = 6;
    if (params.url !== 'tv') total--;
    var status = new status$1(total);

    status.onComplite = function () {
      var fulldata = [];
      var data = status.data;

      for (var i = 1; i <= total + 1; i++) {
        var ipx = 's' + i;
        if (data[ipx] && data[ipx].results.length) fulldata.push(data[ipx]);
      }

      if (fulldata.length) oncomplite(fulldata);else onerror();
    };

    var append = function append(title, name, json) {
      json.title = title;
      status.append(name, json);
    };

    get$3('?cat=' + params.url + '&sort=now_playing', params, function (json) {
      append('Сейчас смотрят', 's1', json);
    }, status.error.bind(status));

    if (params.url == 'tv') {
      get$3('?cat=' + params.url + '&sort=update', params, function (json) {
        append('Новые серии', 's2', json);
      }, status.error.bind(status));
    }

    get$3('?cat=' + params.url + '&sort=top', params, function (json) {
      append('Популярное', 's3', json);
    }, status.error.bind(status));
    get$3('?cat=' + params.url + '&sort=latest', params, function (json) {
      append('Последнее добавление', 's4', json);
    }, status.error.bind(status));
    get$3('?cat=' + params.url + '&sort=now', params, function (json) {
      append('Новинки этого года', 's5', json);
    }, status.error.bind(status));
    get$3('?cat=' + params.url + '&sort=latest&vote=7', params, function (json) {
      append('С высоким рейтингом', 's6', json);
    }, status.error.bind(status));
  }

  function full$1(params, oncomplite, onerror) {
    var status = new status$1(1);
    status.onComplite = oncomplite;
    get$3('3/' + params.method + '/' + params.id + '?api_key=4ef0d7355d9ffb5151e987764708ce96&language=' + Storage.field('tmdb_lang'), params, function (json) {
      json.source = 'tmdb';
      status.append('movie', json);
    }, status.error.bind(status));
  }

  function person$1(params, oncomplite, onerror) {
    TMDB.person(params, oncomplite, onerror);
  }

  function menu$1(params, oncomplite) {
    TMDB.menu(params, oncomplite);
  }

  function menuCategory$1(params, oncomplite) {
    var menu = [];
    menu.push({
      title: 'Сейчас смотрят',
      url: '?cat=' + params.action + '&sort=now_playing'
    });

    if (params.action == 'tv') {
      menu.push({
        title: 'Новые серии',
        url: '?cat=' + params.action + '&sort=update'
      });
    }

    menu.push({
      title: 'Популярное',
      url: '?cat=' + params.action + '&sort=top'
    });
    menu.push({
      title: 'Последнее добавление',
      url: '?cat=' + params.action + '&sort=latest'
    });
    menu.push({
      title: 'Новинки этого года',
      url: '?cat=' + params.action + '&sort=now'
    });
    menu.push({
      title: 'С высоким рейтингом',
      url: '?cat=' + params.action + '&sort=latest&vote=7'
    });
    oncomplite(menu);
  }

  function seasons$1(tv, from, oncomplite) {
    TMDB.seasons(tv, from, oncomplite);
  }

  function clear$3() {
    network$5.clear();
  }

  var CUB = {
    main: main$1,
    menu: menu$1,
    menuCategory: menuCategory$1,
    full: full$1,
    list: list$2,
    category: category$1,
    clear: clear$3,
    person: person$1,
    seasons: seasons$1
  };

  var sources = {
    tmdb: TMDB,
    cub: CUB
  };
  var network$4 = new create$n();

  function source(params) {
    return params.source ? sources[params.source] : sources.tmdb;
  }

  function main() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    source(params).main(params, oncomplite, onerror);
  }

  function category() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    source(params).category(params, oncomplite, onerror);
  }

  function full() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    source(params).full(params, oncomplite, onerror);
  }

  function search$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var status = new status$1(2);
    status.onComplite = oncomplite;
    TMDB.search(params, function (json) {
      if (json.movie) status.append('movie', json.movie);
      if (json.tv) status.append('tv', json.tv);
    }, status.error.bind(status));
  }

  function person() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    source(params).person(params, oncomplite, onerror);
  }

  function genres() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    TMDB.genres(params, oncomplite, onerror);
  }

  function company() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    TMDB.company(params, oncomplite, onerror);
  }

  function list$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    source(params).list(params, oncomplite, onerror);
  }

  function menu() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    source(params).menu(params, oncomplite);
  }

  function menuCategory() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    source(params).menuCategory(params, oncomplite);
  }

  function seasons(tv, from, oncomplite) {
    source(tv).seasons(tv, from, oncomplite);
  }

  function collections(params, oncomplite, onerror) {
    source(params).collections(params, oncomplite, onerror);
  }

  function favorite() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var data = {};
    data.results = Favorite.get(params);
    data.total_pages = Math.ceil(data.results.length / 20);
    data.page = Math.min(params.page, data.total_pages);
    var offset = data.page - 1;
    data.results = data.results.slice(20 * offset, 20 * offset + 20);
    if (data.results.length) oncomplite(data);else onerror();
  }

  function relise() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    network$4.silent(Utils.protocol() + 'tmdb.cub.watch?sort=releases&results=25&page=' + params.page, function (json) {
      json.results.forEach(function (item) {
        item.tmdbID = item.id;
      });
      oncomplite(json.results);
    }, onerror);
  }

  function clear$2() {
    TMDB.clear();
    network$4.clear();
  }

  var Api = {
    main: main,
    img: TMDB.img,
    full: full,
    list: list$1,
    genres: genres,
    category: category,
    search: search$1,
    clear: clear$2,
    company: company,
    person: person,
    favorite: favorite,
    seasons: seasons,
    screensavers: TMDB.screensavers,
    relise: relise,
    menu: menu,
    menuCategory: menuCategory,
    collections: collections
  };

  function create$k(data) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    Arrays.extend(data, {
      title: data.name,
      original_title: data.original_name
    });
    var card = Template.get('card', data);
    var img = card.find('img')[0] || {};
    var vote = parseFloat((data.vote_average || 0) + '');
    if (data.name) card.append('<div class="card__type">TV</div>');
    if (vote > 0) card.append('<div class="card__vote">' + vote + '</div>');

    this.image = function () {
      img.onload = function () {
        card.addClass('card--loaded');
      };

      img.onerror = function (e) {
        img.src = './img/img_broken.svg';
      };
    };

    this.addicon = function (name) {
      card.find('.card__icons-inner').append('<div class="card__icon icon--' + name + '"></div>');
    };

    this.favorite = function () {
      var status = Favorite.check(data);
      card.find('.card__icon').remove();
      if (status.book) this.addicon('book');
      if (status.like) this.addicon('like');
      if (status.wath) this.addicon('wath');
    };

    this.onMenu = function (target, data) {
      var _this = this;

      var enabled = Controller.enabled().name;
      var status = Favorite.check(data);
      Select.show({
        title: 'Действие',
        items: [{
          title: status.book ? 'Убрать из закладок' : 'В закладки',
          subtitle: 'Смотрите в меню (Закладки)',
          where: 'book'
        }, {
          title: status.like ? 'Убрать из понравившихся' : 'Нравится',
          subtitle: 'Смотрите в меню (Нравится)',
          where: 'like'
        }, {
          title: status.wath ? 'Убрать из ожидаемых' : 'Смотреть позже',
          subtitle: 'Смотрите в меню (Позже)',
          where: 'wath'
        }],
        onBack: function onBack() {
          Controller.toggle(enabled);
        },
        onSelect: function onSelect(a) {
          if (params.object) data.source = params.object.source;
          Favorite.toggle(a.where, data);

          _this.favorite();

          Controller.toggle(enabled);
        }
      });
    };

    this.create = function () {
      var _this2 = this;

      this.favorite();
      card.on('hover:focus', function (e) {
        _this2.onFocus(e.target, data);
      }).on('hover:enter', function (e) {
        _this2.onEnter(e.target, data);
      }).on('hover:long', function (e) {
        _this2.onMenu(e.target, data);
      });
      this.image();
    };

    this.visible = function () {
      if (this.visibled) return;
      if (data.poster_path) img.src = Api.img(data.poster_path);else if (data.poster) img.src = data.poster;else if (data.img) img.src = data.img;else img.src = './img/img_broken.svg';
      this.visibled = true;
    };

    this.destroy = function () {
      img.onerror = function () {};

      img.onload = function () {};

      img.src = '';
      card.remove();
      card = null;
      img = null;
    };

    this.render = function () {
      return card;
    };
  }

  function create$j() {
    var html;

    this.create = function () {
      html = Template.get('info');
    };

    this.update = function (data) {
      html.find('.info__title').text(data.title);
      html.find('.info__title-original').text(((data.release_date || data.first_air_date || '0000') + '').slice(0, 4) + ' - ' + data.original_title);
    };

    this.render = function () {
      return html;
    };

    this.empty = function () {
      this.update({
        title: 'Еще',
        original_title: 'Показать больше результатов',
        vote_average: 0
      }, true);
    };

    this.destroy = function () {
      html.remove();
      html = null;
    };
  }

  function create$i() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Arrays.extend(params, {
      title: 'Здесь пусто',
      descr: 'На данный момент список пустой'
    });
    var html = Template.get('empty', params);

    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(html);
          Controller.collectionFocus(false, html);
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');
        },
        down: function down() {
          Navigator.move('down');
        },
        right: function right() {
          Navigator.move('right');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };

    this.render = function (add) {
      if (add) html.append(add);
      return html;
    };
  }

  function component$6(object) {
    var network = new create$n();
    var scroll = new create$m({
      mask: true,
      over: true,
      step: 250
    });
    var items = [];
    var html = $('<div></div>');
    var body = $('<div class="category-full"></div>');
    var total_pages = 0;
    var info;
    var last;

    this.create = function () {
      var _this = this;

      this.activity.loader(true);
      Api.list(object, this.build.bind(this), function () {
        var empty = new create$i();
        html.append(empty.render());
        _this.start = empty.start;

        _this.activity.loader(false);

        _this.activity.toggle();
      });
      return this.render();
    };

    this.append = function (data) {
      data.results.forEach(function (element) {
        var card = new create$k(element, {
          card_category: true,
          object: object
        });
        card.create();

        card.onFocus = function (target, card_data) {
          last = target;
          scroll.update(card.render(), false);
          info.update(card_data);
        };

        card.onEnter = function (target, card_data) {
          Activity$1.push({
            url: card_data.url,
            component: 'full',
            id: element.id,
            method: card_data.name ? 'tv' : 'movie',
            card: element,
            source: object.source
          });
        };

        card.visible();
        body.append(card.render());
        items.push(card);
      });
    };

    this.build = function (data) {
      total_pages = data.total_pages;
      info = new create$j();
      info.create();
      scroll.render();
      scroll.minus(info.render());
      html.append(info.render());
      html.append(scroll.render());
      this.append(data);
      if (total_pages > data.page) this.more();
      scroll.append(body);
      this.activity.loader(false);
      this.activity.toggle();
    };

    this.more = function () {
      var more = $('<div class="category-full__more selector"><span>Показать еще</span></div>');
      more.on('hover:focus', function (e) {
        Controller.collectionFocus(last || false, scroll.render());
        var next = Arrays.clone(object);
        delete next.activity;
        next.page++;
        Activity$1.push(next);
      });
      body.append(more);
    };

    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last || false, scroll.render());
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };

    this.pause = function () {};

    this.stop = function () {};

    this.render = function () {
      return html;
    };

    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      if (info) info.destroy();
      Api.clear();
      html.remove();
      body.remove();
      network = null;
      items = null;
      html = null;
      body = null;
      info = null;
    };
  }

  function component$5(object) {
    var _this = this;

    var network = new create$n();
    var scroll = new create$m({
      mask: true,
      over: true,
      step: 250
    });
    var items = [];
    var html = $('<div></div>');
    var body = $('<div class="category-full"></div>');
    var total_pages = 0;
    var info;
    var last;
    var waitload;

    this.create = function () {
      this.activity.loader(true);
      Api.favorite(object, this.build.bind(this), this.empty.bind(this));
      return this.render();
    };

    this.empty = function () {
      var empty = new create$i();
      html.append(empty.render());
      _this.start = empty.start;

      _this.activity.loader(false);

      _this.activity.toggle();
    };

    this.next = function () {
      var _this2 = this;

      if (waitload) return;

      if (object.page < 15 && object.page < total_pages) {
        waitload = true;
        object.page++;
        Api.favorite(object, function (result) {
          _this2.append(result);

          waitload = false;
          Controller.enable('content');
        }, function () {});
      }
    };

    this.append = function (data) {
      var _this3 = this;

      data.results.forEach(function (element) {
        var card = new create$k(element, {
          card_category: true
        });
        card.create();

        card.onFocus = function (target, card_data) {
          last = target;
          scroll.update(card.render(), true);
          info.update(card_data);
          var maxrow = Math.ceil(items.length / 5) - 1;
          if (Math.ceil(items.indexOf(card) / 5) >= maxrow) _this3.next();
        };

        card.onEnter = function (target, card_data) {
          Activity$1.push({
            url: card_data.url,
            component: 'full',
            id: element.id,
            method: card_data.name ? 'tv' : 'movie',
            card: element,
            source: card_data.source || 'tmdb'
          });
        };

        if (object.type == 'history') {
          card.onMenu = function (target, card_data) {
            var enabled = Controller.enabled().name;
            Select.show({
              title: 'Действие',
              items: [{
                title: 'Удалить из истории',
                subtitle: 'Удалить выделенную карточку',
                one: true
              }, {
                title: 'Очистить историю',
                subtitle: 'Удалить все карточки из истории',
                all: true
              }],
              onBack: function onBack() {
                Controller.toggle(enabled);
              },
              onSelect: function onSelect(a) {
                if (a.all) {
                  Favorite.clear('history');

                  _this3.clear();

                  html.empty();

                  _this3.empty();
                } else {
                  Favorite.clear('history', card_data);
                  var index = items.indexOf(card);
                  if (index > 0) last = items[index - 1].render()[0];else if (items[index + 1]) last = items[index + 1].render()[0];
                  Arrays.remove(items, card);
                  card.destroy();

                  if (!items.length) {
                    _this3.clear();

                    html.empty();

                    _this3.empty();
                  }
                }

                Controller.toggle(enabled);
              }
            });
          };
        }

        card.visible();
        body.append(card.render());
        items.push(card);
      });
    };

    this.build = function (data) {
      total_pages = data.total_pages;
      info = new create$j();
      info.create();
      scroll.render();
      scroll.minus(info.render());
      html.append(info.render());
      html.append(scroll.render());
      this.append(data);
      scroll.append(body);
      this.activity.loader(false);
      this.activity.toggle();
    };

    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last || false, scroll.render());
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };

    this.pause = function () {};

    this.stop = function () {};

    this.render = function () {
      return html;
    };

    this.clear = function () {
      Api.clear();
      network.clear();
      Arrays.destroy(items);
      items = [];
      if (scroll) scroll.destroy();
      if (info) info.destroy();
      scroll = null;
      info = null;
    };

    this.destroy = function () {
      this.clear();
      html.remove();
      body.remove();
      network = null;
      items = null;
      html = null;
      body = null;
      info = null;
    };
  }

  function component$4(object) {
    var network = new create$n();
    var scroll = new create$m({
      mask: true,
      over: true,
      step: 250
    });
    var items = [];
    var html = $('<div></div>');
    var body = $('<div class="category-full"></div>');
    var info;
    var last;

    this.create = function () {
      var _this = this;

      this.activity.loader(true);
      Api.relise({
        page: object.page
      }, this.build.bind(this), function () {
        var empty = new create$i();
        html.append(empty.render());
        _this.start = empty.start;

        _this.activity.loader(false);

        _this.activity.toggle();
      });
      return this.render();
    };

    this.append = function (data) {
      data.forEach(function (element) {
        var card = new create$k(element, {
          card_category: true,
          card_type: true
        });
        card.create();

        card.onFocus = function (target, card_data) {
          last = target;
          scroll.update(card.render(), false);
          info.update(card_data);
        };

        card.onEnter = function (target, card_data) {
          card_data.id = card_data.tmdbID;
          Activity$1.push({
            url: '',
            component: 'full',
            id: card_data.tmdbID,
            method: card_data.name ? 'tv' : 'movie',
            card: card_data,
            source: Storage.field('source')
          });
        };

        card.onMenu = function () {};

        card.visible();
        body.append(card.render());
        items.push(card);
      });
    };

    this.build = function (data) {
      info = new create$j();
      info.create();
      scroll.minus(info.render());
      html.append(info.render());
      html.append(scroll.render());
      this.append(data);
      this.more();
      scroll.append(body);
      this.activity.loader(false);
      this.activity.toggle();
    };

    this.more = function () {
      var more = $('<div class="category-full__more selector"><span>Показать еще</span></div>');
      more.on('hover:focus', function (e) {
        Controller.collectionFocus(last || false, scroll.render());
        var next = Arrays.clone(object);
        delete next.activity;
        next.page++;
        Activity$1.push(next);
      });
      body.append(more);
    };

    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last || false, scroll.render());
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };

    this.pause = function () {};

    this.stop = function () {};

    this.render = function () {
      return html;
    };

    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      Api.clear();
      html.remove();
      body.remove();
      if (info) info.destroy();
      network = null;
      items = null;
      html = null;
      body = null;
      info = null;
    };
  }

  function create$h(data) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var html;
    Arrays.extend(data.movie, {
      title: data.movie.name,
      original_title: data.movie.original_name,
      runtime: 0,
      img: data.movie.poster_path ? Api.img(data.movie.poster_path) : 'img/img_broken.svg',
      release_date: data.movie.first_air_date
    });

    this.create = function () {
      var _this = this;

      var genres = (data.movie.genres || ['---']).slice(0, 3).map(function (a) {
        return Utils.capitalizeFirstLetter(a.name);
      }).join(', ');
      var vote = parseFloat((data.movie.vote_average || 0) + '');
      html = Template.get('view', {
        title: data.movie.title,
        original_title: data.movie.original_title,
        descr: Utils.substr(data.movie.overview || 'Без описания.', 420),
        img: data.movie.img,
        time: Utils.secondsToTime(data.movie.runtime * 60, true),
        genres: genres,
        vote: vote,
        seasons: data.movie.number_of_seasons,
        episodes: data.movie.number_of_episodes,
        year: ((data.movie.release_date || '0000') + '').slice(0, 4)
      });

      if (data.movie.number_of_seasons) {
        html.find('.is--serial').removeClass('hide');
      }

      html.find('.view__favorite > *').on('hover:enter', function (e) {
        var type = $(e.target).data('name');
        params.object.card = data.movie;
        params.object.card.source = params.object.source;
        Favorite.toggle(type, params.object.card);

        _this.favorite();
      });
      this.favorite();
    };

    this.favorite = function () {
      var status = Favorite.check(params.object.card);
      $('.view__favorite > *', html).removeClass('active');
      $('[data-name="book"]', html).toggleClass('active', status.book);
      $('[data-name="like"]', html).toggleClass('active', status.like);
      $('[data-name="wath"]', html).toggleClass('active', status.wath);
    };

    this.toggle = function () {
      var _this2 = this;

      Controller.add('view_start', {
        toggle: function toggle() {
          Controller.collectionSet(_this2.render());
          Controller.collectionFocus(false, _this2.render());
        },
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('view_start');
    };

    this.render = function () {
      return html;
    };

    this.destroy = function () {
      html.remove();
    };
  }

  function create$g(call_video) {
    var stream_url, loaded;
    var object = $('<object class="player-video_video" type="application/avplayer"</object>');
    var video = object[0];
    var listener = start$3();
    var change_scale_later;
    object.width(window.innerWidth);
    object.height(window.innerHeight); // для тестов

    /*
    let webapis = {
    	paused: true,
    	duration: 500 * 1000,
    	position: 0,
    	avplay: {
    		open: ()=>{
    
    		},
    		close: ()=>{
    			clearInterval(webapis.timer)
    		},
    		play: ()=>{
    			webapis.paused = false
    		},
    		pause: ()=>{
    			webapis.paused = true
    		},
    		setDisplayRect: ()=>{
    
    		},
    		setDisplayMethod: ()=>{
    
    		},
    		seekTo: (t)=>{
    			webapis.position = t
    		},
    		getCurrentTime: ()=>{
    			return webapis.position
    		},
    		getDuration: ()=>{
    			return webapis.duration
    		},
    		getState: ()=>{
    			return webapis.paused ? 'PAUSED' : 'PLAYNING'
    		},
    		getTotalTrackInfo: ()=>{
    			return [
    				{
    					type: 'AUDIO',
    					index: 0,
    					extra_info: '{"language":"russion"}'
    				},
    				{
    					type: 'AUDIO',
    					index: 1,
    					extra_info: '{"language":"english"}'
    				},
    				{
    					type: 'TEXT',
    					index: 0,
    					extra_info: '{"track_lang":"rus"}'
    				},
    				{
    					type: 'TEXT',
    					index: 1,
    					extra_info: '{"track_lang":"eng"}'
    				}
    			]
    		},
    		getCurrentStreamInfo: ()=>{
    			return []
    		},
    		setListener: ()=>{
    
    		},
    		prepareAsync: (call)=>{
    			setTimeout(call, 1000)
    
    			webapis.timer = setInterval(()=>{
    				if(!webapis.paused) webapis.position += 100
    
    				if(webapis.position >= webapis.duration){
    					clearInterval(webapis.timer)
    
    					webapis.position = webapis.duration
    
    					listener.send('ended')
    				}
    
    				if(!webapis.paused){
    					listener.send('timeupdate')
    
    					let s = webapis.duration / 4,
    						t = 'Welcome to subtitles'
    
    					if(webapis.position > s * 3) t = 'That\'s all I wanted to say'
    					else if(webapis.position > s * 2) t = 'This is a super taizen player'
    					else if(webapis.position > s) t = 'I want to say a few words'
    
    					listener.send('subtitle',{text:  t })
    				}
    			},30)
    		}
    	}
    }
    */

    /**
     * Установить урл
     */

    Object.defineProperty(video, "src", {
      set: function set(url) {
        if (url) {
          stream_url = url;
          webapis.avplay.open(url);
          webapis.avplay.setDisplayRect(0, 0, window.innerWidth, window.innerHeight);
          webapis.avplay.setDisplayMethod('PLAYER_DISPLAY_MODE_LETTER_BOX');

          try {
            webapis.avplay.setSilentSubtitle(false);
          } catch (e) {}
        }
      },
      get: function get() {}
    });
    /**
     * Позиция
     */

    Object.defineProperty(video, "currentTime", {
      set: function set(t) {
        try {
          webapis.avplay.seekTo(t * 1000);
        } catch (e) {}
      },
      get: function get() {
        var d = 0;

        try {
          d = webapis.avplay.getCurrentTime();
        } catch (e) {}

        return d ? d / 1000 : 0;
      }
    });
    /**
     * Длительность
     */

    Object.defineProperty(video, "duration", {
      set: function set() {},
      get: function get() {
        var d = 0;

        try {
          d = webapis.avplay.getDuration();
        } catch (e) {}

        return d ? d / 1000 : 0;
      }
    });
    /**
     * Пауза
     */

    Object.defineProperty(video, "paused", {
      set: function set() {},
      get: function get() {
        try {
          return webapis.avplay.getState() == 'PAUSED';
        } catch (e) {
          return false;
        }
      }
    });
    /**
     * Аудиодорожки
     */

    Object.defineProperty(video, "audioTracks", {
      set: function set() {},
      get: function get() {
        var totalTrackInfo = webapis.avplay.getTotalTrackInfo();
        var tracks = totalTrackInfo.filter(function (track) {
          return track.type === 'AUDIO';
        }).map(function (track) {
          var info = JSON.parse(track.extra_info);
          var item = {
            extra: JSON.parse(track.extra_info),
            index: parseInt(track.index),
            language: info.language
          };
          Object.defineProperty(item, "enabled", {
            set: function set(v) {
              if (v) {
                try {
                  webapis.avplay.setSelectTrack('AUDIO', item.index);
                } catch (e) {
                  console.log('Player', 'no change audio:', e.message);
                }
              }
            },
            get: function get() {}
          });
          return item;
        }).sort(function (a, b) {
          return a.index - b.index;
        });
        return tracks;
      }
    });
    /**
     * Субтитры
     */

    Object.defineProperty(video, "textTracks", {
      set: function set() {},
      get: function get() {
        var totalTrackInfo = webapis.avplay.getTotalTrackInfo();
        var tracks = totalTrackInfo.filter(function (track) {
          return track.type === 'TEXT';
        }).map(function (track) {
          var info = JSON.parse(track.extra_info),
              item = {
            extra: JSON.parse(track.extra_info),
            index: parseInt(track.index),
            language: info.track_lang
          };
          Object.defineProperty(item, "mode", {
            set: function set(v) {
              if (v == 'showing') {
                try {
                  webapis.avplay.setSelectTrack('TEXT', item.index);
                } catch (e) {
                  console.log('Player', 'no change text:', e.message);
                }
              }
            },
            get: function get() {}
          });
          return item;
        }).sort(function (a, b) {
          return a.index - b.index;
        });
        return tracks;
      }
    });
    Object.defineProperty(video, "videoWidth", {
      set: function set() {},
      get: function get() {
        var info = videoInfo();
        return info.Width || 0;
      }
    });
    Object.defineProperty(video, "videoHeight", {
      set: function set() {},
      get: function get() {
        var info = videoInfo();
        return info.Height || 0;
      }
    });
    /**
     * Получить информацию о видео
     * @returns Object
     */

    var videoInfo = function videoInfo() {
      try {
        var info = webapis.avplay.getCurrentStreamInfo(),
            json = {};

        for (var i = 0; i < info.length; i++) {
          var detail = info[i];

          if (detail.type == 'VIDEO') {
            json = JSON.parse(detail.extra_info);
          }
        }

        return json;
      } catch (e) {
        return {};
      }
    };
    /**
     * Меняем размер видео
     * @param {String} scale - default,cover
     */


    var changeScale = function changeScale(scale) {
      try {
        if (scale == 'cover') {
          webapis.avplay.setDisplayMethod('PLAYER_DISPLAY_MODE_FULL_SCREEN');
        } else {
          webapis.avplay.setDisplayMethod('PLAYER_DISPLAY_MODE_LETTER_BOX');
        }
      } catch (e) {
        change_scale_later = scale;
      }
    };
    /**
     * Всегда говорим да, мы можем играть
     */


    video.canPlayType = function () {
      return true;
    };
    /**
     * Вешаем кастомные события
     */


    video.addEventListener = listener.follow.bind(listener);
    /**
     * Вешаем события от плеера тайзен
     */

    webapis.avplay.setListener({
      onbufferingstart: function onbufferingstart() {
        console.log('Player', 'buffering start');
        listener.send('waiting');
      },
      onbufferingprogress: function onbufferingprogress(percent) {
        listener.send('progress', {
          percent: percent
        });
      },
      onbufferingcomplete: function onbufferingcomplete() {
        console.log('Player', 'buffering complete');
        listener.send('playing');
      },
      onstreamcompleted: function onstreamcompleted() {
        console.log('Player', 'stream completed');
        webapis.avplay.stop();
        listener.send('ended');
      },
      oncurrentplaytime: function oncurrentplaytime() {
        listener.send('timeupdate');

        if (change_scale_later) {
          change_scale_later = false;
          changeScale(change_scale_later);
        }
      },
      onerror: function onerror(eventType) {
        listener.send('error', {
          error: {
            code: 'tizen',
            message: eventType
          }
        });
      },
      onevent: function onevent(eventType, eventData) {
        console.log('Player', 'event type:', eventType, 'data:', eventData);
      },
      onsubtitlechange: function onsubtitlechange(duration, text, data3, data4) {
        listener.send('subtitle', {
          text: text
        });
      },
      ondrmevent: function ondrmevent(drmEvent, drmData) {}
    });
    /**
     * Загрузить
     */

    video.load = function () {
      if (stream_url) {
        webapis.avplay.prepareAsync(function () {
          loaded = true;
          webapis.avplay.play();

          try {
            webapis.avplay.setSilentSubtitle(false);
          } catch (e) {}

          listener.send('canplay');
          listener.send('playing');
          listener.send('loadedmetadata');
        }, function (e) {
          listener.send('error', {
            error: 'code [' + e.code + '] ' + e.message
          });
        });
      }
    };
    /**
     * Играть
     */


    video.play = function () {
      if (loaded) webapis.avplay.play();
    };
    /**
     * Пауза
     */


    video.pause = function () {
      if (loaded) webapis.avplay.pause();
    };
    /**
     * Установить масштаб
     */


    video.size = function (type) {
      changeScale(type);
    };
    /**
     * Уничтожить
     */


    video.destroy = function () {
      try {
        webapis.avplay.close();
      } catch (e) {}

      video.remove();
      listener.destroy();
    };

    call_video(video);
    return object;
  }

  function create$f(object) {
    this.state = object.state;

    this.start = function () {
      this.dispath(this.state);
    };

    this.dispath = function (action_name) {
      var action = object.transitions[action_name];

      if (action) {
        action.call(this);
      } else {
        console.log('invalid action');
      }
    };
  }

  var html$a = Template.get('player_panel');
  var listener$9 = start$3();
  var condition = {};
  var timer$4 = {};
  var tracks = [];
  var subs = [];
  var qualitys = false;
  var elems$1 = {
    peding: $('.player-panel__peding', html$a),
    position: $('.player-panel__position', html$a),
    time: $('.player-panel__time', html$a),
    timenow: $('.player-panel__timenow', html$a),
    timeend: $('.player-panel__timeend', html$a),
    title: $('.player-panel__filename', html$a),
    tracks: $('.player-panel__tracks', html$a),
    subs: $('.player-panel__subs', html$a),
    timeline: $('.player-panel__timeline', html$a),
    quality: $('.player-panel__quality', html$a)
  };
  /**
   * Отсеживаем состояние, 
   * когда надо показать панель, а когда нет
   */

  var state = new create$f({
    state: 'start',
    transitions: {
      start: function start() {
        clearTimeout(timer$4.hide);
        clearTimeout(timer$4.rewind);
        this.dispath('canplay');
      },
      canplay: function canplay() {
        if (condition.canplay) this.dispath('visible');else _visible(true);
      },
      visible: function visible() {
        if (condition.visible) _visible(true);else this.dispath('rewind');
      },
      rewind: function rewind() {
        var _this = this;

        clearTimeout(timer$4.rewind);

        if (condition.rewind) {
          _visible(true);

          timer$4.rewind = setTimeout(function () {
            condition.rewind = false;

            _this.dispath('mousemove');
          }, 1000);
        } else {
          this.dispath('mousemove');
        }
      },
      mousemove: function mousemove() {
        if (condition.mousemove) {
          _visible(true);
        }

        this.dispath('hide');
      },
      hide: function hide() {
        clearTimeout(timer$4.hide);
        timer$4.hide = setTimeout(function () {
          _visible(false);
        }, 3000);
      }
    }
  });
  html$a.find('.selector').on('hover:focus', function (e) {
  });
  html$a.find('.player-panel__playpause').on('hover:enter', function (e) {
    listener$9.send('playpause', {});
  });
  html$a.find('.player-panel__next').on('hover:enter', function (e) {
    listener$9.send('next', {});
  });
  html$a.find('.player-panel__prev').on('hover:enter', function (e) {
    listener$9.send('prev', {});
  });
  html$a.find('.player-panel__rprev').on('hover:enter', function (e) {
    listener$9.send('rprev', {});
  });
  html$a.find('.player-panel__rnext').on('hover:enter', function (e) {
    listener$9.send('rnext', {});
  });
  html$a.find('.player-panel__playlist').on('hover:enter', function (e) {
    listener$9.send('playlist', {});
  });
  html$a.find('.player-panel__tstart').on('hover:enter', function (e) {
    listener$9.send('to_start', {});
  });
  html$a.find('.player-panel__tend').on('hover:enter', function (e) {
    listener$9.send('to_end', {});
  });
  elems$1.timeline.attr('data-controller', 'player_rewind');
  elems$1.timeline.on('mousemove', function (e) {
    listener$9.send('mouse_rewind', {
      method: 'move',
      time: elems$1.time,
      percent: percent(e)
    });
  }).on('mouseout', function () {
    elems$1.time.addClass('hide');
  }).on('click', function (e) {
    listener$9.send('mouse_rewind', {
      method: 'click',
      time: elems$1.time,
      percent: percent(e)
    });
  });
  html$a.find('.player-panel__line:eq(1) .selector').attr('data-controller', 'player_panel');

  function addController() {
    Controller.add('player_rewind', {
      toggle: function toggle() {
        Controller.collectionSet(render$8());
        Controller.collectionFocus(false, render$8());
      },
      up: function up() {
        Controller.toggle('player');
      },
      down: function down() {
        toggleButtons();
      },
      right: function right() {
        listener$9.send('rnext', {});
      },
      left: function left() {
        listener$9.send('rprev', {});
      },
      gone: function gone() {
        html$a.find('.selector').removeClass('focus');
      },
      back: function back() {
        Controller.toggle('player');
        hide();
      }
    });
    Controller.add('player_panel', {
      toggle: function toggle() {
        Controller.collectionSet(render$8());
        Controller.collectionFocus($('.player-panel__playpause', html$a)[0], render$8());
      },
      up: function up() {
        toggleRewind();
      },
      right: function right() {
        Navigator.move('right');
      },
      left: function left() {
        Navigator.move('left');
      },
      down: function down() {
        Controller.toggle('player');
      },
      gone: function gone() {
        html$a.find('.selector').removeClass('focus');
      },
      back: function back() {
        Controller.toggle('player');
        hide();
      }
    });
  }

  elems$1.quality.text('auto').on('hover:enter', function () {
    if (qualitys) {
      var qs = [];

      if (Arrays.isArray(qualitys)) {
        qs = qualitys;
      } else {
        for (var i in qualitys) {
          qs.push({
            title: i,
            url: qualitys[i]
          });
        }
      }

      if (!qs.length) return;
      var enabled = Controller.enabled();
      Select.show({
        title: 'Качество',
        items: qs,
        onSelect: function onSelect(a) {
          elems$1.quality.text(a.title);
          a.enabled = true;
          if (!Arrays.isArray(qualitys)) listener$9.send('quality', {
            name: a.title,
            url: a.url
          });
          Controller.toggle(enabled.name);
        },
        onBack: function onBack() {
          Controller.toggle(enabled.name);
        }
      });
    }
  });
  /**
   * Выбор аудиодорожки
   */

  elems$1.tracks.on('hover:enter', function (e) {
    if (tracks.length) {
      tracks.forEach(function (element, p) {
        var name = [];
        name.push(p + 1);
        name.push(element.language || element.name || 'Неизвестно');
        if (element.label) name.push(element.label);

        if (element.extra) {
          if (element.extra.channels) name.push('Каналов: ' + element.extra.channels);
          if (element.extra.fourCC) name.push('Тип: ' + element.extra.fourCC);
        }

        element.title = name.join(' / ');
      });
      var enabled = Controller.enabled();
      Select.show({
        title: 'Аудиодорожки',
        items: tracks,
        onSelect: function onSelect(a) {
          tracks.forEach(function (element) {
            element.enabled = false;
            element.selected = false;
          });
          a.enabled = true;
          a.selected = true;
          Controller.toggle(enabled.name);
        },
        onBack: function onBack() {
          Controller.toggle(enabled.name);
        }
      });
    }
  });
  /**
   * Выбор субтитров
   */

  elems$1.subs.on('hover:enter', function (e) {
    if (subs.length) {
      if (subs[0].index !== -1) {
        Arrays.insert(subs, 0, {
          title: 'Отключено',
          selected: true,
          index: -1
        });
      }

      subs.forEach(function (element, p) {
        if (element.index !== -1) element.title = p + ' / ' + (element.language || element.label || 'Неизвестно');
      });
      var enabled = Controller.enabled();
      Select.show({
        title: 'Субтитры',
        items: subs,
        onSelect: function onSelect(a) {
          subs.forEach(function (element) {
            element.mode = 'disabled';
            element.selected = false;
          });
          a.mode = 'showing';
          a.selected = true;
          listener$9.send('subsview', {
            status: a.index > -1
          });
          Controller.toggle(enabled.name);
        },
        onBack: function onBack() {
          Controller.toggle(enabled.name);
        }
      });
    }
  });
  /**
   * Выбор масштаба видео
   */

  html$a.find('.player-panel__size').on('hover:enter', function (e) {
    var select = Storage.get('player_size', 'default');
    var items = [{
      title: 'По умолчанию',
      subtitle: 'Размер видео по умолчанию',
      value: 'default',
      selected: select == 'default'
    }, {
      title: 'Расширить',
      subtitle: 'Расширяет видео на весь экран',
      value: 'cover',
      selected: select == 'cover'
    }];

    if (!(Platform.is('tizen') && Storage.field('player') == 'tizen')) {
      items = items.concat([{
        title: 'Заполнить',
        subtitle: 'Вместить видео на весь экран',
        value: 'fill',
        selected: select == 'fill'
      }, {
        title: 'Увеличить 115%',
        subtitle: 'Увеличить видео на 115%',
        value: 's115',
        selected: select == 's115'
      }, {
        title: 'Увеличить 130%',
        subtitle: 'Увеличить видео на 130%',
        value: 's130',
        selected: select == 's130'
      }, {
        title: 'По вертикали 115%',
        subtitle: 'Увеличить видео на 115%',
        value: 'v115',
        selected: select == 'v115'
      }, {
        title: 'По вертикали 130%',
        subtitle: 'Увеличить видео на 130%',
        value: 'v130',
        selected: select == 'v130'
      }]);
    } else {
      if (select == 's130' || select == 'fill') {
        items[0].selected = true;
      }
    }

    Select.show({
      title: 'Размер видео',
      items: items,
      onSelect: function onSelect(a) {
        listener$9.send('size', {
          size: a.value
        });
        Controller.toggle('player_panel');
      },
      onBack: function onBack() {
        Controller.toggle('player_panel');
      }
    });
  });

  function percent(e) {
    var offset = elems$1.timeline.offset();
    var width = elems$1.timeline.width();
    return (e.clientX - offset.left) / width;
  }
  /**
   * Обновляем состояние панели
   * @param {String} need - что нужно обновить
   * @param {*} value - значение
   */


  function update$5(need, value) {
    if (need == 'position') {
      elems$1.position.css({
        width: value
      });
    }

    if (need == 'peding') {
      elems$1.peding.css({
        width: value
      });
    }

    if (need == 'timeend') {
      elems$1.timeend.text(value);
    }

    if (need == 'timenow') {
      elems$1.timenow.text(value);
    }

    if (need == 'play') {
      html$a.toggleClass('panel--paused', false);
    }

    if (need == 'pause') {
      html$a.toggleClass('panel--paused', true);
    }
  }
  /**
   * Показать или скрыть панель
   * @param {Boolean} status 
   */


  function _visible(status) {
    listener$9.send('visible', {
      status: status
    });
    html$a.toggleClass('panel--visible', status);
  }
  /**
   * Можем играть, далее отслеживаем статус
   */


  function canplay() {
    condition.canplay = true;
    state.start();
  }
  /**
   * Перемотка
   */


  function rewind$1() {
    condition.rewind = true;
    state.start();
  }

  function toggleRewind() {
    Controller.toggle('player_rewind');
  }

  function toggleButtons() {
    Controller.toggle('player_panel');
  }
  /**
   * Контроллер
   */


  function toggle$6() {
    condition.visible = true;
    state.start();
    toggleRewind();
  }
  /**
   * Показать панель
   */


  function show$2() {
    state.start();
    addController();
  }

  function mousemove() {
    condition.mousemove = true;
    state.start();
  }
  /**
   * Скрыть панель
   */


  function hide() {
    condition.visible = false;

    _visible(false);
  }
  /**
   * Установить субтитры
   * @param {Array} su 
   */


  function setSubs(su) {
    subs = su;
    elems$1.subs.toggleClass('hide', false);
  }
  /**
   * Установить дорожки
   * @param {Array} tr 
   */


  function setTracks(tr, if_no) {
    if (if_no) {
      if (!tracks.length) tracks = tr;
    } else tracks = tr;

    elems$1.tracks.toggleClass('hide', false);
  }

  function setLevels(levels, current) {
    qualitys = levels;
    elems$1.quality.text(current);
  }

  function quality(qs, url) {
    if (qs) {
      elems$1.quality.toggleClass('hide', false);
      qualitys = qs;

      for (var i in qs) {
        if (qs[i] == url) elems$1.quality.text(i);
      }
    }
  }
  /**
   * Уничтожить
   */


  function destroy$6() {
    condition = {};
    tracks = [];
    subs = [];
    qualitys = false;
    elems$1.peding.css({
      width: 0
    });
    elems$1.position.css({
      width: 0
    });
    elems$1.time.text('00:00');
    elems$1.timenow.text('00:00');
    elems$1.timeend.text('00:00');
    elems$1.quality.text('auto');
    elems$1.subs.toggleClass('hide', true);
    elems$1.tracks.toggleClass('hide', true);
    html$a.toggleClass('panel--paused', false);
  }

  function render$8() {
    return html$a;
  }

  var Panel = {
    listener: listener$9,
    render: render$8,
    toggle: toggle$6,
    show: show$2,
    destroy: destroy$6,
    hide: hide,
    canplay: canplay,
    update: update$5,
    rewind: rewind$1,
    setTracks: setTracks,
    setSubs: setSubs,
    setLevels: setLevels,
    mousemove: mousemove,
    quality: quality
  };

  function luna(params, call, fail) {
    if (call) params.onSuccess = call;

    params.onFailure = function (result) {
      console.log('WebOS', params.method + " [fail][" + result.errorCode + "] " + result.errorText);
      if (fail) fail();
    };

    webOS.service.request("luna://com.webos.media", params);
  }

  function create$e(_video) {
    var video = _video;
    var media_id;
    var subtitle_visible = false;
    var timer;
    var timer_repet;
    var count = 0;
    var count_message = 0;
    var data = {
      subs: [],
      tracks: []
    };
    this.subscribed = false;
    this.repeted = false;

    this.start = function () {
      timer = setInterval(this.search.bind(this), 300);
    };

    this.toggleSubtitles = function (status) {
      subtitle_visible = status;
      luna({
        method: 'setSubtitleEnable',
        parameters: {
          'mediaId': media_id,
          'enable': status
        }
      });
    };

    this.subtitles = function (info) {
      var _this = this;

      if (info.numSubtitleTracks) {
        var all = [];

        var add = function add(sub, index) {
          sub.index = index;
          sub.language = sub.language == '(null)' ? '' : sub.language;
          Object.defineProperty(sub, 'mode', {
            set: function set(v) {
              if (v == 'showing') {
                _this.toggleSubtitles(sub.index == -1 ? false : true);

                console.log('WebOS', 'change subtitles for id:', media_id);
                luna({
                  method: 'selectTrack',
                  parameters: {
                    'type': 'text',
                    'mediaId': media_id,
                    'index': sub.index
                  }
                });
              }
            },
            get: function get() {}
          });
          all.push(sub);
        };

        add({
          title: 'Отключить',
          selected: true
        }, -1);

        for (var i = 0; i < info.subtitleTrackInfo.length; i++) {
          add(info.subtitleTrackInfo[i], i);
        }

        data.subs = all;
        Panel.setSubs(data.subs);
      }
    };

    this.tracks = function (info) {
      if (info.numAudioTracks) {
        var all = [];

        var add = function add(track, index) {
          track.index = index;
          track.selected = index == -1;
          track.extra = {
            channels: track.channels,
            fourCC: track.codec
          };
          Object.defineProperty(track, 'enabled', {
            set: function set(v) {
              if (v) {
                console.log('WebOS', 'change audio for id:', media_id);
                luna({
                  method: 'selectTrack',
                  parameters: {
                    'type': 'audio',
                    'mediaId': media_id,
                    'index': track.index
                  }
                });
              }
            },
            get: function get() {}
          });
          all.push(track);
        };

        for (var i = 0; i < info.audioTrackInfo.length; i++) {
          add(info.audioTrackInfo[i], i);
        }

        data.tracks = all;
        Panel.setTracks(data.tracks, true);
      }
    };

    this.subscribe = function () {
      var _this2 = this;

      this.subscribed = true;
      luna({
        method: 'subscribe',
        parameters: {
          'mediaId': media_id,
          'subscribe': true
        }
      }, function (result) {
        if (result.sourceInfo && !_this2.sourceInfo) {
          _this2.sourceInfo = true;
          var info = result.sourceInfo.programInfo[0];

          _this2.subtitles(info);

          _this2.tracks(info);

          _this2.unsubscribe();

          _this2.call();
        }

        if (result.bufferRange) {
          count_message++;

          if (count_message == 30) {
            _this2.unsubscribe();

            _this2.call();
          }
        }
      }, function () {
        _this2.call();
      });
    };

    this.unsubscribe = function () {
      luna({
        method: 'unload',
        parameters: {
          'mediaId': media_id
        }
      });
    };

    this.search = function () {
      var _this3 = this;

      count++;

      if (count > 3) {
        clearInterval(timer);
        clearInterval(timer_repet);
      }

      var rootSubscribe = function rootSubscribe() {
        console.log('Webos', 'Run root', 'version:', webOS.sdk_version);

        _this3.toggleSubtitles(false);

        if (_this3.subscribed) clearInterval(timer_repet);
        if (!_this3.subscribed) _this3.subscribe();else {
          if (data.tracks.length) Panel.setTracks(data.tracks, true);
          if (data.subs.length) Panel.setSubs(data.subs);
        }
        clearInterval(timer);
      };

      console.log('Webos', 'try get id:', video.mediaId);

      if (video.mediaId) {
        media_id = video.mediaId;
        console.log('Webos', 'video id:', media_id);

        if (webOS.sdk_version) {
          if (webOS.sdk_version > 3 && webOS.sdk_version < 4) {
            rootSubscribe();
          } else rootSubscribe();
        } else rootSubscribe();
      }
      /*
      luna({
          method: 'getActivePipelines'
      },(result)=>{
                console.log('WebOS', 'getActivePipelines', result)
                result.forEach(element => {
              if(element.type == 'media' && element.id && element.is_foreground) media_id = element.id
          })
                console.log('WebOS', 'video id:', media_id)
          
          if(media_id) rootSubscribe()
          
      },()=>{
          if(video.mediaId) videoSubscribe()
      })
      */

    };

    this.call = function () {
      if (this.callback) this.callback();
      this.callback = false;
    };

    this.repet = function (new_video) {
      video = new_video;
      console.log('Webos', 'repeat to new video', new_video ? true : false);
      media_id = '';
      clearInterval(timer);
      count = 0;
      this.repeted = true;
      timer_repet = setInterval(this.search.bind(this), 300);
    };

    this.rewinded = function () {
      this.toggleSubtitles(subtitle_visible);
    };

    this.destroy = function () {
      clearInterval(timer);
      clearInterval(timer_repet);
      if (media_id) this.unsubscribe();
      data = null;
      this.subscribed = false;
      this.callback = false;
    };
  }

  function time(val) {
    var regex = /(\d+):(\d{2}):(\d{2})/;
    var parts = regex.exec(val);
    if (parts === null) return 0;

    for (var i = 1; i < 5; i++) {
      parts[i] = parseInt(parts[i], 10);
      if (isNaN(parts[i])) parts[i] = 0;
    } //hours + minutes + seconds + ms


    return parts[1] * 3600000 + parts[2] * 60000 + parts[3] * 1000;
  }

  function parseSRT(data, ms) {
    var useMs = ms ? true : false;
    data = data.replace(/\r/g, '');
    var regex = /(\d+)\n(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})/g;
    data = data.split(regex);
    data.shift();
    var items = [];

    for (var i = 0; i < data.length; i += 4) {
      items.push({
        id: data[i].trim(),
        startTime: useMs ? time(data[i + 1].trim()) : data[i + 1].trim(),
        endTime: useMs ? time(data[i + 2].trim()) : data[i + 2].trim(),
        text: data[i + 3].trim()
      });
    }

    return items;
  }

  function parse$1(data, ms) {
    if (/WEBVTT/gi.test(data)) return parseVTT(data, ms);else return parseSRT(data, ms);
  }

  function parseVTT(data, ms) {
    var useMs = ms ? true : false;
    data = data.replace(/WEBVTT/gi, '').trim();
    data = data.replace(/\r/g, '');
    data = data.replace(/(\d+):(\d+)\.(\d+) --> (\d+):(\d+)\.(\d+)/g, '00:$1:$2.$3 --> 00:$4:$5.$6');
    var regex = /(\d{2}:\d{2}:\d{2}\.\d{3}) --> (\d{2}:\d{2}:\d{2}\.\d{3})/g;
    data = data.split(regex);
    data.shift();
    var items = [];

    for (var i = 0; i < data.length; i += 3) {
      items.push({
        id: data[i].trim(),
        startTime: useMs ? time(data[i + 0].trim()) : data[i + 0].trim(),
        endTime: useMs ? time(data[i + 1].trim()) : data[i + 1].trim(),
        text: data[i + 2].trim()
      });
    }

    return items;
  }

  function create$d() {
    var parsed;
    var network = new create$n();
    this.listener = start$3();

    this.load = function (url) {
      network.silent(url, function (data) {
        if (data) {
          parsed = parse$1(data, true);
        }
      }, false, false, {
        dataType: 'text'
      });
    };

    this.update = function (time_sec) {
      var time_ms = time_sec * 1000;

      if (parsed) {
        var text = '';

        for (var i = 0; i < parsed.length; i++) {
          var sub = parsed[i];

          if (time_ms > sub.startTime && time_ms < sub.endTime) {
            text = sub.text.replace("\n", '<br>');
            break;
          }
        }

        this.listener.send('subtitle', {
          text: text.trim()
        });
      }
    };

    this.destroy = function () {
      network.clear();
      network = null;
      this.listener = null;
    };
  }

  var listener$8 = start$3();
  var html$9 = Template.get('player_video');
  var display = html$9.find('.player-video__display');
  var paused = html$9.find('.player-video__paused');
  var subtitles$1 = html$9.find('.player-video__subtitles');
  var timer$3 = {};
  var rewind_position = 0;
  var rewind_force = 0;
  var customsubs;

  var _video;

  var wait;
  var neeed_sacle;
  var webos;
  var hls;
  html$9.on('click', function () {
    if (Storage.get('navigation_type') == 'mouse') playpause();
  });
  /**
   * Добовляем события к контейнеру
   */

  function bind$2() {
    // ждем загрузки
    _video.addEventListener("waiting", function () {
      loader(true);
    }); // начали играть


    _video.addEventListener("playing", function () {
      loader(false);
    }); // видео закончилось


    _video.addEventListener('ended', function () {
      listener$8.send('ended', {});
    }); // что-то пошло не так


    _video.addEventListener('error', function (e) {
      var error = _video.error || {};
      var msg = (error.message || '').toUpperCase();

      if (msg.indexOf('EMPTY SRC') == -1) {
        if (error.code == 3) {
          listener$8.send('error', {
            error: 'Не удалось декодировать видео'
          });
        } else if (error.code == 4) {
          listener$8.send('error', {
            error: 'Видео не найдено или повреждено'
          });
        } else if (typeof error.code !== 'undefined') {
          listener$8.send('error', {
            error: 'code [' + error.code + '] details [' + msg + ']'
          });
        }
      }
    }); // прогресс буферизации


    _video.addEventListener('progress', function (e) {
      if (e.percent) {
        listener$8.send('progress', {
          down: e.percent
        });
      } else {
        var duration = _video.duration;

        if (duration > 0) {
          for (var i = 0; i < _video.buffered.length; i++) {
            if (_video.buffered.start(_video.buffered.length - 1 - i) < _video.currentTime) {
              var down = Math.max(0, Math.min(100, _video.buffered.end(_video.buffered.length - 1 - i) / duration * 100)) + "%";
              listener$8.send('progress', {
                down: down
              });
              break;
            }
          }
        }
      }
    }); // можно ли уже проигрывать?


    _video.addEventListener('canplay', function () {
      listener$8.send('canplay', {});
    }); // сколько прошло


    _video.addEventListener('timeupdate', function () {
      listener$8.send('timeupdate', {
        duration: _video.duration,
        current: _video.currentTime
      });
      listener$8.send('videosize', {
        width: _video.videoWidth,
        height: _video.videoHeight
      });
      scale();
      if (customsubs) customsubs.update(_video.currentTime);
    }); // обновляем субтитры


    _video.addEventListener('subtitle', function (e) {
      //В srt существует тег {\anX}, где X - цифра от 1 до 9, Тег определяет нестандартное положение субтитра на экране.
      //Здесь удаляется тег из строки и обрабатывается положение 8 (субтитр вверху по центру).
      //{\an8} используется когда нужно, чтобы субтитр не перекрывал надписи в нижней части экрана или субтитры вшитые в видеоряд.
      subtitles$1.removeClass('on-top');
      var posTag = e.text.match(/^{\\an(\d)}/);

      if (posTag) {
        e.text = e.text.replace(/^{\\an(\d)}/, '');

        if (posTag[1] && parseInt(posTag[1]) === 8) {
          subtitles$1.addClass('on-top');
        }
      }

      e.text = e.text.trim();
      $('> div', subtitles$1).html(e.text ? e.text : '&nbsp;').css({
        display: e.text ? 'inline-block' : 'none'
      });
    });

    _video.addEventListener('loadedmetadata', function (e) {
      listener$8.send('videosize', {
        width: _video.videoWidth,
        height: _video.videoHeight
      });
      scale();
      loaded();
    }); // для страховки


    _video.volume = 1;
    _video.muted = false;
  }
  /**
   * Масштаб видео
   */


  function scale() {
    if (!neeed_sacle) return;
    var vw = _video.videoWidth,
        vh = _video.videoHeight,
        rt = 1,
        sx = 1.01,
        sy = 1.01;
    if (vw == 0 || vh == 0 || typeof vw == 'undefined') return;

    var increase = function increase(sfx, sfy) {
      rt = Math.min(window.innerWidth / vw, window.innerHeight / vh);
      sx = sfx;
      sy = sfy;
    };

    if (neeed_sacle == 'default') {
      rt = Math.min(window.innerWidth / vw, window.innerHeight / vh);
    } else if (neeed_sacle == 'fill') {
      rt = Math.min(window.innerWidth / vw, window.innerHeight / vh);
      sx = window.innerWidth / (vw * rt);
      sy = window.innerHeight / (vh * rt);
    } else if (neeed_sacle == 's115') {
      increase(1.15, 1.15);
    } else if (neeed_sacle == 's130') {
      increase(1.34, 1.34);
    } else if (neeed_sacle == 'v115') {
      increase(1.01, 1.15);
    } else if (neeed_sacle == 'v130') {
      increase(1.01, 1.34);
    } else {
      rt = Math.min(window.innerWidth / vw, window.innerHeight / vh);
      vw = vw * rt;
      vh = vh * rt;
      rt = Math.max(window.innerWidth / vw, window.innerHeight / vh);
      sx = rt;
      sy = rt;
    }

    sx = sx.toFixed(2);
    sy = sy.toFixed(2);

    if (Platform.is('orsay') || Storage.field('player_scale_method') == 'calculate') {
      var nw = vw * rt,
          nh = vh * rt;
      var sz = {
        width: Math.round(nw * sx) + 'px',
        height: Math.round(nh * sy) + 'px',
        marginLeft: Math.round(window.innerWidth / 2 - nw * sx / 2) + 'px',
        marginTop: Math.round(window.innerHeight / 2 - nh * sy / 2) + 'px'
      };
    } else {
      var sz = {
        width: Math.round(window.innerWidth) + 'px',
        height: Math.round(window.innerHeight) + 'px',
        transform: 'scaleX(' + sx + ') scaleY(' + sy + ')'
      };
    }

    $(_video).css(sz);
    neeed_sacle = false;
  }
  /**
   * Смотрим есть ли дорожки и сабы
   */


  function loaded() {
    var tracks = [];
    var subs = _video.customSubs || _video.textTracks || [];

    if (hls && hls.audioTracks && hls.audioTracks.length) {
      tracks = hls.audioTracks;
      tracks.forEach(function (track) {
        if (hls.audioTrack == track.id) track.selected = true;
        Object.defineProperty(track, "enabled", {
          set: function set(v) {
            if (v) hls.audioTrack = track.id;
          },
          get: function get() {}
        });
      });
    } else if (_video.audioTracks && _video.audioTracks.length) tracks = _video.audioTracks;

    if (webos && webos.sourceInfo) tracks = [];

    if (tracks.length) {
      if (!Arrays.isArray(tracks)) {
        var new_tracks = [];

        for (var index = 0; index < tracks.length; index++) {
          new_tracks.push(tracks[index]);
        }

        tracks = new_tracks;
      }

      listener$8.send('tracks', {
        tracks: tracks
      });
    }

    if (subs.length) {
      if (!Arrays.isArray(subs)) {
        var new_subs = [];

        for (var _index = 0; _index < subs.length; _index++) {
          new_subs.push(subs[_index]);
        }

        subs = new_subs;
      }

      listener$8.send('subs', {
        subs: subs
      });
    }

    if (hls && hls.levels) {
      var current_level = 'AUTO';
      hls.levels.forEach(function (level, i) {
        level.title = level.qu ? level.qu : level.width + 'x' + level.height;

        if (hls.currentLevel == i) {
          current_level = level.title;
          level.selected = true;
        }

        Object.defineProperty(level, "enabled", {
          set: function set(v) {
            if (v) hls.currentLevel = i;
          },
          get: function get() {}
        });
      });
      listener$8.send('levels', {
        levels: hls.levels,
        current: current_level
      });
    }
  }

  function customSubs(subs) {
    _video.customSubs = subs;
    customsubs = new create$d();
    customsubs.listener.follow('subtitle', function (e) {
      $('> div', subtitles$1).html(e.text ? e.text : '&nbsp;').css({
        display: e.text ? 'inline-block' : 'none'
      });
    });
    var index = -1;
    subs.forEach(function (sub) {
      index++;
      if (typeof sub.index == 'undefined') sub.index = index;

      if (!sub.ready) {
        sub.ready = true;
        Object.defineProperty(sub, "mode", {
          set: function set(v) {
            if (v == 'showing') {
              customsubs.load(sub.url);
            }
          },
          get: function get() {}
        });
      }
    });
  }
  /**
   * Включить или выключить субтитры
   * @param {Boolean} status 
   */


  function subsview(status) {
    subtitles$1.toggleClass('hide', !status);
  }
  /**
   * Применяет к блоку субтитров пользовательские настройки
   */


  function applySubsSettings() {
    var hasStroke = Storage.field('subtitles_stroke'),
        hasBackdrop = Storage.field('subtitles_backdrop'),
        size = Storage.field('subtitles_size');
    subtitles$1.removeClass('has--stroke has--backdrop size--normal size--large size--small');
    subtitles$1.addClass('size--' + size);

    if (hasStroke) {
      subtitles$1.addClass('has--stroke');
    }

    if (hasBackdrop) {
      subtitles$1.addClass('has--backdrop');
    }
  }
  /**
   * Создать контейнер для видео
   */


  function create$c() {
    var videobox;

    if (Platform.is('tizen') && Storage.field('player') == 'tizen') {
      videobox = create$g(function (object) {
        _video = object;
      });
    } else {
      videobox = $('<video class="player-video__video" poster="./img/video_poster.png" crossorigin="anonymous"></video>');
      _video = videobox[0];
    }

    applySubsSettings();
    display.append(videobox);

    if (Platform.is('webos') && !webos) {
      webos = new create$e(_video);

      webos.callback = function () {
        var src = _video.src;
        var sub = _video.customSubs;
        console.log('WebOS', 'video loaded');
        $(_video).remove();
        url$2(src);
        _video.customSubs = sub;
        webos.repet(_video);
        listener$8.send('reset_continue', {});
      };

      webos.start();
    }

    bind$2();
  }
  /**
   * Показать згразку или нет
   * @param {Boolean} status 
   */


  function loader(status) {
    wait = status;
    html$9.toggleClass('video--load', status);
  }
  /**
   * Устанавливаем ссылку на видео
   * @param {String} src 
   */


  function url$2(src) {
    loader(true);

    if (hls) {
      hls.destroy();
      hls = false;
    }

    create$c();

    if (/.m3u8/.test(src) && typeof Hls !== 'undefined') {
      if (navigator.userAgent.toLowerCase().indexOf('maple') > -1) src += '|COMPONENT=HLS';
      if (_video.canPlayType('application/vnd.apple.mpegurl')) load$1(src);else if (Hls.isSupported()) {
        try {
          hls = new Hls();
          hls.attachMedia(_video);
          hls.loadSource(src);
          hls.on(Hls.Events.ERROR, function (event, data) {
            if (data.details === Hls.ErrorDetails.MANIFEST_PARSING_ERROR) {
              if (data.reason === "no EXTM3U delimiter") {
                load$1(src);
              }
            }
          });
          hls.on(Hls.Events.MANIFEST_LOADED, function () {
            play$1();
          });
        } catch (e) {
          console.log('Player', 'HLS play error:', e.message);
          load$1(src);
        }
      } else load$1(src);
    } else load$1(src);
  }

  function load$1(src) {
    _video.src = src;

    _video.load();

    play$1();
  }
  /**
   * Играем
   */


  function play$1() {
    var playPromise;

    try {
      playPromise = _video.play();
    } catch (e) {}

    if (playPromise !== undefined) {
      playPromise.then(function () {
        console.log('Player', 'start plaining');
      })["catch"](function (e) {
        console.log('Player', 'play promise error:', e.message);
      });
    }

    paused.addClass('hide');
    listener$8.send('play', {});
  }
  /**
   * Пауза
   */


  function pause() {
    var pausePromise;

    try {
      pausePromise = _video.pause();
    } catch (e) {}

    if (pausePromise !== undefined) {
      pausePromise.then(function () {
        console.log('Player', 'pause');
      })["catch"](function (e) {
        console.log('Player', 'pause promise error:', e.message);
      });
    }

    paused.removeClass('hide');
    listener$8.send('pause', {});
  }
  /**
   * Играем или пауза
   */


  function playpause() {
    if (wait || rewind_position) return;

    if (_video.paused) {
      play$1();
      listener$8.send('play', {});
    } else {
      pause();
      listener$8.send('pause', {});
    }
  }
  /**
   * Завершаем перемотку
   * @param {Boolean} immediately - завершить немедленно
   */


  function rewindEnd(immediately) {
    clearTimeout(timer$3.rewind_call);
    timer$3.rewind_call = setTimeout(function () {
      _video.currentTime = rewind_position;
      rewind_position = 0;
      rewind_force = 0;
      play$1();
      if (webos) webos.rewinded();
    }, immediately ? 0 : 500);
  }
  /**
   * Подготовка к перемотке
   * @param {Int} position_time - новое время
   * @param {Boolean} immediately - завершить немедленно
   */


  function rewindStart(position_time, immediately) {
    if (!_video.duration) return;
    rewind_position = Math.max(0, Math.min(position_time, _video.duration));
    pause();
    if (rewind_position == 0) _video.currentTime = 0;else if (rewind_position == _video.duration) _video.currentTime = _video.duration;
    timer$3.rewind = Date.now();
    listener$8.send('timeupdate', {
      duration: _video.duration,
      current: rewind_position
    });
    listener$8.send('rewind', {});
    rewindEnd(immediately);
  }
  /**
   * Начать перематывать
   * @param {Boolean} forward - направление, true - вперед
   * @param {Int} custom_step - свое значение в секундах
   */


  function rewind(forward, custom_step) {
    if (_video.duration) {
      var time = Date.now(),
          step = _video.duration / (30 * 60),
          mini = time - (timer$3.rewind || 0) > 50 ? 20 : 60;

      if (rewind_position == 0) {
        rewind_force = Math.min(mini, custom_step || 30 * step);
        rewind_position = _video.currentTime;
      }

      rewind_force *= 1.03;

      if (forward) {
        rewind_position += rewind_force;
      } else {
        rewind_position -= rewind_force;
      }

      rewindStart(rewind_position);
    }
  }
  /**
   * Размер видео, масштаб
   * @param {String} type 
   */


  function size$1(type) {
    neeed_sacle = type;
    scale();
    if (_video.size) _video.size(type);
  }
  /**
   * Перемотка на позицию 
   * @param {Float} type 
   */


  function to(seconds) {
    pause();
    if (seconds == -1) _video.currentTime = _video.duration;else _video.currentTime = seconds;
    play$1();
  }
  /**
   * Уничтожить
   */


  function destroy$5() {
    subsview(false);
    neeed_sacle = false;
    paused.addClass('hide');
    if (webos) webos.destroy();
    webos = null;

    if (hls) {
      hls.destroy();
      hls = false;
    }

    if (customsubs) {
      customsubs.destroy();
      customsubs = false;
    }

    if (_video) {
      if (_video.destroy) _video.destroy();else {
        _video.src = "";

        _video.load();
      }
    }

    display.empty();
    loader(false);
  }

  function render$7() {
    return html$9;
  }

  var Video = {
    listener: listener$8,
    url: url$2,
    render: render$7,
    destroy: destroy$5,
    playpause: playpause,
    rewind: rewind,
    play: play$1,
    pause: pause,
    size: size$1,
    subsview: subsview,
    customSubs: customSubs,
    to: to,
    video: function video() {
      return _video;
    }
  };

  var html$8 = Template.get('player_info');
  var listener$7 = start$3();
  var network$3 = new create$n();
  var elems = {
    name: $('.player-info__name', html$8),
    size: $('.value--size span', html$8),
    stat: $('.value--stat span', html$8),
    speed: $('.value--speed span', html$8),
    error: $('.player-info__error', html$8)
  };
  var error, stat_timer;
  Utils.time(html$8);
  /**
   * Установить значение
   * @param {String} need 
   * @param {*} value 
   */

  function set$2(need, value) {
    if (need == 'name') elems.name.html(value);else if (need == 'size' && value.width && value.height) elems.size.text(value.width + 'x' + value.height);else if (need == 'error') {
      clearTimeout(error);
      elems.error.removeClass('hide').text(value);
      error = setTimeout(function () {
        elems.error.addClass('hide');
      }, 5000);
    } else if (need == 'stat') stat$1(value);
  }
  /**
   * Показываем статистику по торренту
   * @param {*} url 
   */


  function stat$1(url) {
    var wait = 0;
    elems.stat.text('- / - • - seeds');
    elems.speed.text('--');

    var update = function update() {
      // если панель скрыта, то зачем каждую секунду чекать? хватит и 5 сек
      // проверено, если ставить на паузу, разадача удаляется, но если чекать постоянно, то все норм
      if (!html$8.hasClass('info--visible')) {
        wait++;
        if (wait <= 5) return;else wait = 0;
      }

      network$3.timeout(2000);
      network$3.silent(url.replace('preload', 'stat').replace('play', 'stat'), function (data) {
        elems.stat.text((data.active_peers || 0) + ' / ' + (data.total_peers || 0) + ' • ' + (data.connected_seeders || 0) + ' seeds');
        elems.speed.text(data.download_speed ? Utils.bytesToSize(data.download_speed * 8, true) + '/s' : '0.0');
        listener$7.send('stat', {
          data: data
        });
      });
    };

    stat_timer = setInterval(update, 2000);
    update();
  }
  /**
   * Показать скрыть инфо
   * @param {Boolean} status 
   */


  function toggle$5(status) {
    html$8.toggleClass('info--visible', status);
  }
  /**
   * Уничтожить
   */


  function destroy$4() {
    elems.size.text('Загрузка...');
    elems.stat.text('');
    elems.speed.text('');
    elems.error.addClass('hide');
    clearTimeout(error);
    clearInterval(stat_timer);
    network$3.clear();
  }

  function render$6() {
    return html$8;
  }

  var Info = {
    listener: listener$7,
    render: render$6,
    set: set$2,
    toggle: toggle$5,
    destroy: destroy$4
  };

  var listener$6 = start$3();
  var current = '';
  var playlist$1 = [];
  var position$1 = 0;
  /**
   * Показать плейлист
   */

  function show$1() {
    active$3();
    var enabled = Controller.enabled();
    Select.show({
      title: 'Плейлист',
      items: playlist$1,
      onSelect: function onSelect(a) {
        Controller.toggle(enabled.name);
        listener$6.send('select', {
          item: a
        });
      },
      onBack: function onBack() {
        Controller.toggle(enabled.name);
      }
    });
  }
  /**
   * Установить активным
   */


  function active$3() {
    playlist$1.forEach(function (element) {
      element.selected = element.url == current;
      if (element.selected) position$1 = playlist$1.indexOf(element);
    });
  }
  /**
   * Назад
   */


  function prev() {
    active$3();

    if (position$1 > 1) {
      listener$6.send('select', {
        item: playlist$1[position$1 - 1]
      });
    }
  }
  /**
   * Далее
   */


  function next() {
    active$3();

    if (position$1 < playlist$1.length - 1) {
      listener$6.send('select', {
        item: playlist$1[position$1 + 1]
      });
    }
  }
  /**
   * Установить плейлист
   * @param {Array} p 
   */


  function set$1(p) {
    playlist$1 = p;
  }
  /**
   * Установить текуший урл
   * @param {String} u 
   */


  function url$1(u) {
    current = u;
  }

  var Playlist = {
    listener: listener$6,
    show: show$1,
    url: url$1,
    set: set$1,
    prev: prev,
    next: next
  };

  var widgetAPI,
      tvKey,
      pluginAPI,
      orsay_loaded,
      orsay_call = Date.now();

  function init$a() {
    $('body').append($("<div style=\"position: absolute; left: -1000px; top: -1000px;\">\n    <object id=\"pluginObjectNNavi\" border=\"0\" classid=\"clsid:SAMSUNG-INFOLINK-NNAVI\" style=\"opacity: 0.0; background-color: #000; width: 1px; height: 1px;\"></object>\n    <object id=\"pluginObjectTVMW\" border=\"0\" classid=\"clsid:SAMSUNG-INFOLINK-TVMW\" style=\"opacity: 0.0; background-color: #000; width: 1px; height: 1px;\"></object>\n    <object id=\"pluginObjectSef\" border=\"0\" classid=\"clsid:SAMSUNG-INFOLINK-SEF\" style=\"opacity:0.0;background-color:#000;width:1px;height:1px;\"></object>\n</div>"));
    Utils.putScript(['$MANAGER_WIDGET/Common/API/Widget.js', '$MANAGER_WIDGET/Common/API/TVKeyValue.js', '$MANAGER_WIDGET/Common/API/Plugin.js'], function () {
      try {
        if (typeof Common !== 'undefined' && Common.API && Common.API.TVKeyValue && Common.API.Plugin && Common.API.Widget) {
          widgetAPI = new Common.API.Widget();
          tvKey = new Common.API.TVKeyValue();
          pluginAPI = new Common.API.Plugin();
          window.onShow = orsayOnshow;
          setTimeout(function () {
            orsayOnshow();
          }, 2000);
          widgetAPI.sendReadyEvent();
        } else {
          if (orsay_call + 5 * 1000 > Date.now()) setTimeout(orsayOnLoad, 50);
        }
      } catch (e) {}
    });
  }

  function orsayOnshow() {
    if (orsay_loaded) return;
    orsay_loaded = true;

    try {
      //Включает анимацию изменения громкости на ТВ и т.д.
      pluginAPI.SetBannerState(1); //Отключает перехват кнопок, этими кнопками управляет система ТВ

      pluginAPI.unregistKey(tvKey.KEY_INFO);
      pluginAPI.unregistKey(tvKey.KEY_TOOLS);
      pluginAPI.unregistKey(tvKey.KEY_MENU);
      pluginAPI.unregistKey(tvKey.KEY_VOL_UP);
      pluginAPI.unregistKey(tvKey.KEY_VOL_DOWN);
      pluginAPI.unregistKey(tvKey.KEY_MUTE);
    } catch (e) {}
  }

  function exit() {
    widgetAPI.sendReturnEvent();
  }

  var Orsay = {
    init: init$a,
    exit: exit
  };

  var enabled$2 = false;
  var listener$5 = start$3();
  var lastdown = 0;
  var timer$2;
  var longpress;

  function toggle$4(new_status) {
    enabled$2 = new_status;
    listener$5.send('toggle', {
      status: enabled$2
    });
  }

  function enable$2() {
    toggle$4(true);
  }

  function disable$1() {
    toggle$4(false);
  }

  function isEnter(keycode) {
    return keycode == 13 || keycode == 29443 || keycode == 117 || keycode == 65385;
  }

  function keyCode(e) {
    var keycode;

    if (window.event) {
      keycode = e.keyCode;
    } else if (e.which) {
      keycode = e.which;
    }

    return keycode;
  }

  function init$9() {
    window.addEventListener("keydown", function (e) {
      lastdown = keyCode(e);

      if (!timer$2) {
        timer$2 = setTimeout(function () {
          if (isEnter(lastdown)) {
            longpress = true;
            listener$5.send('longdown', {});
            Controller["long"]();
          }
        }, 800);
      }
    });
    window.addEventListener("keyup", function (e) {
      clearTimeout(timer$2);
      timer$2 = null;
      listener$5.send('keyup', {
        code: keyCode(e),
        enabled: enabled$2,
        event: e
      });

      if (!longpress) {
        if (isEnter(keyCode(e)) && !e.defaultPrevented) Controller.enter();
      } else longpress = false;
    });
    window.addEventListener("keydown", function (e) {
      var keycode = keyCode(e); //console.log('Keypdad', 'keydown: ', keycode, Date.now() - time)
      listener$5.send('keydown', {
        code: keycode,
        enabled: enabled$2,
        event: e
      });
      if (e.defaultPrevented) return;
      if (isEnter(keycode)) return;
      if (!enabled$2) return; //отключить все
      //4 - Samsung orsay

      if (keycode == 37 || keycode == 4) {
        Controller.move('left');
      } //29460 - Samsung orsay


      if (keycode == 38 || keycode == 29460) {
        Controller.move('up');
      } //5 - Samsung orsay


      if (keycode == 39 || keycode == 5) {
        Controller.move('right');
      } //5 - Samsung orsay
      //29461 - Samsung orsay


      if (keycode == 40 || keycode == 29461) {
        Controller.move('down');
      } //33 - LG; 427 - Samsung


      if (keycode == 33 || keycode == 427) {
        Controller.move('toup');
      } //34 - LG; 428 - Samsung


      if (keycode == 34 || keycode == 428) {
        Controller.move('todown');
      } //Абсолютный Enter
      //10252 - Samsung tizen


      if (keycode == 32 || keycode == 179 || keycode == 10252) {
        Controller.trigger('playpause');
      } //Samsung media
      //71 - Samsung orsay


      if (keycode == 415 || keycode == 71) {
        Controller.trigger('play');
      } //Samsung stop


      if (keycode == 413) {
        Controller.trigger('stop');
      } //69 - Samsung orsay


      if (keycode == 412 || keycode == 69 || keycode == 177) {
        Controller.trigger('rewindBack');
      } //72 - Samsung orsay


      if (keycode == 418 || keycode == 417 || keycode == 72 || keycode == 176) {
        Controller.trigger('rewindForward');
      } //74 - Samsung orsay


      if (keycode == 19 || keycode == 74) {
        Controller.trigger('pause');
      }

      if (keycode == 457) {
        Controller.trigger('info');
      } //E-Manual


      if (keycode == 10146) {
        e.preventDefault();
      }

      if (keycode == 10133) {
        Controller.toggle('settings');
      } //Кнопка назад
      //8 - браузер
      //27
      //461 - LG
      //10009 - Samsung
      //88 - Samsung orsay


      if (keycode == 8 || keycode == 27 || keycode == 461 || keycode == 10009 || keycode == 88) {
        e.preventDefault();
        Activity$1.back();
        return false;
      } //Exit orsay


      if (keycode == 45) {
        Orsay.exit();
      }

      e.preventDefault();
    });
  }

  var Keypad = {
    listener: listener$5,
    init: init$9,
    enable: enable$2,
    disable: disable$1
  };

  var listener$4 = start$3();
  var enabled$1 = false;
  var worked = false;
  var chrome = false;
  var img;
  var html$7 = Template.get('screensaver');
  var movies = [];
  var timer$1 = {};
  var position = 0;
  var slides$1 = 'one';
  var direct = ['lt', 'rt', 'br', 'lb', 'ct'];
  html$7.on('click', function () {
    if (isWorked()) stopSlideshow();
  });

  function toggle$3(is_enabled) {
    enabled$1 = is_enabled;
    if (enabled$1) resetTimer();else clearTimeout(timer$1.wait);
    listener$4.send('toggle', {
      status: enabled$1
    });
  }

  function enable$1() {
    toggle$3(true);
  }

  function disable() {
    toggle$3(false);
  }

  function resetTimer() {
    if (!enabled$1) return;
    clearTimeout(timer$1.wait);
    if (!Storage.field('screensaver')) return;
    timer$1.wait = setTimeout(function () {
      if (Storage.field('screensaver_type') == 'nature') startSlideshow();else if (Storage.field('screensaver_type') == 'chrome') startChrome();else if (movies.length === 0) {
        Api.screensavers(function (data) {
          movies = data;
          startSlideshow();
        }, resetTimer);
      } else {
        startSlideshow();
      }
    }, 300 * 1000); //300 * 1000 = 5 минут
  }

  function startChrome() {
    worked = true;
    chrome = $('<div class="screensaver-chrome"><iframe src="https://clients3.google.com/cast/chromecast/home" class="screensaver-chrome__iframe"></iframe><div class="screensaver-chrome__overlay"></div></div>');
    $('body').append(chrome);
  }

  function startSlideshow() {
    if (!Storage.field('screensaver')) return;
    worked = true;
    html$7.fadeIn(300);
    Utils.time(html$7);
    nextSlide();
    timer$1.work = setInterval(function () {
      nextSlide();
    }, 30000);
    timer$1.start = setTimeout(function () {
      html$7.addClass('visible');
    }, 5000);
  }

  function nextSlide() {
    var movie = movies[position];
    var image = Storage.field('screensaver_type') == 'nature' ? 'https://source.unsplash.com/1600x900/?nature&order_by=relevant&v=' + Math.random() : Api.img(movie.backdrop_path, 'original');
    img = null;
    img = new Image();
    img.src = image;

    img.onload = function () {
      var to = $('.screensaver__slides-' + (slides$1 == 'one' ? 'two' : 'one'), html$7);
      to[0].src = img.src;
      to.removeClass(direct.join(' ') + ' animate').addClass(direct[Math.floor(Math.random() * direct.length)]);
      setTimeout(function () {
        $('.screensaver__title', html$7).removeClass('visible');
        $('.screensaver__slides-' + slides$1, html$7).removeClass('visible');
        slides$1 = slides$1 == 'one' ? 'two' : 'one';
        to.addClass('visible').addClass('animate');

        if (movie) {
          setTimeout(function () {
            $('.screensaver__title-name', html$7).text(movie.title || movie.name);
            $('.screensaver__title-tagline', html$7).text(movie.original_title || movie.original_name);
            $('.screensaver__title', html$7).addClass('visible');
          }, 500);
        }
      }, 3000);
    };

    img.onerror = function (e) {
      console.error(e);
    };

    position++;
    if (position >= movies.length) position = 0;
  }

  function stopSlideshow() {
    setTimeout(function () {
      worked = false;
    }, 300);
    html$7.fadeOut(300, function () {
      html$7.removeClass('visible');
    });
    clearInterval(timer$1.work);
    clearTimeout(timer$1.start);
    movies = [];

    if (chrome) {
      chrome.remove();
      chrome = false;
    }
  }

  function init$8() {
    $('body').append(html$7);
    resetTimer();
    Keypad.listener.follow('keydown', function (e) {
      resetTimer();

      if (worked) {
        stopSlideshow();
        e.event.preventDefault(); //чтобы при выходе из скринсейвера не нажалось что-ниубдь в ui
      }
    });
    Keypad.listener.follow('keyup', function (e) {
      if (worked) e.event.preventDefault();
    });
  }

  function isWorked() {
    return enabled$1 ? worked : enabled$1;
  }

  function render$5() {
    return html$7;
  }

  var Screensaver = {
    listener: listener$4,
    init: init$8,
    enable: enable$1,
    render: render$5,
    disable: disable,
    isWorked: isWorked,
    stopSlideshow: stopSlideshow
  };

  var network$2 = new create$n();

  function url() {
    var u = ip();
    return u ? Utils.checkHttp(u) : u;
  }

  function ip() {
    return Storage.get(Storage.field('torrserver_use_link') == 'two' ? 'torrserver_url_two' : 'torrserver_url');
  }

  function my(success, fail) {
    var data = JSON.stringify({
      action: 'list'
    });
    clear$1();
    network$2.silent(url() + '/torrents', function (result) {
      if (result.length) success(result);else fail();
    }, fail, data);
  }

  function add$4(object, success, fail) {
    var data = JSON.stringify({
      action: 'add',
      link: object.link,
      title: '[LAMPA] ' + (object.title + '').replace('??', '?'),
      poster: object.poster,
      data: object.data ? JSON.stringify(object.data) : '',
      save_to_db: true
    });
    clear$1();
    network$2.silent(url() + '/torrents', success, fail, data);
  }

  function hash$1(object, success, fail) {
    var data = JSON.stringify({
      action: 'add',
      link: object.link,
      title: '[LAMPA] ' + (object.title + '').replace('??', '?'),
      poster: object.poster,
      data: object.data ? JSON.stringify(object.data) : '',
      save_to_db: Storage.get('torrserver_savedb', 'false')
    });
    clear$1();
    network$2.silent(url() + '/torrents', success, function (a, c) {
      fail(network$2.errorDecode(a, c));
    }, data);
  }

  function files$1(hash, success, fail) {
    var data = JSON.stringify({
      action: 'get',
      hash: hash
    });
    clear$1();
    network$2.timeout(2000);
    network$2.silent(url() + '/torrents', function (json) {
      if (json.file_stats) {
        success(json);
      }
    }, fail, data);
  }

  function connected(success, fail) {
    clear$1();
    network$2.timeout(5000);
    network$2.silent(url() + '/settings', function (json) {
      if (typeof json.CacheSize == 'undefined') {
        fail('Не удалось подтвердить версию Matrix');
      } else {
        success(json);
      }
    }, function (a, c) {
      fail(network$2.errorDecode(a, c));
    }, JSON.stringify({
      action: 'get'
    }));
  }

  function stream(path, hash, id) {
    return url() + '/stream/' + encodeURIComponent(path.split('\\').pop().split('/').pop()) + '?link=' + hash + '&index=' + id + '&' + (Storage.field('torrserver_preload') ? 'preload' : 'play');
  }

  function drop(hash, success, fail) {
    var data = JSON.stringify({
      action: 'drop',
      hash: hash
    });
    clear$1();
    network$2.silent(url() + '/torrents', success, fail, data, {
      dataType: 'text'
    });
  }

  function remove(hash, success, fail) {
    var data = JSON.stringify({
      action: 'rem',
      hash: hash
    });
    clear$1();
    network$2.silent(url() + '/torrents', success, fail, data, {
      dataType: 'text'
    });
  }

  function parse(file_path, movie, is_file) {
    var path = file_path.toLowerCase();
    var data = {
      hash: '',
      season: 0,
      episode: 0,
      serial: movie.number_of_seasons ? true : false
    };
    var math = path.match(/s([0-9]+)\.?ep?([0-9]+)/);
    if (!math) math = path.match(/s([0-9]{2})([0-9]+)/);
    if (!math) math = path.match(/[ |\[|(]([0-9]{1,2})x([0-9]+)/);

    if (!math) {
      math = path.match(/[ |\[|(]([0-9]{1,3}) of ([0-9]+)/);
      if (math) math = [0, 1, math[1]];
    }

    if (!math) {
      math = path.match(/ep?([0-9]+)/);
      if (math) math = [0, 0, math[1]];
    }

    if (is_file) {
      data.hash = Utils.hash(file_path);
    } else if (math && movie.number_of_seasons) {
      data.season = parseInt(math[1]);
      data.episode = parseInt(math[2]);

      if (data.season === 0) {
        math = path.match(/s([0-9]+)/);
        if (math) data.season = parseInt(math[1]);
      }

      if (data.episode === 0) {
        math = path.match(/ep?([0-9]+)/);
        if (math) data.episode = parseInt(math[1]);
      }

      if (isNaN(data.season)) data.season = 0;
      if (isNaN(data.episode)) data.episode = 0;

      if (data.season && data.episode) {
        data.hash = [Utils.hash(movie.original_title), data.season, data.episode].join('_');
      } else if (data.episode) {
        data.season = 1;
        data.hash = [Utils.hash(movie.original_title), data.season, data.episode].join('_');
      } else {
        hash$1 = Utils.hash(file_path);
      }
    } else if (movie.original_title && !data.serial) {
      data.hash = Utils.hash(movie.original_title);
    } else {
      data.hash = Utils.hash(file_path);
    }

    return data;
  }

  function clear$1() {
    network$2.clear();
  }

  var Torserver = {
    ip: ip,
    my: my,
    add: add$4,
    url: url,
    hash: hash$1,
    files: files$1,
    clear: clear$1,
    drop: drop,
    stream: stream,
    remove: remove,
    connected: connected,
    parse: parse
  };

  var html$6 = Template.get('player');
  html$6.append(Video.render());
  html$6.append(Panel.render());
  html$6.append(Info.render());
  var callback$2;
  var work = false;
  var network$1 = new create$n();
  var preloader = {
    wait: false
  };
  html$6.on('mousemove', function () {
    if (Storage.get('navigation_type') == 'mouse') Panel.mousemove();
  });
  /**
   * Подписываемся на события
   */

  Video.listener.follow('timeupdate', function (e) {
    Panel.update('time', Utils.secondsToTime(e.current | 0, true));
    Panel.update('timenow', Utils.secondsToTime(e.current || 0));
    Panel.update('timeend', Utils.secondsToTime(e.duration || 0));
    Panel.update('position', e.current / e.duration * 100 + '%');

    if (work && work.timeline && e.duration) {
      if (Storage.field('player_timecode') == 'continue' && !work.timeline.continued) {
        var prend = e.duration - 15,
            posit = Math.round(e.duration * work.timeline.percent / 100);
        if (posit > 10) Video.to(posit > prend ? prend : posit);
        work.timeline.continued = true;
      } else {
        work.timeline.percent = Math.round(e.current / e.duration * 100);
      }
    }
  });
  Video.listener.follow('progress', function (e) {
    Panel.update('peding', e.down);
  });
  Video.listener.follow('canplay', function (e) {
    Panel.canplay();
  });
  Video.listener.follow('play', function (e) {
    Screensaver.disable();
    Panel.update('play');
  });
  Video.listener.follow('pause', function (e) {
    Screensaver.enable();
    Panel.update('pause');
  });
  Video.listener.follow('rewind', function (e) {
    Panel.rewind();
  });
  Video.listener.follow('ended', function (e) {
    if (Storage.field('playlist_next')) Playlist.next();
  });
  Video.listener.follow('tracks', function (e) {
    Panel.setTracks(e.tracks);
  });
  Video.listener.follow('subs', function (e) {
    Panel.setSubs(e.subs);
  });
  Video.listener.follow('levels', function (e) {
    Panel.setLevels(e.levels, e.current);
  });
  Video.listener.follow('videosize', function (e) {
    Info.set('size', e);
  });
  Video.listener.follow('error', function (e) {
    Info.set('error', e.error);
  });
  Video.listener.follow('reset_continue', function (e) {
    if (work && work.timeline) work.timeline.continued = false;
  });
  Panel.listener.follow('mouse_rewind', function (e) {
    var vid = Video.video();

    if (vid && vid.duration) {
      e.time.removeClass('hide').text(Utils.secondsToTime(vid.duration * e.percent)).css('left', e.percent * 100 + '%');

      if (e.method == 'click') {
        Video.to(vid.duration * e.percent);
      }
    }
  });
  Panel.listener.follow('playpause', function (e) {
    Video.playpause();
  });
  Panel.listener.follow('playlist', function (e) {
    Playlist.show();
  });
  Panel.listener.follow('size', function (e) {
    Video.size(e.size);
    Storage.set('player_size', e.size);
  });
  Panel.listener.follow('prev', function (e) {
    Playlist.prev();
  });
  Panel.listener.follow('next', function (e) {
    Playlist.next();
  });
  Panel.listener.follow('rprev', function (e) {
    Video.rewind(false);
  });
  Panel.listener.follow('rnext', function (e) {
    Video.rewind(true);
  });
  Panel.listener.follow('subsview', function (e) {
    Video.subsview(e.status);
  });
  Panel.listener.follow('visible', function (e) {
    Info.toggle(e.status);
  });
  Panel.listener.follow('to_start', function (e) {
    Video.to(0);
  });
  Panel.listener.follow('to_end', function (e) {
    Video.to(-1);
  });
  Panel.listener.follow('quality', function (e) {
    Video.destroy();
    Video.url(e.url);
    if (work && work.timeline) work.timeline.continued = false;
  });
  Playlist.listener.follow('select', function (e) {
    destroy$3();
    play(e.item);
    if (e.item.url.indexOf(Torserver.ip()) > -1) Info.set('stat', e.item.url);
  });
  Info.listener.follow('stat', function (e) {
    if (preloader.wait) {
      var pb = e.data.preloaded_bytes || 0,
          ps = e.data.preload_size || 0;
      var progress = Math.min(100, pb * 100 / ps);
      Panel.update('timenow', Math.round(progress) + '%');
      Panel.update('timeend', 100 + '%');
      Panel.update('peding', progress + '%');

      if (progress >= 90 || isNaN(progress)) {
        Panel.update('peding', '0%');
        preloader.wait = false;
        preloader.call();
      }
    }
  });
  /**
   * Главный контроллер
   */

  function toggle$2() {
    Controller.add('player', {
      invisible: true,
      toggle: function toggle() {
        Panel.hide();
      },
      up: function up() {
        Panel.toggle();
      },
      down: function down() {
        Panel.toggle();
      },
      right: function right() {
        Video.rewind(true);
      },
      left: function left() {
        Video.rewind(false);
      },
      gone: function gone() {},
      enter: function enter() {
        Video.playpause();
      },
      playpause: function playpause() {
        Video.playpause();
      },
      play: function play() {
        Video.play();
      },
      pause: function pause() {
        Video.pause();
      },
      rewindForward: function rewindForward() {
        Video.rewind(true);
      },
      rewindBack: function rewindBack() {
        Video.rewind(false);
      },
      back: backward$1
    });
    Controller.toggle('player');
  }

  function togglePreload() {
    Controller.add('player_preload', {
      invisible: true,
      toggle: function toggle() {},
      enter: function enter() {
        Panel.update('peding', '0%');
        preloader.wait = false;
        preloader.call();
      },
      back: backward$1
    });
    Controller.toggle('player_preload');
  }

  function backward$1() {
    destroy$3();
    if (callback$2) callback$2();else Controller.toggle('content');
    callback$2 = false;
  }
  /**
   * Уничтожить
   */


  function destroy$3() {
    if (work.timeline) work.timeline.handler(work.timeline.percent);
    work = false;
    preloader.wait = false;
    preloader.call = null;
    Screensaver.enable();
    Video.destroy();
    Panel.destroy();
    Info.destroy();
    html$6.detach();
  }

  function runWebOS(params) {
    webOS.service.request("luna://com.webos.applicationManager", {
      method: "launch",
      parameters: {
        "id": params.need,
        "params": {
          "payload": [{
            "fullPath": params.url,
            "artist": "",
            "subtitle": "",
            "dlnaInfo": {
              "flagVal": 4096,
              "cleartextSize": "-1",
              "contentLength": "-1",
              "opVal": 1,
              "protocolInfo": "http-get:*:video/x-matroska:DLNA.ORG_OP=01;DLNA.ORG_CI=0;DLNA.ORG_FLAGS=01700000000000000000000000000000",
              "duration": 0
            },
            "mediaType": "VIDEO",
            "thumbnail": "",
            "deviceType": "DMR",
            "album": "",
            "fileName": params.name,
            "lastPlayPosition": -1
          }]
        }
      },
      onSuccess: function onSuccess() {
        console.log("The app is launched");
      },
      onFailure: function onFailure(inError) {
        console.log('Player', "Failed to launch the app (" + params.need + "): ", "[" + inError.errorCode + "]: " + inError.errorText);

        if (params.need == 'com.webos.app.photovideo') {
          params.need = 'com.webos.app.smartshare';
          runWebOS(params);
        } else if (params.need == 'com.webos.app.smartshare') {
          params.need = 'com.webos.app.mediadiscovery';
          runWebOS(params);
        }
      }
    });
  }

  function preload(data, call) {
    if (data.url.indexOf(Torserver.ip()) > -1 && data.url.indexOf('&preload') > -1) {
      preloader.wait = true;
      Info.set('name', data.title);
      $('body').append(html$6);
      Panel.show(true);
      togglePreload();
      network$1.timeout(2000);
      network$1.silent(data.url);

      preloader.call = function () {
        data.url = data.url.replace('&preload', '&play');
        call();
      };
    } else call();
  }
  /**
   * Запустит плеер
   * @param {Object} data 
   */


  function play(data) {
    console.log('Player', 'url:', data.url);

    if (Platform.is('webos') && Storage.field('player') == 'webos') {
      data.url = data.url.replace('&preload', '&play');
      runWebOS({
        need: 'com.webos.app.photovideo',
        url: data.url,
        name: data.path || data.title
      });
    } else if (Platform.is('android') && Storage.field('player') == 'android') {
      data.url = data.url.replace('&preload', '&play');
      Android.openPlayer(data.url, data);
    } else {
      preload(data, function () {
        work = data;
        if (work.timeline) work.timeline.continued = false;
        Playlist.url(data.url);
        Panel.quality(data.quality, data.url);
        Video.url(data.url);
        Video.size(Storage.get('player_size', 'default'));
        if (data.subtitles) Video.customSubs(data.subtitles);
        Info.set('name', data.title);
        if (!preloader.call) $('body').append(html$6);
        toggle$2();
        Panel.show(true);
      });
    }
  }
  /**
   * Статистика
   * @param {String} url 
   */


  function stat(url) {
    if (work || preloader.wait) Info.set('stat', url);
  }
  /**
   * Установить плейлист
   * @param {Array} playlist 
   */


  function playlist(playlist) {
    if (work || preloader.wait) Playlist.set(playlist);
  }
  /**
   * Установить субтитры
   * @param {Array} subs 
   */


  function subtitles(subs) {
    if (work || preloader.wait) {
      Video.customSubs(subs);
    }
  }
  /**
   * Обратный вызов
   * @param {Function} back 
   */


  function onBack(back) {
    callback$2 = back;
  }

  function render$4() {
    return html$6;
  }

  var Player = {
    play: play,
    playlist: playlist,
    render: render$4,
    stat: stat,
    subtitles: subtitles,
    callback: onBack
  };

  function update$4(params) {
    if (params.hash == 0) return;
    var viewed = Storage.cache('file_view', 10000, {});
    viewed[params.hash] = params.percent;
    Storage.set('file_view', viewed);
    var line = $('.time-line[data-hash="' + params.hash + '"]').toggleClass('hide', params.percent ? false : true);
    $('> div', line).css({
      width: params.percent + '%'
    });
  }

  function view(hash) {
    var viewed = Storage.cache('file_view', 10000, {}),
        curent = typeof viewed[hash] !== 'undefined' ? viewed[hash] : 0;
    return {
      hash: hash,
      percent: curent || 0,
      handler: function handler(percent) {
        return update$4({
          hash: hash,
          percent: percent
        });
      }
    };
  }

  function render$3(params) {
    var line = Template.get('timeline', params);
    line.toggleClass('hide', params.percent ? false : true);
    return line;
  }

  var Timeline = {
    render: render$3,
    update: update$4,
    view: view
  };

  var html$5, active$2, scroll$2, last$2;

  function open$1(params) {
    active$2 = params;
    html$5 = Template.get('modal', {
      title: params.title
    });
    html$5.on('click', function (e) {
      if (!$(e.target).closest($('.modal__content', html$5)).length) window.history.back();
    });
    title(params.title);
    html$5.toggleClass('modal--medium', params.size == 'medium' ? true : false);
    html$5.toggleClass('modal--large', params.size == 'large' ? true : false);
    scroll$2 = new create$m({
      over: true,
      mask: params.mask
    });
    html$5.find('.modal__body').append(scroll$2.render());
    bind$1(params.html);
    scroll$2.append(params.html);
    $('body').append(html$5);
    toggle$1();
  }

  function bind$1(where) {
    where.find('.selector').on('hover:focus', function (e) {
      last$2 = e.target;
      scroll$2.update($(e.target));
    }).on('hover:enter', function (e) {
      if (active$2.onSelect) active$2.onSelect($(e.target));
    });
  }

  function jump(tofoward) {
    var select = scroll$2.render().find('.selector.focus');
    if (tofoward) select = select.nextAll().filter('.selector');else select = select.prevAll().filter('.selector');
    select = select.slice(0, 10);
    select = select.last();

    if (select.length) {
      Controller.collectionFocus(select[0], scroll$2.render());
    }
  }

  function toggle$1() {
    Controller.add('modal', {
      invisible: true,
      toggle: function toggle() {
        Controller.collectionSet(scroll$2.render());
        Controller.collectionFocus(last$2, scroll$2.render());
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      right: function right() {
        jump(true);
      },
      left: function left() {
        jump(false);
      },
      back: function back() {
        if (active$2.onBack) active$2.onBack();
      }
    });
    Controller.toggle('modal');
  }

  function update$3(new_html) {
    last$2 = false;
    scroll$2.clear();
    scroll$2.append(new_html);
    bind$1(new_html);
    toggle$1();
  }

  function title(tit) {
    html$5.find('.modal__title').text(tit);
    html$5.toggleClass('modal--empty-title', tit ? false : true);
  }

  function destroy$2() {
    last$2 = false;
    scroll$2.destroy();
    html$5.remove();
  }

  function close$1() {
    destroy$2();
  }

  var Modal = {
    open: open$1,
    close: close$1,
    update: update$3,
    title: title
  };

  var SERVER = {};
  var timers = {};
  var callback$1;
  var callback_back;
  var formats = ['asf', 'wmv', 'divx', 'avi', 'mp4', 'm4v', 'mov', '3gp', '3g2', 'mkv', 'trp', 'tp', 'mts', 'mpg', 'mpeg', 'dat', 'vob', 'rm', 'rmvb', 'm2ts', 'ts'];
  var formats_individual = ['vob', 'm2ts'];

  function start$2(element, movie) {
    SERVER.object = element;
    if (movie) SERVER.movie = movie;

    if (!Storage.field('internal_torrclient')) {
      Android.openTorrent(SERVER);
      if (movie && movie.id) Favorite.add('history', movie, 100);
      if (callback$1) callback$1();
    } else if (Torserver.url()) {
      loading();
      connect$1();
    } else install();
  }

  function open(hash, movie) {
    SERVER.hash = hash;
    if (movie) SERVER.movie = movie;

    if (!Storage.field('internal_torrclient')) {
      Android.playHash(SERVER);
      if (callback$1) callback$1();
    } else if (Torserver.url()) {
      loading();
      files();
    } else install();
  }

  function loading() {
    Modal.open({
      title: '',
      html: Template.get('modal_loading'),
      size: 'large',
      mask: true,
      onBack: function onBack() {
        Modal.close();
        close();
      }
    });
  }

  function connect$1() {
    Torserver.connected(function () {
      hash();
    }, function (echo) {
      var ip = Torserver.ip();
      var tpl = Template.get('torrent_noconnect', {
        title: 'Ошибка',
        text: 'Не удалось подключиться к TorrServer',
        ip: ip,
        href: window.location.href,
        echo: echo
      });

      if (!(ip.indexOf('127.') >= 0 || ip.indexOf(':8090') == -1)) {
        tpl.find('.nocorect').remove();
      }

      Modal.update(tpl);
    });
  }

  function hash() {
    Torserver.hash({
      title: SERVER.object.title,
      link: SERVER.object.MagnetUri || SERVER.object.Link,
      poster: SERVER.object.poster,
      data: {
        lampa: true,
        movie: SERVER.movie
      }
    }, function (json) {
      SERVER.hash = json.hash;
      files();
    }, function (echo) {
      var jac = Storage.field('parser_torrent_type') == 'jackett';
      var tpl = Template.get('torrent_nohash', {
        title: 'Ошибка',
        text: 'Не удалось получить HASH',
        url: SERVER.object.MagnetUri || SERVER.object.Link,
        echo: echo
      });
      if (jac) tpl.find('.is--torlook').remove();else tpl.find('.is--jackett').remove();
      Modal.update(tpl);
    });
  }

  function files() {
    var repeat = 0;
    timers.files = setInterval(function () {
      repeat++;
      Torserver.files(SERVER.hash, function (json) {
        if (json.file_stats) {
          clearInterval(timers.files);
          show(json.file_stats);
        }
      });

      if (repeat >= 45) {
        Modal.update(Template.get('error', {
          title: 'Ошибка',
          text: 'Время ожидания истекло'
        }));
        Torserver.clear();
        Torserver.drop(SERVER.hash);
      }
    }, 2000);
  }

  function install() {
    Modal.open({
      title: 'Необходим TorrServer',
      html: $('<div class="about"><div>Для просмотра торрента онлайн, необходимо установить TorrServer. Подробнее что такое TorrServer и как установить, вы можете найти на сайте https://github.com/YouROK/TorrServer</div></div>'),
      onBack: function onBack() {
        Modal.close();
        Controller.toggle('content');
      }
    });
  }

  function show(files) {
    var plays = files.filter(function (a) {
      var exe = a.path.split('.').pop().toLowerCase();
      return formats.indexOf(exe) >= 0;
    });
    var active = Activity$1.active(),
        movie = active.movie || SERVER.movie || {};
    var seasons = [];
    plays.forEach(function (element) {
      var info = Torserver.parse(element.path, movie);

      if (info.serial && info.season && seasons.indexOf(info.season) == -1) {
        seasons.push(info.season);
      }
    });

    if (seasons.length) {
      Api.seasons(movie, seasons, function (data) {
        list(plays, {
          movie: movie,
          seasons: data
        });
      });
    } else {
      list(plays, {
        movie: movie
      });
    }
  }

  function list(items, params) {
    var html = $('<div class="torrent-files"></div>');
    var playlist = [];
    items.forEach(function (element) {
      var exe = element.path.split('.').pop().toLowerCase();
      var info = Torserver.parse(element.path, params.movie, formats_individual.indexOf(exe) >= 0);
      var view = Timeline.view(info.hash);
      var item;
      Arrays.extend(element, {
        season: info.season,
        episode: info.episode,
        title: Utils.pathToNormalTitle(element.path),
        size: Utils.bytesToSize(element.length),
        url: Torserver.stream(element.path, SERVER.hash, element.id),
        timeline: view,
        air_date: '--',
        img: './img/img_broken.svg',
        exe: exe
      });

      if (params.seasons) {
        var episodes = params.seasons[info.season];
        element.title = info.episode + ' / ' + Utils.pathToNormalTitle(element.path, false);
        element.fname = element.title;

        if (episodes) {
          var episode = episodes.episodes.filter(function (a) {
            return a.episode_number == info.episode;
          })[0];

          if (episode) {
            element.title = info.episode + ' / ' + episode.name;
            element.air_date = episode.air_date;
            element.fname = episode.name;
            if (episode.still_path) element.img = Api.img(episode.still_path);else if (episode.img) element.img = episode.img;
          }
        }

        item = Template.get('torrent_file_serial', element);
      } else {
        item = Template.get('torrent_file', element);
        if (params.movie.title) element.title = params.movie.title;
      }

      item.append(Timeline.render(view));
      playlist.push(element);
      item.on('hover:enter', function () {
        if (params.movie.id) Favorite.add('history', params.movie, 100);

        if (Platform.is('android') && playlist.length > 1) {
          var trim_playlist = [];
          playlist.forEach(function (elem) {
            trim_playlist.push({
              title: elem.title,
              url: elem.url,
              timeline: elem.timeline
            });
          });
          element.playlist = trim_playlist;
        }

        Player.play(element);
        Player.callback(function () {
          Controller.toggle('modal');
        });
        Player.playlist(playlist);
        Player.stat(element.url);

        if (callback$1) {
          callback$1();
          callback$1 = false;
        }
      });
      html.append(item);
    });
    if (items.length == 0) html = Template.get('error', {
      title: 'Пусто',
      text: 'Не удалось извлечь подходящие файлы'
    });else Modal.title('Файлы');
    Modal.update(html);
  }

  function opened(call) {
    callback$1 = call;
  }

  function back$3(call) {
    callback_back = call;
  }

  function close() {
    Torserver.drop(SERVER.hash);
    Torserver.clear();
    clearInterval(timers.files);

    if (callback_back) {
      callback_back();
    } else {
      Controller.toggle('content');
    }

    callback_back = false;
    SERVER = {};
  }

  var Torrent = {
    start: start$2,
    open: open,
    opened: opened,
    back: back$3
  };

  function create$b(data) {
    var _this = this;
    var network = new create$n();
    var scroll = new create$m({
      over: true,
      step: 250
    });
    var html = $('<div class="videos"></div>');
    var plugins = $('<div class="videos__plugins videos__line"></div>');
    var body = $('<div class="videos__body"></div>');
    var js;
    var started;
    var history = [];
    var api = Storage.get('last_event_url', '');

    var follow = function follow(e) {
      if (e.name == 'events') {
        _this.plugins();
      }
    };

    this.create = function () {
      html.append(scroll.render());
      scroll.minus();
      scroll.append(plugins);
      scroll.append(body);
      this.plugins();
      this.start();
      Storage.listener.follow('change', follow);
    };

    this.start = function () {
      var query = [];
      query.push('id=' + data.movie.id);
      if (data.movie.imdb_id) query.push('imdb_id=' + (data.movie.imdb_id || ''));
      if (data.movie.kinopoisk_id) query.push('kinopoisk_id=' + (data.movie.kinopoisk_id || ''));
      query.push('title=' + encodeURIComponent(data.movie.title || data.movie.name));
      query.push('original_title=' + encodeURIComponent(data.movie.original_title || data.movie.original_name));
      query.push('original_language=' + (data.movie.original_language || ''));
      query.push('serial=' + (data.movie.name ? 1 : 0));
      query.push('year=' + ((data.movie.release_date || data.movie.first_air_date || '0000') + '').slice(0, 4));
      query.push('source=' + Storage.field('source'));
      query.push('uid=' + Storage.get('device_uid'));
      if (Storage.get('account_email', '')) query.push('cub_id=' + Utils.hash(Storage.get('account_email', '')));

      if (api) {
        started = true;
        this.get(api + (api.indexOf('?') >= 0 ? '&' : '?') + query.join('&'), true);
      }
    };

    this.plugins = function () {
      var _this2 = this;

      plugins.empty();
      var events = Storage.get('events', '[]').filter(function (e) {
        return e.url;
      });
      if (!events.filter(function (e) {
        return e.url == api;
      }).length) api = '';

      if (events.length && !api) {
        api = events[0].url;
        Storage.set('last_event_url', api);
      }

      events.forEach(function (a) {
        var plugin = $('<div class="videos__tab selector">' + (a.name || 'Без названия') + '</div>');
        plugin.on('hover:enter', function () {
          history = [];
          api = a.url;
          Storage.set('last_event_url', a.url);
          $('>*', plugins).removeClass('active');
          plugin.addClass('active');

          _this2.start();
        });
        if (api == a.url) plugin.addClass('active');
        plugins.append(plugin);
      });
      var add = $('<div class="videos__button selector">Управлять событиями</div>');
      add.on('hover:enter', function () {
        Activity$1.push({
          url: '',
          component: 'events'
        });
      });
      plugins.prepend(add);
      $('>*', plugins).on('hover:focus', function () {
        scroll.update($(this), true);
      });
    };

    this.call = function (target, json) {
      var _this3 = this;

      if (json.method == 'play') {
        if (target.data('timeline')) {
          json.timeline = target.data('timeline');
        }

        Player.play(json);
        Player.playlist([{
          url: json.url,
          title: json.title,
          timeline: json.timeline
        }]);
        if (json.subtitles) Player.subtitles(json.subtitles);
        if (data.movie.id) Favorite.add('history', data.movie, 100);
      } else if (json.method == 'torrent') {
        json.poster = data.movie.img;
        Torrent.start(json, data.movie);
      } else if (json.method == 'link' && json.url) {
        this.get(json.url, true);
      } else if (json.method == 'call' && json.url) {
        var close = function close() {
          Modal.close();
          network.clear();
          Controller.toggle('view_videos');
        };

        Modal.open({
          title: '',
          html: Template.get('modal_loading'),
          size: 'small',
          mask: true,
          onBack: close
        });
        network.silent(json.url, function (result) {
          close();

          _this3.call(target, result);
        }, close);
      } else if (json.method == 'select') {
        Select.show({
          title: 'Выбрать',
          items: json.items,
          onSelect: function onSelect(a) {
            _this3.call(target, a);
          },
          onBack: function onBack() {
            Controller.toggle('view_videos');
          }
        });
      }
    };

    this.parse = function () {
      var _this4 = this;

      body.find('.selector').on('hover:focus', function () {
        $(this)[0];
        scroll.update($(this), true);
      }).on('hover:enter', function (e) {
        _this4.call($(e.target), Arrays.decodeJson($(e.target).attr('data-json'), {}));
      });
      body.find('[media]').each(function () {
        var media = $(this);
        var season = parseInt(media.attr('s') || '1'),
            episode = parseInt(media.attr('e') || '1');
        var hash = Utils.hash(data.movie.name ? [season, episode, data.movie.original_title].join('') : data.movie.original_title);
        var view = Timeline.view(hash);
        media.data('timeline', view);
        media.append(Timeline.render(view));
      });
    };

    this.getQuery = function (link) {
      var s = link,
          p = s.split(/\&/),
          l = p.length,
          kv,
          r = {};

      if (l === 0) {
        return false;
      }

      while (l--) {
        kv = p[l].split(/\=/);
        r[kv[0]] = decodeURIComponent(kv[1] || '') || true;
      }

      return r;
    };

    this.get = function (link, push_history) {
      var _this5 = this;

      this.load();

      if (js) {
        js.destroy();
        js = false;
      }

      if (push_history) history.push(link);
      network.clear();
      network.silent(link, function (result) {
        if (result.trim()) {
          if (api.split('.').pop() == 'js') {
            try {
              js = eval('(' + result + ')');
              js = new js({
                body: body,
                html: html,
                object: data,
                "class": _this5,
                query: _this5.getQuery(link.split('?').slice(1).join('?'))
              });
              js.start();
            } catch (e) {
              _this5.empty('Ошибка запуска скрипта', e.stack);
            }
          } else {
            body.empty();
            body.append(result);

            _this5.parse();

            Controller.enable('view_videos');
          }
        } else _this5.empty('Сервер вернул пустой результат');
      }, function () {
        _this5.empty();
      }, false, {
        dataType: 'html'
      });
    };

    this.empty = function (text, stack) {
      var _this6 = this;

      body.empty();
      body.append('<div class="videos__repeat selector">Повторить запрос</div><div class="videos__empty">' + (text || 'Нет подключения к сети') + '</div>' + (stack ? '<pre class="videos_stack">' + stack + '</pre>' : ''));
      body.find('.selector').on('hover:enter', function () {
        _this6.get(history.pop(), true);
      });
      Controller.enable('view_videos');
    };

    this.load = function () {
      body.empty();
      body.append('<div class="videos__loading">Загрузка... <span></span></div>');
      Controller.enable('view_videos');
    };

    this.toggle = function () {
      var _this7 = this;

      Controller.add('view_videos', {
        toggle: function toggle() {
          Controller.collectionSet(_this7.render());
          var selectors = $('.selector', body),
              focused = body.find('.focused')[0],
              tabactive = $('.active', plugins),
              focus = focused ? focused : selectors.length ? selectors.eq(0)[0] : tabactive.length ? tabactive.eq(0)[0] : false;
          Controller.collectionFocus(focus, _this7.render());
        },
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: function down() {
          Navigator.move('down');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else _this7.onUp();
        },
        gone: function gone() {},
        back: function back() {
          if (history.length > 1) {
            history.pop();

            _this7.get(history[history.length - 1], false);
          } else _this7.onBack();
        }
      });
      Controller.toggle('view_videos');
      if (!started) this.start();
    };

    this.render = function () {
      return html;
    };

    this.destroy = function () {
      network.clear();
      scroll.destroy();
      if (js) js.destroy();
      Storage.listener.remove('change', follow);
      html.remove();
      body.remove();
      plugins.remove();
      network = null;
      scroll = null;
      html = null;
      body = null;
      plugins = null;
      history = null;
      js = null;
    };
  }

  var components = {
    start: create$h,
    videos: create$b
  };

  function component$3(object) {
    var network = new create$n();
    var scroll = new create$m({
      mask: true,
      over: true,
      step: 400,
      scroll_by_item: true
    });
    var items = [];
    var active = 0;
    scroll.render().addClass('layer--wheight');

    this.create = function () {
      var _this = this;

      this.activity.loader(true);
      Api.full(object, function (data) {
        _this.activity.loader(false);

        if (data.movie) {
          Lampa.Listener.send('view', {
            type: 'start',
            object: object,
            data: data
          });

          _this.build('start', data);

          _this.build('videos', data);

          Lampa.Listener.send('view', {
            type: 'complite',
            object: object,
            data: data
          });

          _this.activity.toggle();
        } else {
          _this.empty();
        }
      }, this.empty.bind(this));
      return this.render();
    };

    this.empty = function () {
      var empty = new create$i();
      scroll.append(empty.render());
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };

    this.build = function (name, data, params) {
      var item = new components[name](data, _objectSpread2({
        object: object,
        nomore: true
      }, params));
      item.onDown = this.down;
      item.onUp = this.up;
      item.onBack = this.back;
      item.create();
      items.push(item);
      Lampa.Listener.send('view', {
        type: 'build',
        name: name,
        body: item.render()
      });
      scroll.append(item.render());
    };

    this.down = function () {
      active++;
      active = Math.min(active, items.length - 1);
      items[active].toggle();
      scroll.update(items[active].render());
    };

    this.up = function () {
      active--;

      if (active < 0) {
        active = 0;
      } else {
        items[active].toggle();
      }

      scroll.update(items[active].render());
    };

    this.back = function () {
      Activity$1.backward();
    };

    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          if (items.length) {
            items[active].toggle();
          }
        }
      });
      Controller.toggle('content');
    };

    this.parse = function () {
      if (items.length) {
        items[1].parse();
      }
    };

    this.pause = function () {};

    this.stop = function () {};

    this.render = function () {
      return scroll.render();
    };

    this.destroy = function () {
      Lampa.Listener.send('view', {
        type: 'destroy',
        object: object
      });
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      items = null;
      network = null;
    };
  }

  function component$2(object) {
    var scroll = new create$m({
      mask: true,
      over: true,
      step: 250
    });
    var html = $('<div class="events"></div>');
    var body = Template.get('events', {});
    var add = body.find('.events__item--add');
    var events = Storage.get('events', '[]');
    var last;

    this.create = function () {
      var _this = this;

      this.activity.loader(false);
      html.append(scroll.render());
      scroll.append(body);
      add.on('hover:enter', function () {
        _this.push();

        last = add.next()[0];

        _this.start();
      });
      html.find('.selector').on('hover:focus', function () {
        last = $(this)[0];
        scroll.update($(this), true);
      });
      events.forEach(this.item.bind(this));
      return this.render();
    };

    this.push = function () {
      var event = {
        name: '',
        url: ''
      };
      events.push(event);
      Storage.set('events', events);
      this.item(event);
    };

    this.item = function (data) {
      var item = Template.get('events_item', {});

      function update() {
        item.find('.events__item-name').text(data.name || 'Без названия');
        item.find('.events__item-url').text(data.url || '...');
      }

      item.on('hover:enter', function () {
        Select.show({
          title: 'Действие',
          items: [{
            title: 'Изменить название',
            type: 'name'
          }, {
            title: 'Изменить URL',
            type: 'url'
          }, {
            title: 'Удалить',
            type: 'remove'
          }],
          onSelect: function onSelect(a) {
            if (a.type == 'remove') {
              Arrays.remove(events, data);
              Storage.set('events', events);
              last = item.prev()[0];
              item.remove();
              Controller.toggle('content');
            } else {
              Input.edit({
                free: true,
                value: data[a.type]
              }, function (new_value) {
                data[a.type] = new_value;
                update();
                Storage.set('events', events);
                Controller.toggle('content');
              });
            }
          },
          onBack: function onBack() {
            Controller.toggle('content');
          }
        });
      }).on('hover:focus', function () {
        last = $(this)[0];
        scroll.update($(this), true);
      });
      update();
      add.after(item);
    };

    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last, scroll.render());
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };

    this.pause = function () {};

    this.stop = function () {};

    this.render = function () {
      return html;
    };

    this.destroy = function () {
      scroll.destroy();
      html.remove();
      body.remove();
      last = null;
      html = null;
      body = null;
      events = null;
    };
  }

  function component$1(object) {
    var html = $('<div></div>');
    var empty = new create$i();

    this.create = function () {
      html.append(empty.render());
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };

    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(empty.render());
          Controller.collectionFocus(false, empty.render());
        }
      });
      Controller.toggle('content');
    };

    this.pause = function () {};

    this.stop = function () {};

    this.render = function () {
      return html;
    };

    this.destroy = function () {
      html.remove();
    };
  }

  var component = {
    category_full: component$6,
    favorite: component$5,
    relise: component$4,
    full: component$3,
    events: component$2,
    nocomponent: component$1
  };

  function create$a(object) {
    if (component[object.component]) {
      return new component[object.component](object);
    } else {
      return new component.nocomponent(object);
    }
  }

  function add$3(name, comp) {
    component[name] = comp;
  }

  function get$2(name) {
    return component[name];
  }

  var Component = {
    create: create$a,
    add: add$3,
    get: get$2
  };

  var listener$3 = start$3();
  var activites = [];
  var callback = false;
  var fullout = false;
  var content;
  var slides;
  var maxsave;

  function Activity(component) {
    var slide = Template.get('activity');
    var body = slide.find('.activity__body');
    this.stoped = false;
    this.started = false;
    /**
     * Добовляет активити в список активитис
     */

    this.append = function () {
      slides.append(slide);
    };
    /**
     * Создает новую активность
     */


    this.create = function () {
      component.create(body);
      body.append(component.render());
    };
    /**
     * Показывает загрузку
     * @param {Boolean} status 
     */


    this.loader = function (status) {
      slide.toggleClass('activity--load', status);
    };
    /**
     * Создает повторно
     */


    this.restart = function () {
      this.append();
      this.stoped = false;
      component.start();
    };
    /**
     * Стартуем активную активность
     */


    this.start = function () {
      this.started = true;
      Controller.add('content', {
        invisible: true,
        toggle: function toggle() {},
        left: function left() {
          Controller.toggle('menu');
        },
        up: function up() {},
        back: function back() {
          Activity.backward();
        }
      });
      Controller.toggle('content');
      if (this.stoped) this.restart();else component.start();
    };
    /**
     * пауза
     */


    this.pause = function () {
      this.started = false;
      component.pause();
    };
    /**
     * Включаем активность если она активна
     */


    this.toggle = function () {
      if (this.started) this.start();
    };
    /**
     * Стоп
     */


    this.stop = function () {
      this.started = false;
      if (this.stoped) return;
      this.stoped = true;
      component.stop();
      slide.detach();
    };

    this.component = function () {
      return component;
    };
    /**
     * Рендер
     */


    this.render = function () {
      return slide;
    };
    /**
     * Уничтожаем активность
     */


    this.destroy = function () {
      component.destroy();
      slide.remove();
    };

    this.append();
  }

  function init$7() {
    content = Template.get('activitys');
    slides = content.find('.activitys__slides');
    maxsave = Storage.get('pages_save_total', 5);
    empty();
    window.addEventListener('popstate', function () {
      if (fullout) return;
      empty();
      listener$3.send('popstate', {
        count: activites.length
      });
      if (callback) callback();else {
        backward();
      }
    });
    Storage.listener.follow('change', function (event) {
      if (event.name == 'pages_save_total') maxsave = Storage.get('pages_save_total', 5);
    });
  }
  /**
   * Лимит активностей, уничтожать если больше maxsave
   */


  function limit() {
    var curent = active$1();
    if (curent && curent.activity) curent.activity.pause();
    var tree_stop = activites.slice(-2);
    if (tree_stop.length > 1 && tree_stop[0].activity) tree_stop[0].activity.stop();
    var tree_destroy = activites.slice(-maxsave);

    if (tree_destroy.length > maxsave - 1) {
      var first = tree_destroy[0];

      if (first.activity) {
        first.activity.destroy();
        first.activity = null;
      }
    }
  }
  /**
   * Добавить новую активность
   * @param {Object} object 
   */


  function push(object) {
    limit();
    create$9(object);
    activites.push(object);
    start$1(object);
  }
  /**
   * Создать новую активность
   * @param {Object} object 
   */


  function create$9(object) {
    var comp = Component.create(object);
    object.activity = new Activity(comp);
    comp.activity = object.activity;
    Lampa.Listener.send('activity', {
      component: object.component,
      type: 'init',
      object: object
    });
    object.activity.create();
    Lampa.Listener.send('activity', {
      component: object.component,
      type: 'create',
      object: object
    });
  }

  function back$2() {
    window.history.back();
  }

  function active$1() {
    return activites[activites.length - 1];
  }

  function empty() {
    window.history.pushState(null, null, window.location.pathname);
  }

  function backward() {
    callback = false;
    listener$3.send('backward', {
      count: activites.length
    });
    if (activites.length == 1) return;
    slides.find('>div').removeClass('activity--active');
    var curent = activites.pop();

    if (curent) {
      setTimeout(function () {
        curent.activity.destroy();
        Lampa.Listener.send('activity', {
          component: curent.component,
          type: 'destroy',
          object: curent
        });
      }, 200);
    }

    var previous_tree = activites.slice(-maxsave);

    if (previous_tree.length > maxsave - 1) {
      create$9(previous_tree[0]);
    }

    previous_tree = activites.slice(-1)[0];

    if (previous_tree) {
      if (previous_tree.activity) start$1(previous_tree);else {
        create$9(previous_tree);
        start$1(previous_tree);
      }
    }
  }

  function save$1(object) {
    var saved = {};

    for (var i in object) {
      if (i !== 'activity') saved[i] = object[i];
    }

    Storage.set('activity', saved);
  }

  function extractObject(object) {
    var saved = {};

    for (var i in object) {
      if (i !== 'activity') saved[i] = object[i];
    }

    return saved;
  }

  function start$1(object) {
    save$1(object);
    object.activity.start();
    slides.find('> div').removeClass('activity--active');
    object.activity.render().addClass('activity--active');
    Lampa.Listener.send('activity', {
      component: object.component,
      type: 'start',
      object: object
    });
  }

  function last$1() {
    var active = Storage.get('activity', 'false');

    if (active) {
      if (active.page) active.page = 1; // косяк, при перезагрузке будет последняя страница, надо исправить

      push(active);
    } else {
      push({
        url: Storage.field('source') == 'cub' ? '?cat=movie&sort=top' : 'movie/popular',
        title: 'Фильмы' + ' - ' + Storage.field('source').toUpperCase(),
        component: 'category_full',
        source: Storage.field('source'),
        page: 1
      });
    }
  }

  function render$2() {
    return content;
  }

  function call(call) {
    callback = call;
  }

  function out() {
    fullout = true;
    back$2();

    for (var i = 0; i < window.history.length; i++) {
      back$2();
    }

    setTimeout(function () {
      fullout = false;
      empty();
    }, 100);
  }

  function replace() {
    var replace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var object = extractObject(active$1());

    for (var i in replace) {
      object[i] = replace[i];
    }

    active$1().activity.destroy();
    activites.pop();
    push(object);
  }

  var Activity$1 = {
    init: init$7,
    listener: listener$3,
    push: push,
    back: back$2,
    render: render$2,
    backward: backward,
    call: call,
    last: last$1,
    out: out,
    replace: replace,
    active: active$1
  };

  var listener$2 = start$3();
  var active;
  var active_name = '';
  var controlls = {};
  var selects;
  var select_active;
  /**
   * Добавить контроллер
   * @param {String} name 
   * @param {Object} calls 
   */

  function add$2(name, calls) {
    controlls[name] = calls;
  }
  /**
   * Запустить функцию
   * @param {String} name 
   * @param {Object} params 
   */


  function run(name, params) {
    if (active) {
      if (active[name]) {
        if (typeof active[name] == 'function') active[name](params);else if (typeof active[name] == 'string') {
          run(active[name], params);
        }
      }
    } else {
      toggle('menu');
    }
  }
  /**
   * Двигать
   * @param {String} direction 
   */


  function move(direction) {
    run(direction);
  }
  /**
   * Вызов enter
   */


  function enter() {
    if (active && active.enter) run('enter');else if (select_active) {
      select_active.trigger('hover:enter');
    }
  }
  /**
   * Вызов long
   */


  function _long() {
    if (active && active["long"]) run('long');else if (select_active) {
      select_active.trigger('hover:long');
    }
  }
  /**
   * Завершить
   */


  function finish() {
    run('finish');
  }
  /**
   * Нажали назад
   */


  function back$1() {
    run('back');
  }
  /**
   * Переключить контроллер
   * @param {String} name 
   */


  function toggle(name) {
    //console.log('Contoller','toggle of [',active_name,'] to [',name,']')
    if (active && active.gone) active.gone(name);

    if (controlls[name]) {
      active = controlls[name];
      active_name = name;
      Activity$1.call(function () {
        run('back');
      });
      if (active.toggle) active.toggle();
      updateSelects();
      listener$2.send('toggle', {
        name: name
      });
    }
  }

  function updateSelects() {
    selects = $('.selector');

    if (Storage.get('navigation_type') == 'mouse') {
      selects.unbind('click.hover').on('click.hover', function (e) {
        selects.removeClass('focus enter');
        if (e.keyCode !== 13) $(this).addClass('focus').trigger('hover:enter', [true]);
      }).unbind('mouseover.hover').on('mouseover.hover', function (e) {
        if ($(this).hasClass('selector')) {
          selects.removeClass('focus enter').data('ismouse', false);
          $(this).addClass('focus').data('ismouse', true).trigger('hover:focus', [true]);
          var silent = Navigator.silent;
          Navigator.silent = true;
          Navigator.focus($(this)[0]);
          Navigator.silent = silent;
        }
      });
    }
  }

  function enable(name) {
    if (active_name == name) toggle(name);
  }

  function clearSelects() {
    select_active = false;
    $('.selector').removeClass('focus enter');
    if (selects) selects.unbind('.hover');
  }
  /**
   * Вызвать событие
   * @param {String} name 
   * @param {Object} params 
   */


  function trigger$1(name, params) {
    run(name, params);
  }
  /**
   * Фокус на элементе
   * @param {Object} target 
   */


  function focus(target) {
    if (selects) selects.removeClass('focus enter').data('ismouse', false);
    $(target).addClass('focus').trigger('hover:focus');
    select_active = $(target);
  }

  function collectionSet(html, append) {
    var colection = html.find('.selector').toArray();

    if (append) {
      colection = colection.concat(append.find('.selector').toArray());
    }

    if (colection.length || active.invisible) {
      clearSelects(); //$(colection).data('controller', enabled().name)

      Navigator.setCollection(colection);
    }
  }

  function collectionFocus(target, html) {
    if (target) {
      Navigator.focus(target);
    } else {
      var colection = html.find('.selector').not('.hide').toArray();
      if (colection.length) Navigator.focus(colection[0]);
    }
  }

  function enabled() {
    return {
      name: active_name,
      controller: active
    };
  }

  function toContent() {
    var trys = 0;

    var go = function go() {
      var contrl = enabled();
      trys++;

      if (contrl.name !== 'content') {
        if (contrl.controller.back) contrl.controller.back();
        if (trys < 10) go();
      }
    };

    go();
  }

  var Controller = {
    listener: listener$2,
    add: add$2,
    move: move,
    enter: enter,
    finish: finish,
    toggle: toggle,
    trigger: trigger$1,
    back: back$1,
    focus: focus,
    collectionSet: collectionSet,
    collectionFocus: collectionFocus,
    enable: enable,
    enabled: enabled,
    "long": _long,
    updateSelects: updateSelects,
    toContent: toContent
  };

  function create$8() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _keyClass = window.SimpleKeyboard["default"],
        _keyBord;

    var last;
    var recognition;
    var _default_layout = {
      'en': ['{abc} 1 2 3 4 5 6 7 8 9 0 - + = {bksp}', '{RU} q w e r t y u i o p', 'a s d f g h j k l /', '{shift} z x c v b n m , . : http://', '{space}'],
      'en-shift': ['{abc} 1 2 3 4 5 6 7 8 9 0 - + = {bksp}', '{RU} Q W E R T Y U I O P', 'A S D F G H J K L /', '{shift} Z X C V B N M , . : http://', '{space}'],
      'abc': ['1 2 3 4 5 6 7 8 9 0 - + = {bksp}', '! @ # $ % ^ & * ( ) [ ]', '- _ = + \\ | [ ] { }', '; : \' " , . < > / ?', '{rus} {space} {eng}'],
      'default': ['{abc} 1 2 3 4 5 6 7 8 9 0 - + = {bksp}', '{EN} й ц у к е н г ш щ з х ъ', 'ф ы в а п р о л д ж э', '{shift} я ч с м и т ь б ю , . : http://', '{space}'],
      'ru-shift': ['{abc} 1 2 3 4 5 6 7 8 9 0 - + = {bksp}', '{EN} Й Ц У К Е Н Г Ш Щ З Х Ъ', 'Ф Ы В А П Р О Л Д Ж Э', '{shift} Я Ч С М И Т Ь Б Ю , . : http://', '{space}']
    };
    this.listener = start$3();

    this.create = function () {
      var _this = this;

      _keyBord = new _keyClass({
        display: {
          '{bksp}': '&nbsp;',
          '{enter}': '&nbsp;',
          '{shift}': '&nbsp;',
          '{space}': '&nbsp;',
          '{RU}': '&nbsp;',
          '{EN}': '&nbsp;',
          '{abc}': '&nbsp;',
          '{rus}': 'русский',
          '{eng}': 'english',
          '{search}': 'найти',
          '{mic}': "<svg style=\"width: 33px; height: 33px;\" viewBox=\"0 0 24 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect x=\"5\" width=\"14\" height=\"23\" rx=\"7\" fill=\"currentColor\"/>\n                    <path d=\"M3.39272 18.4429C3.08504 17.6737 2.21209 17.2996 1.44291 17.6073C0.673739 17.915 0.299615 18.7879 0.607285 19.5571L3.39272 18.4429ZM23.3927 19.5571C23.7004 18.7879 23.3263 17.915 22.5571 17.6073C21.7879 17.2996 20.915 17.6737 20.6073 18.4429L23.3927 19.5571ZM0.607285 19.5571C2.85606 25.179 7.44515 27.5 12 27.5V24.5C8.55485 24.5 5.14394 22.821 3.39272 18.4429L0.607285 19.5571ZM12 27.5C16.5549 27.5 21.1439 25.179 23.3927 19.5571L20.6073 18.4429C18.8561 22.821 15.4451 24.5 12 24.5V27.5Z\" fill=\"currentColor\"/>\n                    <rect x=\"10\" y=\"25\" width=\"4\" height=\"6\" rx=\"2\" fill=\"currentColor\"/>\n                    </svg>"
        },
        layout: params.layout || _default_layout,
        onChange: function onChange(value) {
          _this.listener.send('change', {
            value: value
          });
        },
        onKeyPress: function onKeyPress(button) {
          if (button === "{shift}" || button === "{abc}" || button === "{EN}" || button === "{RU}" || button === "{rus}" || button === "{eng}") _this._handle(button);else if (button === '{mic}') {
            if (Platform.is('android')) {
              Android.voiceStart();
              window.voiceResult = _this.value.bind(_this);
            } else if (recognition) {
              try {
                if (recognition.record) recognition.stop();else recognition.start();
              } catch (e) {
                recognition.stop();
              }
            }
          } else if (button === '{enter}' || button === '{search}') {
            _this.listener.send('enter');
          }
        }
      });
      this.speechRecognition();
    };

    this.speechRecognition = function () {
      var _this2 = this;

      var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      console.log('Speech', 'status:', SpeechRecognition ? true : false);

      if (SpeechRecognition) {
        recognition = new SpeechRecognition();
        recognition.continuous = false;
        recognition.addEventListener("start", function () {
          console.log('Speech', 'start');
          $('.simple-keyboard [data-skbtn="{mic}"]').css('color', 'red');
          recognition.record = true;
          Noty.show('Говорите, я слушаю..');
        });
        recognition.addEventListener("end", function () {
          console.log('Speech', 'end');
          $('.simple-keyboard [data-skbtn="{mic}"]').css('color', 'white');
          recognition.record = false;
        });
        recognition.addEventListener("result", function (event) {
          console.log('Speech', 'result:', event.resultIndex, event.results[event.resultIndex]);
          var current = event.resultIndex;
          var transcript = event.results[current][0].transcript;
          console.log('Speech', 'transcript:', transcript);

          if (transcript.toLowerCase().trim() === "stop recording") {
            recognition.stop();
          } else {
            if (transcript.toLowerCase().trim() === "reset input") {
              _this2.value('');
            } else {
              _this2.value(transcript);
            }
          }
        });
        recognition.addEventListener("error", function (event) {
          console.log('Speech', 'error:', event);

          if (event.error == 'not-allowed') {
            Noty.show('Нет доступа к микрофону');
          }

          recognition.stop();
        });
      } else {
        $('.simple-keyboard [data-skbtn="{mic}"]').css('opacity', '0.3');
      }
    };

    this.value = function (value) {
      _keyBord.setInput(value);

      this.listener.send('change', {
        value: value
      });
    };

    this._layout = function () {
      var keys = $('.simple-keyboard .hg-button').addClass('selector');
      Controller.collectionSet($('.simple-keyboard'));
      Controller.collectionFocus(last || keys[0], $('.simple-keyboard'));
      $('.simple-keyboard .hg-button:not(.binded)').on('hover:enter', function (e, click) {
        Controller.collectionFocus($(this)[0]);
        if (!click) _keyBord.handleButtonClicked($(this).attr('data-skbtn'), e);
      }).on('hover:focus', function (e) {
        last = e.target;
      });
      keys.addClass('binded');
    };

    this._handle = function (button) {
      var current_layout = _keyBord.options.layoutName,
          layout = 'default';

      if (button == '{shift}') {
        if (current_layout == 'default') layout = 'ru-shift';else if (current_layout == 'ru-shift') layout = 'default';else if (current_layout == 'en') layout = 'en-shift';else if (current_layout == 'en-shift') layout = 'en';
      } else if (button == '{abc}') layout = 'abc';else if (button == '{EN}' || button == '{eng}') layout = 'en';else if (button == '{RU}' || button == '{rus}') layout = 'default';

      _keyBord.setOptions({
        layoutName: layout
      });

      last = false;
      Controller.toggle('keybord');
    };

    this.toggle = function () {
      var _this3 = this;

      Controller.add('keybord', {
        toggle: function toggle() {
          _this3._layout();
        },
        up: function up() {
          if (!Navigator.canmove('up')) {
            _this3.listener.send('up');
          } else Navigator.move('up');
        },
        down: function down() {
          if (!Navigator.canmove('down')) {
            _this3.listener.send('down');
          } else Navigator.move('down');
        },
        left: function left() {
          if (!Navigator.canmove('left')) {
            _this3.listener.send('left');
          } else Navigator.move('left');
        },
        right: function right() {
          if (!Navigator.canmove('right')) {
            _this3.listener.send('right');
          } else Navigator.move('right');
        },
        back: function back() {
          _this3.listener.send('back');
        }
      });
      Controller.toggle('keybord');
    };

    this.destroy = function () {
      try {
        _keyBord.destroy();
      } catch (e) {}

      this.listener.destroy();
    };
  }

  var html$4, keyboard$1, input$1;

  function edit(params, call) {
    html$4 = Template.get('settings_input');
    input$1 = html$4.find('.settings-input__input');
    if (params.free) html$4.addClass('settings-input--free');
    $('body').append(html$4);
    keyboard$1 = new create$8();
    keyboard$1.listener.follow('change', function (event) {
      input$1.text(event.value.trim());
    });
    keyboard$1.listener.follow('enter', function (event) {
      var val = input$1.text();
      back();
      call(val);
    });
    $('.settings-input__links', html$4).toggleClass('hide', params.nosave ? true : false);
    keyboard$1.listener.follow('down', function (event) {
      if (params.nosave) return;
      var members = Storage.get('setting_member', []);
      var links = [];
      links.push({
        title: (members.indexOf(input$1.text()) == -1 ? 'Добавить' : 'Удалить') + ' текущее значение',
        subtitle: input$1.text(),
        add: true
      });
      members.forEach(function (link) {
        links.push({
          title: link,
          subtitle: 'Пользовательская ссылка',
          url: link,
          member: true
        });
      });
      /*
      links = links.concat([
          {
              title: '',
              subtitle: '',
              url: ''
          },
      ])
      */

      Select.show({
        title: 'Ссылки',
        items: links,
        onSelect: function onSelect(a) {
          if (a.add) {
            if (members.indexOf(a.subtitle) == -1) {
              Arrays.insert(members, 0, a.subtitle);
              Noty.show('Добавлено (' + a.subtitle + ')');
            } else {
              Arrays.remove(members, a.subtitle);
              Noty.show('Удалено (' + a.subtitle + ')');
            }

            Storage.set('setting_member', members);
          } else {
            keyboard$1.value(a.url);
          }

          keyboard$1.toggle();
        },
        onLong: function onLong(a, elem) {
          if (a.member) {
            Arrays.remove(members, a.url);
            Noty.show('Удалено (' + a.url + ')');
            Storage.set('setting_member', members);
            $(elem).css({
              opacity: 0.4
            });
          }
        },
        onBack: function onBack() {
          keyboard$1.toggle();
        }
      });
    });
    keyboard$1.listener.follow('back', function () {
      var val = input$1.text();
      back();
      call(val);
    });
    keyboard$1.create();
    keyboard$1.value(params.value);
    keyboard$1.toggle();
  }

  function back() {
    destroy$1();
    Controller.toggle('settings_component');
  }

  function destroy$1() {
    keyboard$1.destroy();
    html$4.remove();
    html$4 = null;
    keyboard$1 = null;
    input$1 = null;
  }

  var Input = {
    edit: edit
  };

  var values = {};
  var defaults = {};
  var listener$1 = start$3();

  function init$6() {
    if (Platform.is('tizen')) {
      select('player', {
        'inner': 'Встроенный',
        'tizen': 'Tizen'
      }, 'tizen');
    } else if (Platform.is('webos')) {
      select('player', {
        'inner': 'Встроенный',
        'webos': 'WebOS'
      }, 'inner');
    } else if (Platform.is('android')) {
      select('player', {
        'inner': 'Встроенный',
        'android': 'Android'
      }, 'android');
      trigger('internal_torrclient', false);
    }

    Storage.set('player_size', 'default'); //делаем возврат на нормальный масштаб видео
  }
  /**
   * Переключатель
   * @param {String} name - название
   * @param {Boolean} _default - значение по дефолту
   */


  function trigger(name, _default) {
    values[name] = {
      'true': 'Да',
      'false': 'Нет'
    };
    defaults[name] = _default;
  }
  /**
   * Выбрать
   * @param {String} name - название
   * @param {*} _select - значение
   * @param {String} _default - значение по дефолту
   */


  function select(name, _select, _default) {
    values[name] = _select;
    defaults[name] = _default;
  }
  /**
   * Биндит события на элемент
   * @param {*} elems 
   */


  function bind(elems) {
    elems.on('hover:enter', function (event) {
      var elem = $(event.target);
      var type = elem.data('type');
      var name = elem.data('name');

      if (type == 'toggle') {
        var params = values[name];
        var keys = Arrays.isArray(params) ? params : Arrays.getKeys(params),
            value = Storage.get(name, defaults[name]) + '',
            position = keys.indexOf(value);
        position++;
        if (position >= keys.length) position = 0;
        position = Math.max(0, Math.min(keys.length - 1, position));
        value = keys[position];
        Storage.set(name, value);
        update$2(elem);
      }

      if (type == 'input') {
        Input.edit({
          elem: elem,
          name: name,
          value: elem.data('string') ? window.localStorage.getItem(name) || defaults[name] : Storage.get(name, defaults[name]) + ''
        }, function (new_value) {
          Storage.set(name, new_value);
          update$2(elem);
        });
      }

      if (type == 'button') {
        listener$1.send('button', {
          name: name
        });
      }

      if (type == 'add') {
        Input.edit({
          value: ''
        }, function (new_value) {
          if (new_value && Storage.add(name, new_value)) {
            displayAddItem(elem, new_value);
            listener$1.send('update_scroll');
          }
        });
      }

      if (type == 'select') {
        var _params = values[name];

        var _value = Storage.get(name, defaults[name]) + '';

        var items = [];

        for (var i in _params) {
          items.push({
            title: _params[i],
            value: i,
            selected: i == _value
          });
        }

        var enabled = Controller.enabled().name;
        Select.show({
          title: 'Выбрать',
          items: items,
          onBack: function onBack() {
            Controller.toggle(enabled);
          },
          onSelect: function onSelect(a) {
            Storage.set(name, a.value);
            update$2(elem);
            Controller.toggle(enabled);
          }
        });
      }
    }).each(function () {
      if (!$(this).data('static')) update$2($(this));
    });

    if (elems.eq(0).data('type') == 'add') {
      displayAddList(elems.eq(0));
    }
  }

  function displayAddItem(elem, element) {
    var name = elem.data('name');
    var item = $('<div class="settings-param selector"><div class="settings-param__name">' + element + '</div>' + '</div>');
    item.on('hover:long', function () {
      var list = Storage.get(name, '[]');
      Arrays.remove(list, element);
      Storage.set(name, list);
      item.css({
        opacity: 0.5
      });
    });
    elem.after(item);
  }

  function displayAddList(elem) {
    var list = Storage.get(elem.data('name'), '[]');
    list.forEach(function (element) {
      displayAddItem(elem, element);
    });
    listener$1.send('update_scroll');
  }
  /**
   * Обновляет значения на элементе
   * @param {*} elem 
   */


  function update$2(elem) {
    var name = elem.data('name');
    var key = elem.data('string') ? window.localStorage.getItem(name) || defaults[name] : Storage.get(name, defaults[name] + '');
    var val = typeof values[name] == 'string' ? key : values[name][key] || values[name][defaults[name]];
    var plr = elem.attr('placeholder');
    if (!val && plr) val = plr;
    elem.find('.settings-param__value').text(val);
  }
  /**
   * Получить значение параметра
   * @param {String} name 
   * @returns *
   */


  function field$1(name) {
    return Storage.get(name, defaults[name] + '');
  }
  /**
   * Добовляем селекторы
   */


  select('interface_size', {
    'small': 'Меньше',
    'normal': 'Нормальный'
  }, 'normal');
  select('parser_torrent_type', {
    'jackett': 'Jackett',
    'torlook': 'Torlook'
  }, 'jackett');
  select('torlook_parse_type', {
    'native': 'Напрямую',
    'site': 'Через API сайта'
  }, 'native');
  select('background_type', {
    'complex': 'Сложный',
    'simple': 'Простой',
    'poster': 'Картинка'
  }, 'simple');
  select('pages_save_total', {
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5'
  }, '2');
  select('player', {
    'inner': 'Встроенный'
  }, 'inner');
  select('torrserver_use_link', {
    'one': 'Основную',
    'two': 'Дополнительную'
  }, 'one');
  select('subtitles_size', {
    'small': 'Маленькие',
    'normal': 'Обычные',
    'large': 'Большие'
  }, 'normal');
  select('screensaver_type', {
    'movie': 'Фильмы',
    'nature': 'Природа',
    'chrome': 'ChromeCast'
  }, 'chrome');
  select('tmdb_lang', {
    'ru': 'Русский',
    'en': 'Английский'
  }, 'ru');
  select('parse_lang', {
    'df': 'Оригинал',
    'ru': 'Русский'
  }, 'df');
  select('player_timecode', {
    'again': 'Начать с начала',
    'continue': 'Продолжить'
  }, 'continue');
  select('player_scale_method', {
    'transform': 'Transform',
    'calculate': 'Рассчитать'
  }, 'transform');
  select('source', {
    'tmdb': 'TMDB',
    'cub': 'CUB'
  }, 'cub');
  select('start_page', {
    'main': 'Главная',
    'last': 'Последняя'
  }, 'last');
  select('scroll_type', {
    'css': 'CSS',
    'js': 'Javascript'
  }, 'css');
  select('card_views_type', {
    'preload': 'Подгружать',
    'view': 'Показать все'
  }, 'preload');
  select('navigation_type', {
    'controll': 'Пульт',
    'mouse': 'Пульт с мышкой'
  }, 'controll');
  select('time_offset', {
    'n-5': '-5',
    'n-4': '-4',
    'n-3': '-3',
    'n-2': '-2',
    'n-1': '-1',
    'n0': '0',
    'n1': '1',
    'n2': '2',
    'n3': '3',
    'n4': '4',
    'n5': '5'
  }, 'n0');
  /**
   * Добовляем тригеры
   */

  trigger('cloud_use', false);
  trigger('account_use', false);
  trigger('mask', true);
  trigger('playlist_next', true);
  trigger('internal_torrclient', true);
  trigger('subtitles_stroke', true);
  trigger('subtitles_backdrop', false);
  trigger('screensaver', true);
  trigger('torrserver_savedb', false);
  trigger('torrserver_preload', false);
  trigger('torrserver_auth', false);
  /**
   * Добовляем поля
   */

  select('cloud_token', '', '');
  select('account_email', '', '');
  select('account_password', '', '');
  select('device_name', '', 'Lampa-Lite');
  select('torrserver_url', '', '');
  select('torrserver_url_two', '', '');
  select('torrserver_login', '', '');
  select('torrserver_password', '', '');
  var Params = {
    listener: listener$1,
    init: init$6,
    bind: bind,
    update: update$2,
    field: field$1
  };

  var listener = start$3();

  function get$1(name, empty) {
    var value = window.localStorage.getItem(name) || empty || '';
    var convert = parseInt(value);
    if (!isNaN(convert) && /^\d+$/.test(value)) return convert;

    if (value == 'true' || value == 'false') {
      return value == 'true' ? true : false;
    }

    try {
      value = JSON.parse(value);
    } catch (error) {}

    return value;
  }

  function set(name, value, nolisten) {
    if (Arrays.isObject(value) || Arrays.isArray(value)) {
      var str = JSON.stringify(value);
      window.localStorage.setItem(name, str);
    } else {
      window.localStorage.setItem(name, value);
    }

    if (!nolisten) listener.send('change', {
      name: name,
      value: value
    });
  }

  function add$1(name, new_value) {
    var list = get$1(name, '[]');

    if (list.indexOf(new_value) == -1) {
      list.push(new_value);
      set(name, list);
      listener.send('add', {
        name: name,
        value: new_value
      });
      return true;
    }
  }

  function field(name) {
    return Params.field(name);
  }

  function cache(name, max, empty) {
    var result = get$1(name, JSON.stringify(empty));

    if (Arrays.isObject(empty)) {
      var c = Arrays.getKeys(result);
      if (c.length > max) delete result[c[0]];
      set(name, result);
    } else if (result.length > max) {
      result.shift();
      set(name, result);
    }

    return result;
  }

  var Storage = {
    listener: listener,
    get: get$1,
    set: set,
    field: field,
    cache: cache,
    add: add$1
  };

  function init$5() {
    if (typeof webOS !== 'undefined' && webOS.platform.tv === true) {
      Storage.set('platform', 'webos');
      webOS.deviceInfo(function (e) {
        webOS.sdk_version = parseFloat(e.sdkVersion);
      });
    } else if (typeof webapis !== 'undefined' && typeof tizen !== 'undefined') {
      Storage.set('platform', 'tizen');
      tizen.tvinputdevice.registerKey("MediaPlayPause");
      tizen.tvinputdevice.registerKey("MediaPlay");
      tizen.tvinputdevice.registerKey("MediaStop");
      tizen.tvinputdevice.registerKey("MediaPause");
      tizen.tvinputdevice.registerKey("MediaRewind");
      tizen.tvinputdevice.registerKey("MediaFastForward");
    } else if (navigator.userAgent.toLowerCase().indexOf("lampa_client") > -1) {
      Storage.set('platform', 'android');
    } else if (navigator.userAgent.toLowerCase().indexOf("windows nt") > -1) {
      Storage.set('platform', 'browser');
    } else if (navigator.userAgent.toLowerCase().indexOf("maple") > -1) {
      Storage.set('platform', 'orsay');
    } else {
      Storage.set('platform', '');
    }

    Storage.set('native', Storage.get('platform') ? true : false);
  }
  /**
   * Какая платформа
   * @returns String
   */


  function get() {
    return Storage.get('platform', '');
  }
  /**
   * Если это платформа
   * @param {String} need - какая нужна? tizen, webos, android, orsay
   * @returns Boolean
   */


  function is(need) {
    if (get() == need) return true;
  }
  /**
   * Если хоть одна из платформ tizen, webos, android
   * @returns Boolean
   */


  function any() {
    if (is('tizen') || is('webos') || is('android')) return true;
  }

  var Platform = {
    init: init$5,
    get: get,
    any: any,
    is: is
  };

  var html$3;
  var last;
  var scroll$1;

  function init$4() {
    html$3 = Template.get('menu');
    scroll$1 = new create$m({
      mask: true,
      over: true
    });
    Lampa.Listener.send('menu', {
      type: 'start',
      body: html$3
    });
    $('body').on('mouseup', function () {
      if ($('body').hasClass('menu--open')) {
        $('body').toggleClass('menu--open', false);
        Controller.toggle('content');
      }
    });
    scroll$1.minus();
    scroll$1.append(html$3);
    Lampa.Listener.send('menu', {
      type: 'end'
    });
    Controller.add('menu', {
      toggle: function toggle() {
        Controller.collectionSet(html$3);
        Controller.collectionFocus(last, html$3);
        $('body').toggleClass('menu--open', true);
      },
      right: function right() {
        Controller.toggle('content');
      },
      up: function up() {
        if (Navigator.canmove('up')) Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      gone: function gone() {
        $('body').toggleClass('menu--open', false);
      },
      back: function back() {
        Activity$1.backward();
      }
    });
  }

  function ready() {
    html$3.find('.selector').on('hover:enter', function (e) {
      var action = $(e.target).data('action');
      var type = $(e.target).data('type');
      if (action == 'catalog') catalog();

      if (action == 'movie' || action == 'tv' || action == 'anime') {
        var source = Storage.field('source');
        if (action == 'anime') source = 'cub';
        Api.menuCategory({
          action: action,
          source: source
        }, function (menu) {
          Select.show({
            title: 'Каталог',
            items: menu,
            onSelect: function onSelect(a) {
              Activity$1.push({
                url: a.url,
                title: (action == 'movie' ? 'Фильмы' : action == 'anime' ? 'Аниме' : 'Сериалы') + ' - ' + source.toUpperCase(),
                component: 'category_full',
                source: source,
                page: 1
              });
            },
            onBack: function onBack() {
              Controller.toggle('menu');
            }
          });
        });
      }

      if (action == 'main') {
        Activity$1.push({
          url: '',
          title: 'Главная - ' + Storage.field('source').toUpperCase(),
          component: 'main',
          source: Storage.field('source')
        });
      }

      if (action == 'search') Controller.toggle('search');
      if (action == 'settings') Controller.toggle('settings');

      if (action == 'about') {
        Modal.open({
          title: 'О приложении',
          html: Template.get('about'),
          size: 'medium',
          onBack: function onBack() {
            Modal.close();
            Controller.toggle('content');
          }
        });
      }

      if (action == 'favorite') {
        Activity$1.push({
          url: '',
          title: type == 'book' ? 'Закладки' : type == 'like' ? 'Нравится' : type == 'history' ? 'История просмотров' : 'Позже',
          component: 'favorite',
          type: type,
          page: 1
        });
      }

      if (action == 'relise') {
        Activity$1.push({
          url: '',
          title: 'Цифровые релизы',
          component: 'relise',
          page: 1
        });
      }

      html$3.find('.selector').removeClass('active');
      $(e.target).addClass('active');
    }).on('hover:focus', function (e) {
      last = e.target;
      scroll$1.update($(e.target), true);
    });
  }

  function catalog() {
    Api.menu({
      source: Storage.field('source')
    }, function (menu) {
      Select.show({
        title: 'Каталог',
        items: menu,
        onSelect: function onSelect(a) {
          Activity$1.push({
            url: Storage.field('source') == 'cub' ? '?sort=top&results=25' : 'movie/popular',
            title: 'Каталог - ' + a.title,
            component: 'category_full',
            genres: a.id,
            id: a.id,
            source: Storage.field('source'),
            page: 1
          });
        },
        onBack: function onBack() {
          Controller.toggle('menu');
        }
      });
    });
  }

  function render$1() {
    return scroll$1.render();
  }

  var Menu = {
    render: render$1,
    init: init$4,
    ready: ready
  };

  function init$3() {
    $(window).on('resize', update$1);
    toggleClasses();
    Storage.listener.follow('change', function (event) {
      if (event.name == 'interface_size') update$1();
      if (event.name == 'animation' || event.name == 'mask') toggleClasses();
    });
  }

  function size() {
    var sl = Storage.field('interface_size');
    var sz = {
      normal: 1,
      small: 0.9,
      bigger: 1.1
    };
    var fs = sz[sl];
    $('body').css({
      fontSize: Math.max(window.innerWidth / 84.17 * fs, 10.6) + 'px'
    }).removeClass('size--small size--normal size--bigger').addClass('size--' + sl);
  }

  function update$1() {
    size();
    $('.layer--height').css('height', window.innerHeight);
    $('.layer--width').each(function () {
      $(this).css('width', window.innerWidth * 0.84 + 'px');
    });
    $('.layer--wheight').each(function () {
      var elem = $(this),
          heig = window.innerHeight;

      if (elem.data('mheight')) {
        heig -= elem.data('mheight')[0].getBoundingClientRect().height;
      }

      elem.css('height', heig);
    });
  }

  function toggleClasses() {
    $('body').toggleClass('no--animation', !Storage.field('animation'));
    $('body').toggleClass('no--mask', !Storage.field('mask'));
  }

  var Layer = {
    update: update$1,
    init: init$3
  };

  function create$7() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var card = Template.get('more');

    if (params.card_small) {
      card.addClass('card-more--small');
    }

    this.create = function () {
      var _this = this;

      card.on('hover:focus', function (e) {
        _this.onFocus(e.target);
      }).on('hover:enter', function (e) {
        _this.onEnter(e.target);
      });
    };

    this.render = function () {
      return card;
    };

    this.destroy = function () {
      card.remove();
      card = null;
    };
  }

  function create$6(data) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var content = Template.get('items_line', {
      title: data.title
    });
    var body = content.find('.items-line__body');
    var scroll = new create$m({
      horizontal: true,
      step: 300
    });
    var viewall = Storage.field('card_views_type') == 'view' || Storage.get('navigation_type') == 'mouse';
    var items = [];
    var active = 0;
    var more;
    var last;

    this.create = function () {
      scroll.render().find('.scroll__body').addClass('items-cards');
      content.find('.items-line__title').text(data.title);
      this.bind();
      body.append(scroll.render());
    };

    this.bind = function () {
      data.results.slice(0, viewall ? data.results.length : 8).forEach(this.append.bind(this));
      if ((data.results.length >= 20 || data.more) && !params.nomore) this.more();
      this.visible();
      Layer.update();
    };

    this.append = function (element) {
      var _this = this;

      if (element.ready) return;
      element.ready = true;
      var card = new create$k(element, params);
      card.create();

      card.onFocus = function (target, card_data) {
        last = target;
        active = items.indexOf(card);
        if (!viewall) data.results.slice(0, active + 5).forEach(_this.append.bind(_this));

        if (more) {
          more.render().detach();
          scroll.append(more.render());
        }

        scroll.update(items[active].render(), params.align_left ? false : true);

        _this.visible();

        if (_this.onFocus) _this.onFocus(card_data);
      };

      card.onEnter = function (target, card_data) {
        if (_this.onEnter) _this.onEnter(target, card_data);
        if (_this.onPrevent) return _this.onPrevent(target, card_data);
        element.source = params.object.source;
        Activity$1.push({
          url: element.url,
          component: 'full',
          id: element.id,
          method: card_data.name ? 'tv' : 'movie',
          card: element,
          source: params.object.source
        });
      };

      if (params.card_events) {
        for (var i in params.card_events) {
          card[i] = params.card_events[i];
        }
      }

      scroll.append(card.render());
      items.push(card);
    };

    this.more = function () {
      var _this2 = this;

      more = new create$7(params);
      more.create();

      more.onFocus = function (target) {
        last = target;
        scroll.update(more.render(), params.align_left ? false : true);
        if (_this2.onFocusMore) _this2.onFocusMore();
      };

      more.onEnter = function () {
        if (_this2.onEnter) _this2.onEnter();

        if (_this2.onMore) {
          _this2.onMore();
        } else {
          Activity$1.push({
            url: data.url,
            title: 'Категория',
            component: 'category_full',
            page: 2,
            genres: params.genres,
            filter: data.filter,
            source: params.object.source
          });
        }
      };

      scroll.append(more.render());
    };

    this.visible = function () {
      var vis = items;
      if (!viewall) vis = items.slice(active, active + 8);
      vis.forEach(function (item) {
        item.visible();
      });
    };

    this.toggle = function () {
      var _this3 = this;

      Controller.add('items_line', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(items.length ? last : false, scroll.render());

          _this3.visible();
        },
        right: function right() {
          Navigator.move('right');
          Controller.enable('items_line');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else if (_this3.onLeft) _this3.onLeft();else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('items_line');
    };

    this.render = function () {
      return content;
    };

    this.destroy = function () {
      Arrays.destroy(items);
      scroll.destroy();
      content.remove();
      if (more) more.destroy();
      items = null;
      more = null;
    };
  }

  function create$5() {
    var scroll,
        timer,
        items = [],
        active = 0,
        query;
    this.listener = start$3();

    this.create = function () {
      scroll = new create$m({
        over: true
      });
    };

    this.search = function (value) {
      var _this = this;

      clearTimeout(timer);
      query = value;
      Api.clear();

      if (value.length >= 3) {
        timer = setTimeout(function () {
          Api.search({
            query: encodeURIComponent(value)
          }, function (data) {
            _this.clear();

            if (data.movie && data.movie.results.length) _this.build(data.movie, 'movie');
            if (data.tv && data.tv.results.length) _this.build(data.tv, 'tv');
            var name = Controller.enabled().name;
            if (name == 'items_line' || name == 'search_results') Controller.toggle('search_results');
          });
        }, 1000);
      } else {
        this.clear();
      }
    };

    this.build = function (data, type) {
      var _this2 = this;

      data.noimage = true;
      var params = {
        align_left: true,
        object: {
          source: 'cub'
        }
      };
      var item = new create$6(data, params);
      item.onDown = this.down;
      item.onUp = this.up;
      item.onBack = this.back.bind(this);

      item.onLeft = function () {
        _this2.listener.send('left');
      };

      item.onEnter = function () {
        _this2.listener.send('enter');
      };

      item.onMore = function (e, element) {
        Activity$1.push({
          url: 'search/' + type,
          title: 'Поиск - ' + query,
          component: 'category_full',
          page: 2,
          query: encodeURIComponent(query),
          source: 'tmdb'
        });
      };

      item.create();
      items.push(item);
      scroll.append(item.render());
    };

    this.back = function () {
      this.listener.send('back');
    };

    this.down = function () {
      active++;
      active = Math.min(active, items.length - 1);
      items[active].toggle();
      scroll.update(items[active].render());
    };

    this.up = function () {
      active--;

      if (active < 0) {
        active = 0;
      } else {
        items[active].toggle();
      }

      scroll.update(items[active].render());
    };

    this.any = function () {
      return items.length;
    };

    this.clear = function () {
      scroll.reset();
      scroll.append('<div class="selector" style="opacity: 0"></div>');
      active = 0;
      Arrays.destroy(items);
      items = [];
    };

    this.toggle = function () {
      var _this3 = this;

      Controller.add('search_results', {
        invisible: true,
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());

          if (items.length) {
            items[active].toggle();
          }
        },
        back: function back() {
          _this3.listener.send('back');
        },
        left: function left() {
          _this3.listener.send('left');
        }
      });
      Controller.toggle('search_results');
    };

    this.render = function () {
      return scroll.render();
    };

    this.destroy = function () {
      clearTimeout(timer);
      Api.clear();
      this.clear();
      scroll.destroy();
      this.listener.destroy();
    };
  }

  function create$4() {
    var scroll,
        last,
        keys = [];
    this.listener = start$3();

    this.create = function () {
      var _this = this;

      scroll = new create$m({
        over: true,
        mask: false,
        nopadding: true
      });
      keys = Storage.get('search_history', '[]');
      keys.forEach(function (key) {
        _this.append(key);
      });
    };

    this.append = function (value) {
      var _this2 = this;

      var key = $('<div class="search-history-key selector"><div><span>' + value + '</span><div>Влево - удалить</div></div></div>');
      key.on('hover:enter', function () {
        _this2.listener.send('enter', {
          value: value
        });
      }).on('hover:focus', function (e) {
        last = e.target;
        scroll.update($(e.target));
      });
      scroll.append(key);
    };

    this.add = function (value) {
      if (keys.indexOf(value) == -1) {
        Arrays.insert(keys, 0, value);
        Storage.set('search_history', keys);
      }
    };

    this.any = function () {
      return keys.length;
    };

    this.toggle = function () {
      var _this3 = this;

      Controller.add('search_history', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last, scroll.render());
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else _this3.listener.send('up');
        },
        down: function down() {
          Navigator.move('down');
        },
        right: function right() {
          _this3.listener.send('right');
        },
        back: function back() {
          _this3.listener.send('back');
        },
        left: function left() {
          var elem = scroll.render().find('.focus'),
              selc = scroll.render().find('.selector');

          if (elem.length) {
            Arrays.remove(keys, $('span', elem).text());
            Storage.set('search_history', keys);
            var index = selc.index(elem);
            if (index > 0) last = selc.eq(index - 1)[0];else if (selc[index + 1]) last = selc.eq(index + 1)[0];
            elem.remove();
            if (selc.length - 1 <= 0) last = false;
            Controller.toggle('search_history');
          }
        }
      });
      Controller.toggle('search_history');
    };

    this.render = function () {
      return scroll.render();
    };

    this.destroy = function () {
      scroll.destroy();
      this.listener.destroy();
      keys = null;
      last = null;
    };
  }

  var html$2 = $('<div></div>'),
      search,
      results,
      history,
      keyboard,
      input = '';

  function create$3() {
    search = Template.get('search');
    html$2.append(search);
    createHistory();
    createResults();
    createKeyboard();
  }

  function createHistory() {
    history = new create$4();
    history.create();
    history.listener.follow('right', function () {
      results.toggle();
    });
    history.listener.follow('up', function () {
      keyboard.toggle();
    });
    history.listener.follow('enter', function (event) {
      results.clear();
      keyboard.value(event.value);
      results.toggle();
    });
    history.listener.follow('back', destroy);
    search.find('.search__history').append(history.render());
  }

  function createResults() {
    results = new create$5();
    results.create();
    results.listener.follow('left', function () {
      keyboard.toggle();
    });
    results.listener.follow('enter', function () {
      if (input) history.add(input);
      destroy();
    });
    results.listener.follow('back', destroy);
    search.find('.search__results').append(results.render());
  }

  function createKeyboard() {
    keyboard = new create$8({
      layout: {
        'en': ['1 2 3 4 5 6 7 8 9 0 -', 'q w e r t y u i o p', 'a s d f g h j k l', 'z x c v b n m .', '{mic} {RU} {space} {bksp}'],
        'default': ['1 2 3 4 5 6 7 8 9 0 -', 'й ц у к е н г ш щ з х ъ', 'ф ы в а п р о л д ж э', 'ё я ч с м и т ь б ю .', '{mic} {EN} {space} {bksp}']
      }
    });
    keyboard.create();
    keyboard.listener.follow('change', function (event) {
      input = event.value.trim();

      if (input) {
        search.find('.search__input').text(input);
        results.search(input);
      } else {
        search.find('.search__input').text('Введите текст...');
      }
    });
    keyboard.listener.follow('right', function () {
      if (results.any()) results.toggle();
    });
    keyboard.listener.follow('down', function () {
      if (history.any()) history.toggle();
    });
    keyboard.listener.follow('back', destroy);
    keyboard.toggle();
  }

  function render() {
    return html$2;
  }

  function destroy() {
    keyboard.destroy();
    results.destroy();
    history.destroy();
    search.remove();
    html$2.empty();
    Controller.toggle('content');
  }

  Controller.add('search', {
    invisible: true,
    toggle: function toggle() {
      create$3();
    },
    back: destroy
  });
  var Search = {
    render: render
  };

  function app() {
    var app = $('#app').empty();
    var wrap = Template.get('wrap');
    wrap.find('.wrap__left').append(Menu.render());
    wrap.find('.wrap__content').append(Activity$1.render());
    app.append(wrap);
    app.append(Settings.render());
    app.append(Search.render());
    app.append(Noty.render());
  }

  var Render = {
    app: app
  };

  var items = [];
  var times = 0;
  var html$1;
  var scroll;

  function init$2() {
    Keypad.listener.follow('keydown', function (e) {
      if (e.code == 38 || e.code == 29460) {
        var enable = Controller.enabled();

        if (enable.name == 'menu') {
          times++;

          if (times > 25) {
            Controller.toggle('console');
          }
        } else {
          times = 0;
        }
      }
    });
    Controller.add('console', {
      toggle: function toggle() {
        build();
        Controller.collectionSet(html$1);
        Controller.collectionFocus(false, html$1);
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      back: function back() {
        times = 0;
        scroll.destroy();
        html$1.remove();
        Controller.toggle('menu');
      }
    });
    follow();
  }

  function build() {
    html$1 = Template.get('console');
    scroll = new create$m({
      over: true
    });
    scroll.minus();
    items.forEach(function (element) {
      var item = $(element);
      item.on('hover:focus', function (e) {
        scroll.update($(e.target));
      });
      scroll.append(item);
    });
    html$1.append(scroll.render());
    $('body').append(html$1);
  }

  function add(message) {
    try {
      Arrays.insert(items, 0, '<div class="console__line selector"><span>' + message + '</span></div>');
    } catch (e) {
      Arrays.insert(items, 0, '<div class="console__line selector"><span>Failed to print line</span></div>');
    }

    if (items.length > 50) items.pop();
  }

  function escapeHtml(text) {
    return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  }

  function decode(arr) {
    if (Arrays.isObject(arr) || Arrays.isArray(arr)) {
      arr = JSON.stringify(arr);
    } else if (typeof arr === 'string' || typeof arr === 'number' || typeof arr === 'boolean') {
      arr = escapeHtml(arr + '');
    } else {
      var a = [];

      for (var i in arr) {
        a.push(i + ': ' + arr[i]);
      }

      arr = JSON.stringify(a);
    }

    arr = Utils.shortText(arr, 600);
    return arr;
  }

  function follow() {
    var log = console.log;

    console.log = function () {
      var msgs = [];
      var mcon = [];

      while (arguments.length) {
        var arr = [].shift.call(arguments);
        msgs.push(decode(arr));
        mcon.push(arr);
      }

      msgs[0] = '<span style="color: ' + Utils.stringToHslColor(msgs[0], 50, 65) + '">' + msgs[0] + '</span>';
      add(msgs.join(' '));
      log.apply(console, mcon);
    };

    window.addEventListener("error", function (e) {
      add((e.error || e).message + '<br><br>' + (e.error && e.error.stack ? e.error.stack : e.stack || '').split("\n").join('<br>'));
      Noty.show('Error: ' + (e.error || e).message + '<br><br>' + (e.error && e.error.stack ? e.error.stack : e.stack || '').split("\n").join('<br>'));
    });
  }

  var Console = {
    init: init$2
  };

  function create$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var search = Template.get('search_box');
    var input = '';

    function destroy() {
      keyboard.destroy();
      search.remove();
      search = null;
    }

    function back() {
      destroy();
      params.onBack();
    }

    function enter() {
      destroy();
      params.onSearch(input);
    }

    function change(text) {
      input = text.trim();

      if (input) {
        search.find('.search-box__input').text(input);
      } else {
        search.find('.search-box__input').text('Введите текст...');
      }
    }

    $('body').append(search);
    var keyboard = new create$8({
      layout: {
        'en': ['1 2 3 4 5 6 7 8 9 0 - {bksp}', 'q w e r t y u i o p', 'a s d f g h j k l', 'z x c v b n m .', '{mic} {RU} {space} {search}'],
        'default': ['1 2 3 4 5 6 7 8 9 0 - {bksp}', 'й ц у к е н г ш щ з х ъ', 'ф ы в а п р о л д ж э', 'я ч с м и т ь б ю .', '{mic} {EN} {space} {search}']
      }
    });
    keyboard.create();
    keyboard.listener.follow('change', function (event) {
      change(event.value);
    });
    keyboard.listener.follow('back', back);
    keyboard.listener.follow('enter', enter);
    keyboard.value(params.input);
    change(params.input);
    keyboard.toggle();
  }

  function create$1() {
    var _this2 = this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var line = Template.get('filter');
    var empty = $('<div class="simple-button selector" style="margin: 2em auto 0 auto">Уточнить поиск</div>');
    var data = {
      sort: [],
      filter: []
    };
    var similars = [];

    function selectSearch() {
      var _this = this;

      var selected = params.search_one == params.search ? 0 : params.search_two == params.search ? 1 : -1;
      var search = [];

      if (similars.length) {
        similars.forEach(function (sim) {
          search.push({
            title: sim,
            query: sim
          });
        });
      } else {
        if (params.search_one) {
          search.push({
            title: params.search_one,
            query: params.search_one,
            selected: selected == 0
          });
        }

        if (params.search_two) {
          search.push({
            title: params.search_two,
            query: params.search_two,
            selected: selected == 1
          });
        }
      }

      search.push({
        title: 'Указать название',
        selected: selected == -1,
        query: ''
      });
      Select.show({
        title: 'Уточнить',
        items: search,
        onBack: this.onBack,
        onSelect: function onSelect(a) {
          if (!a.query) {
            new create$2({
              input: params.search,
              onSearch: _this.onSearch,
              onBack: _this.onBack
            });
          } else {
            _this.onSearch(a.query);
          }
        }
      });
    }

    empty.on('hover:enter', selectSearch.bind(this));
    line.find('.filter--search').on('hover:enter', selectSearch.bind(this));
    line.find('.filter--sort').on('hover:enter', function () {
      _this2.show('Сортировать', 'sort');
    });
    line.find('.filter--filter').on('hover:enter', function () {
      _this2.show('Фильтр', 'filter');
    });

    this.show = function (title, type) {
      var _this3 = this;

      var where = data[type];
      Select.show({
        title: title,
        items: where,
        onBack: this.onBack,
        onSelect: function onSelect(a) {
          _this3.selected(where, a);

          if (a.items) {
            Select.show({
              title: a.title,
              items: a.items,
              onBack: function onBack() {
                _this3.show(title, type);
              },
              onSelect: function onSelect(b) {
                _this3.selected(a.items, b);

                _this3.onSelect(type, a, b);

                _this3.show(title, type);
              },
              onCheck: function onCheck(b) {
                _this3.onCheck(type, a, b);
              }
            });
          } else {
            _this3.onSelect(type, a);
          }
        }
      });
    };

    this.selected = function (items, a) {
      items.forEach(function (element) {
        element.selected = false;
      });
      a.selected = true;
    };

    this.render = function () {
      return line;
    };

    this.append = function (add) {
      html.find('.files__body').append(add);
    };

    this.empty = function () {
      return empty;
    };

    this.toggle = function () {
      line.find('.filter--sort').toggleClass('selector', data.sort.length ? true : false).toggleClass('hide', data.sort.length ? false : true);
      line.find('.filter--filter').toggleClass('selector', data.filter.length ? true : false).toggleClass('hide', data.filter.length ? false : true);
    };

    this.set = function (type, items) {
      data[type] = items;
      this.toggle();
    };

    this.get = function (type) {
      return data[type];
    };

    this.similar = function (sim) {
      similars = sim;
      return empty;
    };

    this.sort = function (items, by) {
      items.sort(function (c, b) {
        if (c[by] < b[by]) return 1;
        if (c[by] > b[by]) return -1;
        return 0;
      });
    };

    this.chosen = function (type, select) {
      line.find('.filter--' + type + ' > div').text(Utils.shortText(select.join(', '), 25)).toggleClass('hide', select.length ? false : true);
    };

    this.destroy = function () {
      empty.remove();
      line.remove();
      empty = null;
      line = null;
      data = null;
    };
  }

  var body$1;
  var code = 0;
  var network = new create$n();
  var fields = ['torrents_view', 'plugins', 'favorite', 'file_view'];
  var timer;
  var readed;
  /**
   * Запуск
   */

  function init$1() {
    if (Storage.field('cloud_use')) status(1);
    Settings.listener.follow('open', function (e) {
      body$1 = null;

      if (e.name == 'cloud') {
        body$1 = e.body;
        renderStatus();
      }
    });
    Storage.listener.follow('change', function (e) {
      if (e.name == 'cloud_token') {
        login(start);
      } else if (e.name == 'cloud_use') {
        if (e.value == 'true') login(start);else status(0);
      } else if (fields.indexOf(e.name) >= 0) {
        clearTimeout(timer);
        timer = setTimeout(update, 500);
      }
    });
    login(start);
  }
  /**
   * Статус
   * @param {Int} c - код
   */


  function status(c) {
    code = c;
    renderStatus();
  }
  /**
   * Рендер статуса
   */


  function renderStatus() {
    if (body$1) {
      var item = body$1.find('.settings--cloud-status'),
          name = item.find('.settings-param__name'),
          desc = item.find('.settings-param__descr');

      if (code == 0) {
        name.text('Отключено');
        desc.text('Включите синхронизацию');
      }

      if (code == 1) {
        name.text('Не авторизованы');
        desc.text('Необходимо авторизоваться ');
      }

      if (code == 2) {
        name.text('Авторизация не удалась');
        desc.text('Проверьте введённые данные и повторите попытку');
      }

      if (code == 3) {
        name.text('Вошли');
        desc.text('Вы успешно авторизовались');
      }

      if (code == 4) {
        var time = Utils.parseTime(Storage.get('cloud_time', '2021.01.01'));
        name.text('Синхронизовано');
        desc.text(time.full + ' в ' + time.time);
      }
    }
  }
  /**
   * Проверка авторизации
   * @param {Function} good - успешно
   * @param {Function} fail - провал
   */


  function login(good, fail) {
    if (Storage.get('cloud_token') && Storage.field('cloud_use')) {
      network.silent('https://api.github.com/gists', function (data) {
        status(3);
        if (good) good();
        network.silent('https://api.github.com/gists/' + data.id, false, false, false, {
          type: 'delete',
          beforeSend: {
            name: 'Authorization',
            value: 'bearer ' + Storage.get('cloud_token')
          },
          headers: {
            'Accept': 'application/vnd.github.v3+json'
          }
        });
      }, function () {
        status(2);
        if (fail) fail();
      }, JSON.stringify({
        'files': {
          'lampa-login.json': {
            'content': '{"login":true}'
          }
        }
      }), {
        beforeSend: {
          name: 'Authorization',
          value: 'bearer ' + Storage.get('cloud_token')
        },
        headers: {
          'Accept': 'application/vnd.github.v3+json'
        }
      });
    } else {
      status(Storage.field('cloud_use') ? 1 : 0);
      if (fail) fail();
    }
  }
  /**
   * Считываем файл и обновляем данные с облака
   */


  function read(call) {
    var time = Storage.get('cloud_time', '2021.01.01');

    if (time !== readed.item.updated_at) {
      network.silent(readed.file.raw_url, function (data) {
        Storage.set('cloud_time', readed.item.updated_at);

        for (var i in data) {
          Storage.set(i, data[i], true);
        }

        status(4);
        if (call) call();
      });
    } else if (call) call();
  }
  /**
   * Обновляем состояние
   */


  function update() {
    save();
  }
  /**
   * Получаем список файлов
   */


  function start(call) {
    if (Storage.get('cloud_token') && Storage.field('cloud_use')) {
      network.silent('https://api.github.com/gists', function (data) {
        var file;
        var item;
        data.forEach(function (elem) {
          for (var i in elem.files) {
            if (elem.files[i].filename == 'lampa-data.json') {
              item = elem;
              file = elem.files[i];
            }
          }
        });

        if (file) {
          Storage.set('cloud_data_id', item.id);
          readed = {
            file: file,
            item: item
          };
          read(call);
        } else save(call);
      }, function () {}, false, {
        beforeSend: {
          name: 'Authorization',
          value: 'bearer ' + Storage.get('cloud_token')
        },
        headers: {
          'Accept': 'application/vnd.github.v3+json'
        }
      });
    }
  }
  /**
   * Сохраняем закладки в облако
   */


  function save(call) {
    if (Storage.get('cloud_token') && Storage.field('cloud_use')) {
      var conent = JSON.stringify({
        torrents_view: Storage.get('torrents_view', '[]'),
        plugins: Storage.get('plugins', '[]'),
        favorite: Storage.get('favorite', '{}'),
        file_view: Storage.get('file_view', '{}'),
        setting_member: Storage.get('setting_member', '[]')
      }, null, 4);
      var id = Storage.get('cloud_data_id', '');
      network.silent('https://api.github.com/gists' + (id ? '/' + id : ''), function (data) {
        Storage.set('cloud_time', data.updated_at);
        Storage.set('cloud_data_id', data.id);
        status(4);
        if (call) call();
      }, function () {
        Storage.set('cloud_data_id', '');
        status(5);
      }, JSON.stringify({
        'files': {
          'lampa-data.json': {
            'content': conent
          }
        }
      }), {
        beforeSend: {
          name: 'Authorization',
          value: 'bearer ' + Storage.get('cloud_token')
        },
        headers: {
          'Accept': 'application/vnd.github.v3+json'
        }
      });
    }
  }

  var Cloud = {
    init: init$1
  };

  var body;
  /**
   * Запуск
   */

  function init() {
    Settings.listener.follow('open', function (e) {
      body = null;

      if (e.name == 'plugins') {
        body = e.body;
        renderPanel();
      }
    });
  }
  /**
   * Рендер панели плагинов
   */


  function renderPanel() {
    if (body) {
      var list = Storage.get('plugins', '[]');
      $('.selector', body).on('hover:enter', function () {
        Input.edit({
          value: ''
        }, function (new_value) {
          if (new_value && Storage.add('plugins', new_value)) {
            renderPlugin(new_value, {
              is_new: true,
              checked: function checked(error) {
                Modal.open({
                  title: '',
                  html: $('<div class="about"><div class="selector">' + (error ? 'Не удалось проверить работоспособность плагина, однако это не означает что он не работает. Перезагрузите приложение для выяснения загружается ли плагин.' : 'Для работы плагина, необходимо перезагрузить приложение.') + '</div></div>'),
                  onBack: function onBack() {
                    Modal.close();
                    Controller.toggle('settings_component');
                  },
                  onSelect: function onSelect() {
                    Modal.close();
                    Controller.toggle('settings_component');
                  }
                });
              }
            });
            Params.listener.send('update_scroll');
          }
        });
      });
      list.forEach(function (url) {
        renderPlugin(url);
      });
      Account.plugins(function (plugins) {
        plugins.forEach(function (plugin) {
          renderPlugin(plugin.url, {
            is_cub: true,
            plugin: plugin
          });
        });
        Controller.enable('settings_component');
        Params.listener.send('update_scroll');
      });
      Params.listener.send('update_scroll');
    }
  }
  /**
   * Рендер плагина
   */


  function renderPlugin(url) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var item = $('<div class="settings-param selector"><div class="settings-param__name">' + url + '</div><div class="settings-param__descr">' + (params.is_cub ? 'Загружено из CUB' : 'Нажмите для проверки плагина') + '</div><div class="settings-param__status"></div></div>');

    var check = function check() {
      var status = $('.settings-param__status', item).removeClass('active error wait').addClass('wait');
      $.ajax({
        dataType: 'text',
        url: url,
        timeout: 2000,
        crossDomain: true,
        success: function success(data) {
          status.removeClass('wait').addClass('active');
          if (params.checked) params.checked();
        },
        error: function error(jqXHR, exception) {
          status.removeClass('wait').addClass('error');
          if (params.checked) params.checked(true);
        }
      });
    };

    if (!params.is_cub) {
      item.on('hover:long', function () {
        var list = Storage.get('plugins', '[]');
        Arrays.remove(list, url);
        Storage.set('plugins', list);
        item.css({
          opacity: 0.5
        });
      });
    } else {
      if (!params.plugin.status) item.css({
        opacity: 0.5
      });
    }

    item.on('hover:enter', check);
    if (params.is_new) check();
    $('.selector:eq(0)', body).after(item);
  }
  /**
   * Загрузка всех плагинов
   */


  function load(call) {
    Account.plugins(function (plugins) {
      var list = plugins.filter(function (plugin) {
        return plugin.status;
      }).map(function (plugin) {
        return plugin.url;
      }).concat(Storage.get('plugins', '[]'));
      console.log('Plugins', 'list:', list);
      Utils.putScript(list, call);
    });
  }

  var Plugins = {
    init: init,
    load: load
  };

  var socket;
  var ping;
  var uid = Utils.uid();

  function connect() {
    clearInterval(ping);

    try {
      socket = new WebSocket('wss://cub.watch:8020');
    } catch (e) {
      console.log('Socket', 'not work');
      return;
    }

    socket.addEventListener('open', function (event) {
      console.log('Socket', 'open');
      send('start', {});
      ping = setInterval(function () {
        send('ping', {});
      }, 5000);
    });
    socket.addEventListener('close', function (event) {
      console.log('Socket', 'close', event.code);
      setTimeout(connect, 5000);
    });
    socket.addEventListener('error', function (event) {
      console.log('Socket', 'error', event.message, event.code);
      socket.close();
    }, false);
    socket.addEventListener('message', function (event) {
      var result = JSON.parse(event.data);

      if (result.method == 'devices') ; else if (result.method == 'open') {
        Controller.toContent();
        Activity$1.push(result.data);
      }
    });
  }

  function send(method, data) {
    data.device_id = uid;
    data.name = Storage.field('device_name');
    data.method = method;
    data.version = 1;
    socket.send(JSON.stringify(data));
  }

  var Socket = {
    init: connect,
    send: send
  };

  function create() {
    this.render = function () {
      return $('<div></div>');
    };

    this.append = function () {};

    this.destroy = function () {};

    this.clear = function () {};
  }

  var Background = {
    change: function change() {},
    update: function update() {},
    immediately: function immediately() {}
  };

  window.Lampa = {
    Listener: start$3(),
    Subscribe: start$3,
    Storage: Storage,
    Platform: Platform,
    Utils: Utils,
    Params: Params,
    Menu: Menu,
    Favorite: Favorite,
    Select: Select,
    Controller: Controller,
    Activity: Activity$1,
    Keypad: Keypad,
    Template: Template,
    Component: Component,
    Reguest: create$n,
    Filter: create$1,
    Scroll: create$m,
    Empty: create$i,
    Arrays: Arrays,
    Noty: Noty,
    Player: Player,
    Timeline: Timeline,
    Modal: Modal,
    Api: Api,
    Cloud: Cloud,
    Settings: Settings,
    Android: Android,
    Card: create$k,
    Info: create$j,
    Account: Account,
    Socket: Socket,
    Files: create,
    Background: Background,
    Input: Input,
    Screensaver: Screensaver
  };
  Console.init();

  function startApp() {
    if (window.appready) return;
    setTimeout(function () {
      $('.welcome').fadeOut(500);
      Keypad.enable();
    }, 1000);
    Lampa.Listener.send('app', {
      type: 'start'
    });
    if (!Storage.get('device_uid')) Storage.set('device_uid', Utils.uid(32));
    Keypad.init();
    Settings.init();
    Platform.init();
    Params.init();
    Favorite.init();
    Menu.init();
    Activity$1.init();

    if (Platform.is('orsay')) {
      Orsay.init();
    }

    Layer.init();
    Screensaver.init();
    Cloud.init();
    Account.init();
    Plugins.init();
    Socket.init();
    Storage.set('account_password', ''); //надо зачиcтить, не хорошо светить пароль ;)

    Controller.listener.follow('toggle', function () {
      Layer.update();
    });
    Activity$1.listener.follow('backward', function (event) {
      if (event.count == 1) {
        var enabled = Controller.enabled();
        Select.show({
          title: 'Выход',
          items: [{
            title: 'Да, выйти',
            out: true
          }, {
            title: 'Продолжить'
          }],
          onSelect: function onSelect(a) {
            if (a.out) {
              Activity$1.out();
              Controller.toggle(enabled.name);
              if (Platform.is('tizen')) tizen.application.getCurrentApplication().exit();
              if (Platform.is('webos')) window.close();
              if (Platform.is('android')) Android.exit(); //пока не используем, нужно разобраться почему вызывается активити при загрузке главной

              if (Platform.is('orsay')) Orsay.exit();
            } else {
              Controller.toggle(enabled.name);
            }
          },
          onBack: function onBack() {
            Controller.toggle(enabled.name);
          }
        });
      }
    });
    Navigator.follow('focus', function (event) {
      Controller.focus(event.elem);
    });
    Render.app();
    Layer.update();
    Activity$1.last();
    setTimeout(function () {
      Screensaver.enable();
    }, 1000);
    $('body').addClass('platform--' + Platform.get());

    if (Platform.is('orsay')) {
      Utils.putStyle(['http://lite.lampa.mx/css/app.css'], function () {
        $('link[href="css/app.css"]').remove();
      });
    } else if (window.location.protocol == 'file:') {
      Utils.putStyle(['https://yumata.github.io/lampa-lite/css/app.css'], function () {
        $('link[href="css/app.css"]').remove();
      });
    }

    if (Platform.is('android')) {
      Params.listener.follow('button', function (e) {
        if (e.name === 'reset_player') {
          Android.resetDefaultPlayer();
        }
      });
      Favorite.listener.follow('add,added,remove', function (e) {
        Android.updateChannel(e.where);
      });
    }

    Favorite.listener.follow('add,added', function (e) {
      if (e.where == 'history' && e.card.id) {
        $.get(Utils.protocol() + 'tmdb.cub.watch/watch?id=' + e.card.id + '&cat=' + (e.card.original_name ? 'tv' : 'movie'));
      }
    });
    Lampa.Listener.send('app', {
      type: 'ready'
    });
    Menu.ready();
    window.appready = true; //пометка что уже загружено
  } // принудительно стартовать


  setTimeout(startApp, 1000 * 5);
  Plugins.load(startApp);

})();
